Results	Entity	Line	Column	CheckID	Check Name
Number of Results: 8539					
  libclang					
    ARCMigrate.cpp					
      Violation: clang_getRemappings defined but not called.	clang_getRemappings	35	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getRemappingsFromFileList defined but not called.	clang_getRemappingsFromFileList	77	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_remap_getNumFiles defined but not called.	clang_remap_getNumFiles	121	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_remap_getFilenames defined but not called.	clang_remap_getFilenames	126	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_remap_dispose defined but not called.	clang_remap_dispose	136	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter migrate_dir_path in Non Virtual Functions	migrate_dir_path	35	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter filePaths in Non Virtual Functions	filePaths	77	57	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter numFiles in Non Virtual Functions	numFiles	78	53	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Undefined macro identifier CLANG_ENABLE_ARCMT used incorrectly	CLANG_ENABLE_ARCMT	36	5	MISRA08_16-0-7	16-0-7 Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator
      Undefined macro identifier CLANG_ENABLE_ARCMT used incorrectly	CLANG_ENABLE_ARCMT	79	5	MISRA08_16-0-7	16-0-7 Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator
      Violation: File contains invalid dynamic memory statement.		58	31	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		85	31	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		137	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      An object or function, clang_getRemappings, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getRemappings	35	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getRemappingsFromFileList, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getRemappingsFromFileList	77	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_remap_getNumFiles, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_remap_getNumFiles	121	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_remap_getFilenames, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_remap_getFilenames	126	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_remap_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_remap_dispose	136	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "char" used in "const char *".	migrate_dir_path	35	44	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char **".	filePaths	77	57	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Loop or switch statement not enclosed in curly braces { } in ARCMigrate.cpp.	clang_getRemappings	68	41	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in ARCMigrate.cpp.	clang_getRemappingsFromFileList	112	41	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in ARCMigrate.cpp.	clang_getRemappings	44	76	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ARCMigrate.cpp.	clang_getRemappingsFromFileList	90	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ARCMigrate.cpp.	clang_getRemappingsFromFileList	97	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ARCMigrate.cpp.	clang_remap_getFilenames	130	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ARCMigrate.cpp.	clang_remap_getFilenames	133	65	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      For loop contains more than one loop counter	clang_getRemappings	67	39	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	clang_getRemappingsFromFileList	111	39	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	clang_getRemappings	67	78	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	clang_getRemappingsFromFileList	111	78	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Multiple exit points from function	clang_getRemappings	35	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getRemappingsFromFileList	77	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value numFiles not const qualified	numFiles	78	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value map not const qualified	map	121	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value original not const qualified	original	127	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value transformed not const qualified	transformed	127	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value map not const qualified	map	136	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration Remap.	Remap	25	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getRemappings.	clang_getRemappings	35	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getRemappingsFromFileList.	clang_getRemappingsFromFileList	77	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_remap_getNumFiles.	clang_remap_getNumFiles	121	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_remap_getFilenames.	clang_remap_getFilenames	126	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_remap_dispose.	clang_remap_dispose	136	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: ARCMigrate.cpp.	ARCMigrate.cpp	20	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: ARCMigrate.cpp.	ARCMigrate.cpp	21	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
    BuildSystem.cpp					
      Violation: clang_getBuildSessionTimestamp defined but not called.	clang_getBuildSessionTimestamp	26	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_VirtualFileOverlay_addFileMapping defined but not called.	clang_VirtualFileOverlay_addFileMapping	38	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_VirtualFileOverlay_setCaseSensitivity defined but not called.	clang_VirtualFileOverlay_setCaseSensitivity	61	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_VirtualFileOverlay_writeToBuffer defined but not called.	clang_VirtualFileOverlay_writeToBuffer	70	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_free defined but not called.	clang_free	87	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_VirtualFileOverlay_dispose defined but not called.	clang_VirtualFileOverlay_dispose	91	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ModuleMapDescriptor_create defined but not called.	clang_ModuleMapDescriptor_create	101	22	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ModuleMapDescriptor_setFrameworkModuleName defined but not called.	clang_ModuleMapDescriptor_setFrameworkModuleName	106	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ModuleMapDescriptor_setUmbrellaHeader defined but not called.	clang_ModuleMapDescriptor_setUmbrellaHeader	116	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ModuleMapDescriptor_writeToBuffer defined but not called.	clang_ModuleMapDescriptor_writeToBuffer	126	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ModuleMapDescriptor_dispose defined but not called.	clang_ModuleMapDescriptor_dispose	149	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	70	65	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	101	55	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	126	67	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Variable	ModuleName	97	14	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	UmbrellaHeader	98	14	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Type declaration CXModuleMapDescriptorImpl	CXModuleMapDescriptorImpl	96	7	MISRA08_0-1-5	0-1-5 A project shall not contain unused type declarations
      Violation: File contains invalid dynamic memory statement.	free	88	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		34	14	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		92	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		102	9	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		150	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      An object or function, clang_getBuildSessionTimestamp, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getBuildSessionTimestamp	26	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_VirtualFileOverlay_addFileMapping, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_VirtualFileOverlay_addFileMapping	38	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_VirtualFileOverlay_setCaseSensitivity, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_VirtualFileOverlay_setCaseSensitivity	61	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_VirtualFileOverlay_writeToBuffer, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_VirtualFileOverlay_writeToBuffer	70	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_free, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_free	87	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_VirtualFileOverlay_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_VirtualFileOverlay_dispose	91	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ModuleMapDescriptor_create, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ModuleMapDescriptor_create	101	22	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ModuleMapDescriptor_setFrameworkModuleName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ModuleMapDescriptor_setFrameworkModuleName	106	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ModuleMapDescriptor_setUmbrellaHeader, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ModuleMapDescriptor_setUmbrellaHeader	116	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ModuleMapDescriptor_writeToBuffer, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ModuleMapDescriptor_writeToBuffer	126	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ModuleMapDescriptor_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ModuleMapDescriptor_dispose	149	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "long" used in "unsigned long long".	clang_getBuildSessionTimestamp	26	19	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	virtualPath	39	52	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	realPath	40	52	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	caseSensitive	62	48	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "char **".	out_buffer_ptr	71	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	name	107	61	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	name	117	56	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "char **".	out_buffer_ptr	127	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_VirtualFileOverlay_addFileMapping	42	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_VirtualFileOverlay_addFileMapping	44	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_VirtualFileOverlay_addFileMapping	46	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_VirtualFileOverlay_addFileMapping	53	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_VirtualFileOverlay_setCaseSensitivity	64	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_VirtualFileOverlay_writeToBuffer	74	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_ModuleMapDescriptor_setFrameworkModuleName	109	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_ModuleMapDescriptor_setUmbrellaHeader	119	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in BuildSystem.cpp.	clang_ModuleMapDescriptor_writeToBuffer	130	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      For loop contains more than one loop counter	clang_VirtualFileOverlay_addFileMapping	49	38	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	clang_VirtualFileOverlay_addFileMapping	50	52	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Multiple exit points from function	clang_VirtualFileOverlay_addFileMapping	38	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_VirtualFileOverlay_setCaseSensitivity	61	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_VirtualFileOverlay_writeToBuffer	70	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ModuleMapDescriptor_setFrameworkModuleName	106	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ModuleMapDescriptor_setUmbrellaHeader	116	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ModuleMapDescriptor_writeToBuffer	126	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value VFO not const qualified	VFO	38	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Comp not const qualified	Comp	51	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value VFO not const qualified	VFO	61	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value caseSensitive not const qualified	caseSensitive	62	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value VFO not const qualified	VFO	70	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_buffer_ptr not const qualified	out_buffer_ptr	71	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_buffer_size not const qualified	out_buffer_size	72	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Data not const qualified	Data	80	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value buffer not const qualified	buffer	87	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value VFO not const qualified	VFO	91	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MMD not const qualified	MMD	106	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MMD not const qualified	MMD	116	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MMD not const qualified	MMD	126	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_buffer_ptr not const qualified	out_buffer_ptr	127	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_buffer_size not const qualified	out_buffer_size	128	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Data not const qualified	Data	142	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MMD not const qualified	MMD	149	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	buffer	87	22	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration clang_getBuildSessionTimestamp.	clang_getBuildSessionTimestamp	26	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration DEFINE_SIMPLE_CONVERSION_FUNCTIONS.	DEFINE_SIMPLE_CONVERSION_FUNCTIONS	30	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_VirtualFileOverlay_addFileMapping.	clang_VirtualFileOverlay_addFileMapping	38	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_VirtualFileOverlay_setCaseSensitivity.	clang_VirtualFileOverlay_setCaseSensitivity	61	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_VirtualFileOverlay_writeToBuffer.	clang_VirtualFileOverlay_writeToBuffer	70	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_free.	clang_free	87	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_VirtualFileOverlay_dispose.	clang_VirtualFileOverlay_dispose	91	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXModuleMapDescriptorImpl.	CXModuleMapDescriptorImpl	96	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ModuleMapDescriptor_create.	clang_ModuleMapDescriptor_create	101	22	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ModuleMapDescriptor_setFrameworkModuleName.	clang_ModuleMapDescriptor_setFrameworkModuleName	106	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ModuleMapDescriptor_setUmbrellaHeader.	clang_ModuleMapDescriptor_setUmbrellaHeader	116	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ModuleMapDescriptor_writeToBuffer.	clang_ModuleMapDescriptor_writeToBuffer	126	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ModuleMapDescriptor_dispose.	clang_ModuleMapDescriptor_dispose	149	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: BuildSystem.cpp.	BuildSystem.cpp	23	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: BuildSystem.cpp.	BuildSystem.cpp	24	22	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Function identifier OS used incorrectly	OS	78	21	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	80	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	134	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	135	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	136	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	137	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	138	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	139	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	140	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	142	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
    CIndex.cpp					
      Static Identifier 'translateSourceRange' reused	translateSourceRange	141	63	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Static Identifier 'getASTContext' reused	getASTContext	0	0	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Static Identifier 'getASTContext' reused	getASTContext	5768	53	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: Function "clang::cxindex::checkForMacroInMacroDefinition" (which has external linkage) defined multiple times.	checkForMacroInMacroDefinition	8786	9	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxindex::checkForMacroInMacroDefinition" (which has external linkage) defined multiple times.	checkForMacroInMacroDefinition	8827	9	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxindex::getMacroInfo" (which has external linkage) defined multiple times.	getMacroInfo	8752	20	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxindex::getMacroInfo" (which has external linkage) defined multiple times.	getMacroInfo	8774	26	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	8850	25	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	8864	25	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	8869	25	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	8876	25	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	8886	25	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	8914	25	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	8919	25	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Private Function "MarkMacroArgTokensVisitor::getTok" (which has external linkage) defined multiple times.	getTok	7347	11	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Private Const Function "MarkMacroArgTokensVisitor::getTok" (which has external linkage) defined multiple times.	getTok	7351	17	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Private Function "AnnotateTokensWorker::getTok" (which has external linkage) defined multiple times.	getTok	6839	11	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Private Const Function "AnnotateTokensWorker::getTok" (which has external linkage) defined multiple times.	getTok	6843	17	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "EnqueueVisitor::EnqueueChildren" (which has external linkage) defined multiple times.	EnqueueChildren	2111	21	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "EnqueueVisitor::EnqueueChildren" (which has external linkage) defined multiple times.	EnqueueChildren	2436	21	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxcursor::CursorVisitor::Visit" (which has external linkage) defined multiple times.	Visit	189	20	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxcursor::CursorVisitor::Visit" (which has external linkage) defined multiple times.	Visit	3172	20	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: union "[unnamed]" is invalid.	[unnamed]	3694	8	MISRA08_9-5-1	9-5-1 Unions shall not be used
      Violation: clang_createIndex defined but not called.	clang_createIndex	3250	8	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeIndex defined but not called.	clang_disposeIndex	3285	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXIndex_setGlobalOptions defined but not called.	clang_CXIndex_setGlobalOptions	3290	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXIndex_getGlobalOptions defined but not called.	clang_CXIndex_getGlobalOptions	3295	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXIndex_setInvocationEmissionPathOption defined but not called.	clang_CXIndex_setInvocationEmissionPathOption	3301	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_toggleCrashRecovery defined but not called.	clang_toggleCrashRecovery	3307	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_createTranslationUnit defined but not called.	clang_createTranslationUnit	3314	18	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_defaultEditingTranslationUnitOptions defined but not called.	clang_defaultEditingTranslationUnitOptions	3355	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_createTranslationUnitFromSourceFile defined but not called.	clang_createTranslationUnitFromSourceFile	3361	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getObjCEncoding defined but not called.	clang_Type_getObjCEncoding	3614	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isMacroFunctionLike defined but not called.	clang_Cursor_isMacroFunctionLike	3635	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isMacroBuiltin defined but not called.	clang_Cursor_isMacroBuiltin	3647	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isFunctionInlined defined but not called.	clang_Cursor_isFunctionInlined	3659	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EvalResult_dispose defined but not called.	clang_EvalResult_dispose	3709	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EvalResult_getKind defined but not called.	clang_EvalResult_getKind	3713	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EvalResult_getAsInt defined but not called.	clang_EvalResult_getAsInt	3720	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EvalResult_isUnsignedInt defined but not called.	clang_EvalResult_isUnsignedInt	3734	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EvalResult_getAsUnsigned defined but not called.	clang_EvalResult_getAsUnsigned	3738	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EvalResult_getAsDouble defined but not called.	clang_EvalResult_getAsDouble	3749	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EvalResult_getAsStr defined but not called.	clang_EvalResult_getAsStr	3756	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_Evaluate defined but not called.	clang_Cursor_Evaluate	3931	13	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_hasAttrs defined but not called.	clang_Cursor_hasAttrs	3941	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_defaultSaveOptions defined but not called.	clang_defaultSaveOptions	3953	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_saveTranslationUnit defined but not called.	clang_saveTranslationUnit	3968	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_suspendTranslationUnit defined but not called.	clang_suspendTranslationUnit	4035	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_defaultReparseOptions defined but not called.	clang_defaultReparseOptions	4049	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_reparseTranslationUnit defined but not called.	clang_reparseTranslationUnit	4095	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTranslationUnitCursor defined but not called.	clang_getTranslationUnitCursor	4135	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTranslationUnitTargetInfo defined but not called.	clang_getTranslationUnitTargetInfo	4145	13	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TargetInfo_getTriple defined but not called.	clang_TargetInfo_getTriple	4156	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TargetInfo_getPointerWidth defined but not called.	clang_TargetInfo_getPointerWidth	4170	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TargetInfo_dispose defined but not called.	clang_TargetInfo_dispose	4182	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getFileTime defined but not called.	clang_getFileTime	4201	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getFile defined but not called.	clang_getFile	4209	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getFileContents defined but not called.	clang_getFileContents	4221	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isFileMultipleIncludeGuarded defined but not called.	clang_isFileMultipleIncludeGuarded	4242	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getFileUniqueID defined but not called.	clang_getFileUniqueID	4258	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_File_isEqual defined but not called.	clang_File_isEqual	4270	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_File_tryGetRealPathName defined but not called.	clang_File_tryGetRealPathName	4282	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_visitChildrenWithBlock defined but not called.	clang_visitChildrenWithBlock	4407	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getSpellingNameRange defined but not called.	clang_Cursor_getSpellingNameRange	4610	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getMangling defined but not called.	clang_Cursor_getMangling	4705	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getCXXManglings defined but not called.	clang_Cursor_getCXXManglings	4719	13	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getObjCManglings defined but not called.	clang_Cursor_getObjCManglings	4733	13	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorPrintingPolicy defined but not called.	clang_getCursorPrintingPolicy	4747	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_PrintingPolicy_dispose defined but not called.	clang_PrintingPolicy_dispose	4753	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_PrintingPolicy_getProperty defined but not called.	clang_PrintingPolicy_getProperty	4759	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_PrintingPolicy_setProperty defined but not called.	clang_PrintingPolicy_setProperty	4824	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorPrettyPrinted defined but not called.	clang_getCursorPrettyPrinted	4915	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursor defined but not called.	clang_getCursor	5613	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_hashCursor defined but not called.	clang_hashCursor	5695	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isInvalidDeclaration defined but not called.	clang_isInvalidDeclaration	5713	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isUnexposed defined but not called.	clang_isUnexposed	5746	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCanonicalCursor defined but not called.	clang_getCanonicalCursor	6417	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getObjCSelectorIndex defined but not called.	clang_Cursor_getObjCSelectorIndex	6436	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getOverloadedDecl defined but not called.	clang_getOverloadedDecl	6459	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getDefinitionSpellingAndExtent defined but not called.	clang_getDefinitionSpellingAndExtent	6486	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_enableStackTraces defined but not called.	clang_enableStackTraces	6556	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_executeOnThread defined but not called.	clang_executeOnThread	6561	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTokenSpelling defined but not called.	clang_getTokenSpelling	6582	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTokenExtent defined but not called.	clang_getTokenExtent	6638	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getToken defined but not called.	clang_getToken	6724	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_tokenize defined but not called.	clang_tokenize	6760	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeTokens defined but not called.	clang_disposeTokens	6798	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_annotateTokens defined but not called.	clang_annotateTokens	7600	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorLinkage defined but not called.	clang_getCursorLinkage	7643	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorVisibility defined but not called.	clang_getCursorVisibility	7666	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorAvailability defined but not called.	clang_getCursorAvailability	7757	24	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorPlatformAvailability defined but not called.	clang_getCursorPlatformAvailability	7877	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeCXPlatformAvailability defined but not called.	clang_disposeCXPlatformAvailability	7922	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorLanguage defined but not called.	clang_getCursorLanguage	7927	15	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorTLSKind defined but not called.	clang_getCursorTLSKind	7934	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getStorageClass defined but not called.	clang_Cursor_getStorageClass	7969	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorSemanticParent defined but not called.	clang_getCursorSemanticParent	8000	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorLexicalParent defined but not called.	clang_getCursorLexicalParent	8020	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getIncludedFile defined but not called.	clang_getIncludedFile	8037	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getObjCPropertyAttributes defined but not called.	clang_Cursor_getObjCPropertyAttributes	8045	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getObjCPropertyGetterName defined but not called.	clang_Cursor_getObjCPropertyGetterName	8075	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getObjCPropertySetterName defined but not called.	clang_Cursor_getObjCPropertySetterName	8087	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getObjCDeclQualifiers defined but not called.	clang_Cursor_getObjCDeclQualifiers	8099	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isObjCOptional defined but not called.	clang_Cursor_isObjCOptional	8123	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isVariadic defined but not called.	clang_Cursor_isVariadic	8136	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isExternalSymbol defined but not called.	clang_Cursor_isExternalSymbol	8149	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getCommentRange defined but not called.	clang_Cursor_getCommentRange	8169	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getRawCommentText defined but not called.	clang_Cursor_getRawCommentText	8182	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getBriefCommentText defined but not called.	clang_Cursor_getBriefCommentText	8197	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getModule defined but not called.	clang_Cursor_getModule	8216	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getModuleForFile defined but not called.	clang_getModuleForFile	8226	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Module_getASTFile defined but not called.	clang_Module_getASTFile	8242	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Module_getParent defined but not called.	clang_Module_getParent	8249	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Module_getName defined but not called.	clang_Module_getName	8256	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Module_getFullName defined but not called.	clang_Module_getFullName	8263	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Module_isSystem defined but not called.	clang_Module_isSystem	8270	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Module_getNumTopLevelHeaders defined but not called.	clang_Module_getNumTopLevelHeaders	8277	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Module_getTopLevelHeader defined but not called.	clang_Module_getTopLevelHeader	8291	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXConstructor_isDefaultConstructor defined but not called.	clang_CXXConstructor_isDefaultConstructor	8313	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXConstructor_isCopyConstructor defined but not called.	clang_CXXConstructor_isCopyConstructor	8323	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXConstructor_isMoveConstructor defined but not called.	clang_CXXConstructor_isMoveConstructor	8333	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXConstructor_isConvertingConstructor defined but not called.	clang_CXXConstructor_isConvertingConstructor	8343	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXField_isMutable defined but not called.	clang_CXXField_isMutable	8354	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXMethod_isPureVirtual defined but not called.	clang_CXXMethod_isPureVirtual	8364	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXMethod_isConst defined but not called.	clang_CXXMethod_isConst	8374	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXMethod_isDefaulted defined but not called.	clang_CXXMethod_isDefaulted	8384	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXMethod_isStatic defined but not called.	clang_CXXMethod_isStatic	8394	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXMethod_isVirtual defined but not called.	clang_CXXMethod_isVirtual	8404	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXXRecord_isAbstract defined but not called.	clang_CXXRecord_isAbstract	8414	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_EnumDecl_isScoped defined but not called.	clang_EnumDecl_isScoped	8425	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getIBOutletCollectionType defined but not called.	clang_getIBOutletCollectionType	8438	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getSkippedRanges defined but not called.	clang_getSkippedRanges	8608	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getAllSkippedRanges defined but not called.	clang_getAllSkippedRanges	8650	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeSourceRangeList defined but not called.	clang_disposeSourceRangeList	8677	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getClangVersion defined but not called.	clang_getClangVersion	8846	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: SetSafetyThreadStackSize defined but not called.	SetSafetyThreadStackSize	8716	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getMacroInfo defined but not called.	getMacroInfo	8774	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: checkForMacroInMacroDefinition defined but not called.	checkForMacroInMacroDefinition	8786	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitBlockDecl defined but not called.	VisitBlockDecl	586	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTranslationUnitDecl defined but not called.	VisitTranslationUnitDecl	676	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypeAliasTemplateDecl defined but not called.	VisitTypeAliasTemplateDecl	680	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypeAliasDecl defined but not called.	VisitTypeAliasDecl	687	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypedefDecl defined but not called.	VisitTypedefDecl	694	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitClassTemplateSpecializationDecl defined but not called.	VisitClassTemplateSpecializationDecl	705	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitClassTemplatePartialSpecializationDecl defined but not called.	VisitClassTemplatePartialSpecializationDecl	737	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTemplateTypeParmDecl defined but not called.	VisitTemplateTypeParmDecl	754	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitEnumConstantDecl defined but not called.	VisitEnumConstantDecl	764	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFieldDecl defined but not called.	VisitFieldDecl	893	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitVarDecl defined but not called.	VisitVarDecl	906	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitNonTypeTemplateParmDecl defined but not called.	VisitNonTypeTemplateParmDecl	916	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFunctionTemplateDecl defined but not called.	VisitFunctionTemplateDecl	927	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitClassTemplateDecl defined but not called.	VisitClassTemplateDecl	937	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTemplateTemplateParmDecl defined but not called.	VisitTemplateTemplateParmDecl	947	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCTypeParamDecl defined but not called.	VisitObjCTypeParamDecl	958	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCMethodDecl defined but not called.	VisitObjCMethodDecl	970	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCCategoryDecl defined but not called.	VisitObjCCategoryDecl	1068	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCProtocolDecl defined but not called.	VisitObjCProtocolDecl	1085	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCPropertyDecl defined but not called.	VisitObjCPropertyDecl	1098	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCInterfaceDecl defined but not called.	VisitObjCInterfaceDecl	1149	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCCategoryImplDecl defined but not called.	VisitObjCCategoryImplDecl	1183	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCImplementationDecl defined but not called.	VisitObjCImplementationDecl	1192	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCPropertyImplDecl defined but not called.	VisitObjCPropertyImplDecl	1206	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitNamespaceDecl defined but not called.	VisitNamespaceDecl	1214	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitNamespaceAliasDecl defined but not called.	VisitNamespaceAliasDecl	1218	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUsingDecl defined but not called.	VisitUsingDecl	1228	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUsingDirectiveDecl defined but not called.	VisitUsingDirectiveDecl	1241	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUnresolvedUsingValueDecl defined but not called.	VisitUnresolvedUsingValueDecl	1251	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUnresolvedUsingTypenameDecl defined but not called.	VisitUnresolvedUsingTypenameDecl	1261	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitStaticAssertDecl defined but not called.	VisitStaticAssertDecl	1271	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFriendDecl defined but not called.	VisitFriendDecl	1280	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitNestedNameSpecifier defined but not called.	VisitNestedNameSpecifier	1317	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitLinkageSpecDecl defined but not called.	VisitLinkageSpecDecl	1497	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitQualifiedTypeLoc defined but not called.	VisitQualifiedTypeLoc	1501	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitBuiltinTypeLoc defined but not called.	VisitBuiltinTypeLoc	1505	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypedefTypeLoc defined but not called.	VisitTypedefTypeLoc	1557	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUnresolvedUsingTypeLoc defined but not called.	VisitUnresolvedUsingTypeLoc	1561	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTemplateTypeParmTypeLoc defined but not called.	VisitTemplateTypeParmTypeLoc	1572	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCInterfaceTypeLoc defined but not called.	VisitObjCInterfaceTypeLoc	1576	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCTypeParamTypeLoc defined but not called.	VisitObjCTypeParamTypeLoc	1580	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCObjectTypeLoc defined but not called.	VisitObjCObjectTypeLoc	1592	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCObjectPointerTypeLoc defined but not called.	VisitObjCObjectPointerTypeLoc	1610	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitParenTypeLoc defined but not called.	VisitParenTypeLoc	1614	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitPointerTypeLoc defined but not called.	VisitPointerTypeLoc	1618	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitBlockPointerTypeLoc defined but not called.	VisitBlockPointerTypeLoc	1622	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitMemberPointerTypeLoc defined but not called.	VisitMemberPointerTypeLoc	1626	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitLValueReferenceTypeLoc defined but not called.	VisitLValueReferenceTypeLoc	1630	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitRValueReferenceTypeLoc defined but not called.	VisitRValueReferenceTypeLoc	1634	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitAttributedTypeLoc defined but not called.	VisitAttributedTypeLoc	1638	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDecayedTypeLoc defined but not called.	VisitDecayedTypeLoc	1665	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitAdjustedTypeLoc defined but not called.	VisitAdjustedTypeLoc	1669	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDeducedTemplateSpecializationTypeLoc defined but not called.	VisitDeducedTemplateSpecializationTypeLoc	1673	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTemplateSpecializationTypeLoc defined but not called.	VisitTemplateSpecializationTypeLoc	1682	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypeOfExprTypeLoc defined but not called.	VisitTypeOfExprTypeLoc	1697	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypeOfTypeLoc defined but not called.	VisitTypeOfTypeLoc	1701	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUnaryTransformTypeLoc defined but not called.	VisitUnaryTransformTypeLoc	1708	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDependentNameTypeLoc defined but not called.	VisitDependentNameTypeLoc	1715	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDependentTemplateSpecializationTypeLoc defined but not called.	VisitDependentTemplateSpecializationTypeLoc	1719	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitElaboratedTypeLoc defined but not called.	VisitElaboratedTypeLoc	1734	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitPackExpansionTypeLoc defined but not called.	VisitPackExpansionTypeLoc	1741	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDecltypeTypeLoc defined but not called.	VisitDecltypeTypeLoc	1745	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitInjectedClassNameTypeLoc defined but not called.	VisitInjectedClassNameTypeLoc	1752	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitAtomicTypeLoc defined but not called.	VisitAtomicTypeLoc	1756	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitPipeTypeLoc defined but not called.	VisitPipeTypeLoc	1760	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitComplexTypeLoc defined but not called.	VisitComplexTypeLoc	1769	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitConstantArrayTypeLoc defined but not called.	VisitConstantArrayTypeLoc	1770	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitIncompleteArrayTypeLoc defined but not called.	VisitIncompleteArrayTypeLoc	1771	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitVariableArrayTypeLoc defined but not called.	VisitVariableArrayTypeLoc	1772	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDependentSizedArrayTypeLoc defined but not called.	VisitDependentSizedArrayTypeLoc	1773	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDependentAddressSpaceTypeLoc defined but not called.	VisitDependentAddressSpaceTypeLoc	1774	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDependentVectorTypeLoc defined but not called.	VisitDependentVectorTypeLoc	1775	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDependentSizedExtVectorTypeLoc defined but not called.	VisitDependentSizedExtVectorTypeLoc	1776	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitVectorTypeLoc defined but not called.	VisitVectorTypeLoc	1777	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitExtVectorTypeLoc defined but not called.	VisitExtVectorTypeLoc	1778	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFunctionProtoTypeLoc defined but not called.	VisitFunctionProtoTypeLoc	1779	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFunctionNoProtoTypeLoc defined but not called.	VisitFunctionNoProtoTypeLoc	1780	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitRecordTypeLoc defined but not called.	VisitRecordTypeLoc	1781	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitEnumTypeLoc defined but not called.	VisitEnumTypeLoc	1782	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitSubstTemplateTypeParmTypeLoc defined but not called.	VisitSubstTemplateTypeParmTypeLoc	1783	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitSubstTemplateTypeParmPackTypeLoc defined but not called.	VisitSubstTemplateTypeParmPackTypeLoc	1784	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitAutoTypeLoc defined but not called.	VisitAutoTypeLoc	1785	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: Visit defined but not called.	Visit	3172	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1827	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1827	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1828	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1828	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1829	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1829	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1830	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1830	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1831	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1831	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1832	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1832	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1833	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1833	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1842	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: begin defined but not called.	begin	1845	29	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: end defined but not called.	end	1848	29	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1857	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1860	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: isFirst defined but not called.	isFirst	1861	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1869	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1873	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1885	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1888	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getLoc defined but not called.	getLoc	1891	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1902	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1918	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: get defined but not called.	get	1921	22	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	1942	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXDefaultArgExpr defined but not called.	VisitCXXDefaultArgExpr	1964	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AddDeclarationNameInfo defined but not called.	AddDeclarationNameInfo	2079	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AddNestedNameSpecifierLoc defined but not called.	AddNestedNameSpecifierLoc	2086	16	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AddStmt defined but not called.	AddStmt	2091	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AddDecl defined but not called.	AddDecl	2095	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AddExplicitTemplateArgs defined but not called.	AddExplicitTemplateArgs	2099	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AddMemberRef defined but not called.	AddMemberRef	2103	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AddTypeLoc defined but not called.	AddTypeLoc	2107	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: EnqueueChildren defined but not called.	EnqueueChildren	2111	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: EnqueueChildren defined but not called.	EnqueueChildren	2436	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitAddrLabelExpr defined but not called.	VisitAddrLabelExpr	2447	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitBlockExpr defined but not called.	VisitBlockExpr	2450	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCompoundLiteralExpr defined but not called.	VisitCompoundLiteralExpr	2453	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCompoundStmt defined but not called.	VisitCompoundStmt	2457	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitMSDependentExistsStmt defined but not called.	VisitMSDependentExistsStmt	2462	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXDependentScopeMemberExpr defined but not called.	VisitCXXDependentScopeMemberExpr	2470	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXNewExpr defined but not called.	VisitCXXNewExpr	2479	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXOperatorCallExpr defined but not called.	VisitCXXOperatorCallExpr	2490	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXPseudoDestructorExpr defined but not called.	VisitCXXPseudoDestructorExpr	2496	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXScalarValueInitExpr defined but not called.	VisitCXXScalarValueInitExpr	2509	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXTemporaryObjectExpr defined but not called.	VisitCXXTemporaryObjectExpr	2513	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXTypeidExpr defined but not called.	VisitCXXTypeidExpr	2518	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXUnresolvedConstructExpr defined but not called.	VisitCXXUnresolvedConstructExpr	2524	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXUuidofExpr defined but not called.	VisitCXXUuidofExpr	2529	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXCatchStmt defined but not called.	VisitCXXCatchStmt	2535	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitCXXForRangeStmt defined but not called.	VisitCXXForRangeStmt	2540	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDeclRefExpr defined but not called.	VisitDeclRefExpr	2546	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDependentScopeDeclRefExpr defined but not called.	VisitDependentScopeDeclRefExpr	2551	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDeclStmt defined but not called.	VisitDeclStmt	2558	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitDesignatedInitExpr defined but not called.	VisitDesignatedInitExpr	2572	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitExplicitCastExpr defined but not called.	VisitExplicitCastExpr	2590	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitForStmt defined but not called.	VisitForStmt	2594	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitGotoStmt defined but not called.	VisitGotoStmt	2601	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitIfStmt defined but not called.	VisitIfStmt	2604	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitInitListExpr defined but not called.	VisitInitListExpr	2610	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitMemberExpr defined but not called.	VisitMemberExpr	2616	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCEncodeExpr defined but not called.	VisitObjCEncodeExpr	2639	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCMessageExpr defined but not called.	VisitObjCMessageExpr	2642	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOffsetOfExpr defined but not called.	VisitOffsetOfExpr	2646	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOverloadExpr defined but not called.	VisitOverloadExpr	2665	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUnaryExprOrTypeTraitExpr defined but not called.	VisitUnaryExprOrTypeTraitExpr	2670	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitStmt defined but not called.	VisitStmt	2676	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitSwitchStmt defined but not called.	VisitSwitchStmt	2679	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitWhileStmt defined but not called.	VisitWhileStmt	2685	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypeTraitExpr defined but not called.	VisitTypeTraitExpr	2691	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitArrayTypeTraitExpr defined but not called.	VisitArrayTypeTraitExpr	2696	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitExpressionTraitExpr defined but not called.	VisitExpressionTraitExpr	2700	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUnresolvedMemberExpr defined but not called.	VisitUnresolvedMemberExpr	2704	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitVAArgExpr defined but not called.	VisitVAArgExpr	2709	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitSizeOfPackExpr defined but not called.	VisitSizeOfPackExpr	2713	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOpaqueValueExpr defined but not called.	VisitOpaqueValueExpr	2716	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitLambdaExpr defined but not called.	VisitLambdaExpr	2722	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitPseudoObjectExpr defined but not called.	VisitPseudoObjectExpr	2726	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPExecutableDirective defined but not called.	VisitOMPExecutableDirective	2731	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPLoopDirective defined but not called.	VisitOMPLoopDirective	2740	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPParallelDirective defined but not called.	VisitOMPParallelDirective	2744	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSimdDirective defined but not called.	VisitOMPSimdDirective	2748	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPForDirective defined but not called.	VisitOMPForDirective	2752	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPForSimdDirective defined but not called.	VisitOMPForSimdDirective	2756	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSectionsDirective defined but not called.	VisitOMPSectionsDirective	2760	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSectionDirective defined but not called.	VisitOMPSectionDirective	2764	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSingleDirective defined but not called.	VisitOMPSingleDirective	2768	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPMasterDirective defined but not called.	VisitOMPMasterDirective	2772	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPCriticalDirective defined but not called.	VisitOMPCriticalDirective	2776	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPParallelForDirective defined but not called.	VisitOMPParallelForDirective	2782	16	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPParallelForSimdDirective defined but not called.	VisitOMPParallelForSimdDirective	2786	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPParallelSectionsDirective defined but not called.	VisitOMPParallelSectionsDirective	2791	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTaskDirective defined but not called.	VisitOMPTaskDirective	2796	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTaskyieldDirective defined but not called.	VisitOMPTaskyieldDirective	2801	16	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPBarrierDirective defined but not called.	VisitOMPBarrierDirective	2805	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTaskwaitDirective defined but not called.	VisitOMPTaskwaitDirective	2809	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTaskgroupDirective defined but not called.	VisitOMPTaskgroupDirective	2813	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPFlushDirective defined but not called.	VisitOMPFlushDirective	2820	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPOrderedDirective defined but not called.	VisitOMPOrderedDirective	2824	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPAtomicDirective defined but not called.	VisitOMPAtomicDirective	2828	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetDirective defined but not called.	VisitOMPTargetDirective	2832	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetDataDirective defined but not called.	VisitOMPTargetDataDirective	2836	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetEnterDataDirective defined but not called.	VisitOMPTargetEnterDataDirective	2841	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetExitDataDirective defined but not called.	VisitOMPTargetExitDataDirective	2846	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetParallelDirective defined but not called.	VisitOMPTargetParallelDirective	2851	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetParallelForDirective defined but not called.	VisitOMPTargetParallelForDirective	2856	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTeamsDirective defined but not called.	VisitOMPTeamsDirective	2861	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPCancellationPointDirective defined but not called.	VisitOMPCancellationPointDirective	2865	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPCancelDirective defined but not called.	VisitOMPCancelDirective	2870	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTaskLoopDirective defined but not called.	VisitOMPTaskLoopDirective	2874	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTaskLoopSimdDirective defined but not called.	VisitOMPTaskLoopSimdDirective	2878	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDistributeDirective defined but not called.	VisitOMPDistributeDirective	2883	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDistributeParallelForDirective defined but not called.	VisitOMPDistributeParallelForDirective	2888	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDistributeParallelForSimdDirective defined but not called.	VisitOMPDistributeParallelForSimdDirective	2893	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDistributeSimdDirective defined but not called.	VisitOMPDistributeSimdDirective	2898	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetParallelForSimdDirective defined but not called.	VisitOMPTargetParallelForSimdDirective	2903	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetSimdDirective defined but not called.	VisitOMPTargetSimdDirective	2908	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTeamsDistributeDirective defined but not called.	VisitOMPTeamsDistributeDirective	2913	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTeamsDistributeSimdDirective defined but not called.	VisitOMPTeamsDistributeSimdDirective	2918	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTeamsDistributeParallelForSimdDirective defined but not called.	VisitOMPTeamsDistributeParallelForSimdDirective	2923	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTeamsDistributeParallelForDirective defined but not called.	VisitOMPTeamsDistributeParallelForDirective	2928	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetTeamsDirective defined but not called.	VisitOMPTargetTeamsDirective	2933	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetTeamsDistributeDirective defined but not called.	VisitOMPTargetTeamsDistributeDirective	2938	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetTeamsDistributeParallelForDirective defined but not called.	VisitOMPTargetTeamsDistributeParallelForDirective	2943	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetTeamsDistributeParallelForSimdDirective defined but not called.	VisitOMPTargetTeamsDistributeParallelForSimdDirective	2948	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTargetTeamsDistributeSimdDirective defined but not called.	VisitOMPTargetTeamsDistributeSimdDirective	2953	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPIfClause defined but not called.	VisitOMPIfClause	2149	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPFinalClause defined but not called.	VisitOMPFinalClause	2154	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPNumThreadsClause defined but not called.	VisitOMPNumThreadsClause	2158	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSafelenClause defined but not called.	VisitOMPSafelenClause	2163	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSimdlenClause defined but not called.	VisitOMPSimdlenClause	2167	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPAllocatorClause defined but not called.	VisitOMPAllocatorClause	2171	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPCollapseClause defined but not called.	VisitOMPCollapseClause	2175	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDefaultClause defined but not called.	VisitOMPDefaultClause	2179	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPProcBindClause defined but not called.	VisitOMPProcBindClause	2181	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPScheduleClause defined but not called.	VisitOMPScheduleClause	2183	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPOrderedClause defined but not called.	VisitOMPOrderedClause	2188	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPNowaitClause defined but not called.	VisitOMPNowaitClause	2192	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPUntiedClause defined but not called.	VisitOMPUntiedClause	2194	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPMergeableClause defined but not called.	VisitOMPMergeableClause	2196	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPReadClause defined but not called.	VisitOMPReadClause	2198	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPWriteClause defined but not called.	VisitOMPWriteClause	2200	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPUpdateClause defined but not called.	VisitOMPUpdateClause	2202	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPCaptureClause defined but not called.	VisitOMPCaptureClause	2204	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSeqCstClause defined but not called.	VisitOMPSeqCstClause	2206	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPThreadsClause defined but not called.	VisitOMPThreadsClause	2208	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSIMDClause defined but not called.	VisitOMPSIMDClause	2210	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPNogroupClause defined but not called.	VisitOMPNogroupClause	2212	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPUnifiedAddressClause defined but not called.	VisitOMPUnifiedAddressClause	2214	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPUnifiedSharedMemoryClause defined but not called.	VisitOMPUnifiedSharedMemoryClause	2217	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPReverseOffloadClause defined but not called.	VisitOMPReverseOffloadClause	2220	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDynamicAllocatorsClause defined but not called.	VisitOMPDynamicAllocatorsClause	2223	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPAtomicDefaultMemOrderClause defined but not called.	VisitOMPAtomicDefaultMemOrderClause	2226	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDeviceClause defined but not called.	VisitOMPDeviceClause	2229	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPNumTeamsClause defined but not called.	VisitOMPNumTeamsClause	2233	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPThreadLimitClause defined but not called.	VisitOMPThreadLimitClause	2238	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPPriorityClause defined but not called.	VisitOMPPriorityClause	2243	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPGrainsizeClause defined but not called.	VisitOMPGrainsizeClause	2247	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPNumTasksClause defined but not called.	VisitOMPNumTasksClause	2251	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPHintClause defined but not called.	VisitOMPHintClause	2255	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPAllocateClause defined but not called.	VisitOMPAllocateClause	2266	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPPrivateClause defined but not called.	VisitOMPPrivateClause	2270	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPFirstprivateClause defined but not called.	VisitOMPFirstprivateClause	2276	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPLastprivateClause defined but not called.	VisitOMPLastprivateClause	2287	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPSharedClause defined but not called.	VisitOMPSharedClause	2304	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPReductionClause defined but not called.	VisitOMPReductionClause	2307	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPTaskReductionClause defined but not called.	VisitOMPTaskReductionClause	2323	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPInReductionClause defined but not called.	VisitOMPInReductionClause	2340	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPLinearClause defined but not called.	VisitOMPLinearClause	2359	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPAlignedClause defined but not called.	VisitOMPAlignedClause	2377	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPCopyinClause defined but not called.	VisitOMPCopyinClause	2381	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPCopyprivateClause defined but not called.	VisitOMPCopyprivateClause	2394	18	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPFlushClause defined but not called.	VisitOMPFlushClause	2406	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDependClause defined but not called.	VisitOMPDependClause	2409	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPMapClause defined but not called.	VisitOMPMapClause	2412	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDistScheduleClause defined but not called.	VisitOMPDistScheduleClause	2415	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPDefaultmapClause defined but not called.	VisitOMPDefaultmapClause	2420	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPToClause defined but not called.	VisitOMPToClause	2422	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPFromClause defined but not called.	VisitOMPFromClause	2425	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPUseDevicePtrClause defined but not called.	VisitOMPUseDevicePtrClause	2428	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitOMPIsDevicePtrClause defined but not called.	VisitOMPIsDevicePtrClause	2431	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: RegisterFatalErrorHandler defined but not called.	RegisterFatalErrorHandler	3242	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	8850	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	8864	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	8869	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	8876	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	8886	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	8914	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	8919	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getTok defined but not called.	getTok	6843	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitChildren defined but not called.	VisitChildren	6879	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AnnotateTokens defined but not called.	AnnotateTokens	6902	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: IsIgnoredChildCursor defined but not called.	IsIgnoredChildCursor	6908	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: DetermineChildActions defined but not called.	DetermineChildActions	6937	22	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: annotateAndAdvanceTokens defined but not called.	annotateAndAdvanceTokens	6982	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: annotateAndAdvanceFunctionMacroTokens defined but not called.	annotateAndAdvanceFunctionMacroTokens	7003	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: Visit defined but not called.	Visit	7041	22	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: postVisitChildren defined but not called.	postVisitChildren	7202	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: HandlePostPonedChildCursors defined but not called.	HandlePostPonedChildCursors	7237	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: HandlePostPonedChildCursor defined but not called.	HandlePostPonedChildCursor	7247	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getTok defined but not called.	getTok	7351	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter user_data in Non Virtual Functions	user_data	3232	38	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter gen_crash_diag in Non Virtual Functions	gen_crash_diag	3233	37	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter CIdx in Non Virtual Functions	CIdx	3562	12	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	3953	52	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter options in Non Virtual Functions	options	3959	59	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	4049	55	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter unsaved_files in Non Virtual Functions	unsaved_files	4055	58	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter options in Non Virtual Functions	options	4056	43	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter options in Non Virtual Functions	options	4098	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter options in Non Virtual Functions	options	4612	57	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter parent in Non Virtual Functions	parent	5514	57	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	6798	43	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter NumTokens in Non Virtual Functions	NumTokens	6799	51	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter availability_size in Non Virtual Functions	availability_size	7882	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter reserved in Non Virtual Functions	reserved	8045	69	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter k in Non Virtual Functions	k	8455	73	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter amount in Non Virtual Functions	amount	8456	60	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter D in Non Virtual Functions	D	676	66	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter E in Non Virtual Functions	E	1964	55	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter S in Non Virtual Functions	S	2111	49	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter S in Non Virtual Functions	S	2457	59	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter S in Non Virtual Functions	S	2558	51	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter C in Non Virtual Functions	C	2179	69	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter C in Non Virtual Functions	C	2181	71	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2192	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2194	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2196	47	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2198	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2200	43	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2202	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2204	45	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2206	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2208	45	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2210	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2212	45	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2215	4	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2218	4	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2221	4	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2224	4	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2227	4	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter [unnamed] in Non Virtual Functions	[unnamed]	2421	4	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter parent in Non Virtual Functions	parent	7315	53	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Variable	It	7835	7	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	unique_ptr	3426	7	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	unique_ptr	3439	7	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	unique_ptr	4074	7	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	SetParent	496	16	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	SetParent	2977	18	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	InvocationReporter	3490	29	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	floatStr	3796	16	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	isa	4392	14	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	flags	4393	12	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	reserved	4394	12	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	invoke	4395	33	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	cursor	6825	13	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	action	6826	46	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Non-volitile POD variable P has only one use.	P	975	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable typeParam has only one use.	typeParam	1140	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable I has only one use.	I	2261	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2272	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2280	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2283	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2291	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2294	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2297	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2300	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2310	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2313	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2316	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2319	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2327	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2330	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2333	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2336	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2344	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2347	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2350	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2353	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2356	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2362	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2365	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2368	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2371	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2383	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2386	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2389	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2396	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2399	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable E has only one use.	E	2402	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable D has only one use.	D	2561	19	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable Arg has only one use.	Arg	3523	21	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable ignored has only one use.	ignored	3798	9	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable bodyIterator has only one use.	bodyIterator	3924	13	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable P has only one use.	P	7064	27	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Unused Type declaration RegisterFatalErrorHandler	RegisterFatalErrorHandler	3241	7	MISRA08_0-1-5	0-1-5 A project shall not contain unused type declarations
      Discarded Return Values	VisitChildren	545	8	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	clang_saveTranslationUnit	3990	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	clang_disposeTranslationUnit	4026	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	clang_TargetInfo_getTriple	4161	2	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	clang_TargetInfo_getPointerWidth	4175	2	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	getCursor	5922	14	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	clang_getDefinitionSpellingAndExtent	6493	2	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitChildren	6879	47	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	AnnotateTokens	6905	14	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	annotateAndAdvanceFunctionMacroTokens	7007	2	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	annotateAndAdvanceFunctionMacroTokens	7008	2	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	setFunctionMacroTokenLoc	7363	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	clang_annotateTokensImpl	7530	19	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Constructor with Single Argument is not explicit	OMPClauseEnqueue	2130	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Template, template member function or template member not instantiated: Node	Node	2260	45	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: Node	Node	2260	45	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      #include statement preceded by code other than preprocesser directives or comments	CIndex.cpp	1518	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      #include statement preceded by code other than preprocesser directives or comments	CIndex.cpp	1521	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      #include statement preceded by code other than preprocesser directives or comments	CIndex.cpp	1532	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      #include statement preceded by code other than preprocesser directives or comments	CIndex.cpp	2133	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      Macro IMAGE_TYPE is defined within a block	IMAGE_TYPE	1516	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro EXT_OPAQUE_TYPE is defined within a block	EXT_OPAQUE_TYPE	1519	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro BUILTIN_TYPE is defined within a block	BUILTIN_TYPE	1527	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro SIGNED_TYPE is defined within a block	SIGNED_TYPE	1528	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro UNSIGNED_TYPE is defined within a block	UNSIGNED_TYPE	1529	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro FLOATING_TYPE is defined within a block	FLOATING_TYPE	1530	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro PLACEHOLDER_TYPE is defined within a block	PLACEHOLDER_TYPE	1531	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro VisitorJob is defined within a block	VisitorJob	1819	20	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro OPENMP_CLAUSE is defined within a block	OPENMP_CLAUSE	2131	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro SET_CXOBJCPROP_ATTR is defined within a block	SET_CXOBJCPROP_ATTR	8054	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro SET_CXOBJCPROP_ATTR is undefined within a block	SET_CXOBJCPROP_ATTR	8070	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      #undef used	DEF_JOB	1834	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      #undef used	SET_CXOBJCPROP_ATTR	8070	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      Function like Macro defined in file CIndex.cpp	DEFAULT_TYPELOC_IMPL	1764	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	__has_feature	4376	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	IMAGE_TYPE	1516	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	EXT_OPAQUE_TYPE	1519	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	BUILTIN_TYPE	1527	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	SIGNED_TYPE	1528	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	UNSIGNED_TYPE	1529	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	FLOATING_TYPE	1530	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	PLACEHOLDER_TYPE	1531	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	OPENMP_CLAUSE	2131	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CIndex.cpp	SET_CXOBJCPROP_ATTR	8054	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro arguments not enclosed in parentheses in file CIndex.cpp	IMAGE_TYPE	1516	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Function like Macro arguments not enclosed in parentheses in file CIndex.cpp	EXT_OPAQUE_TYPE	1519	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Function like Macro arguments not enclosed in parentheses in file CIndex.cpp	SIGNED_TYPE	1528	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Function like Macro arguments not enclosed in parentheses in file CIndex.cpp	UNSIGNED_TYPE	1529	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Function like Macro arguments not enclosed in parentheses in file CIndex.cpp	FLOATING_TYPE	1530	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Function like Macro arguments not enclosed in parentheses in file CIndex.cpp	PLACEHOLDER_TYPE	1531	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Undefined macro identifier LLVM_ENABLE_THREADS used incorrectly	LLVM_ENABLE_THREADS	57	4	MISRA08_16-0-7	16-0-7 Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator
      Pre-processor used for something other than file inclusion or include guards	DEFAULT_TYPELOC_IMPL	1764	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	__has_feature	4376	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	IMAGE_TYPE	1516	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	EXT_OPAQUE_TYPE	1519	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	BUILTIN_TYPE	1527	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	SIGNED_TYPE	1528	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	UNSIGNED_TYPE	1529	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	FLOATING_TYPE	1530	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	PLACEHOLDER_TYPE	1531	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	OPENMP_CLAUSE	2131	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	SET_CXOBJCPROP_ATTR	8054	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		1834	14	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		8070	26	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1517	23	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1520	23	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1527	37	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1528	58	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1529	60	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1530	60	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1531	63	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1767	1	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		1825	2	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		2132	36	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CIndex.cpp		8056	36	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      More than one # or ## operator used a single macro in file CIndex.cpp	DEFAULT_TYPELOC_IMPL	1764	0	MISRA08_16-3-1	16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition
      More than one # or ## operator used a single macro in file CIndex.cpp	SET_CXOBJCPROP_ATTR	8054	0	MISRA08_16-3-1	16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition
      A # or ## operator used in a macro in file CIndex.cpp	DEFAULT_TYPELOC_IMPL	1764	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      A # or ## operator used in a macro in file CIndex.cpp	OPENMP_CLAUSE	2131	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      A # or ## operator used in a macro in file CIndex.cpp	SET_CXOBJCPROP_ATTR	8054	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      Name for a standard library macro or object is reused in file CIndex.cpp	__has_feature	4376	0	MISRA08_17-0-2	17-0-2 The names of standard library macros and objects shall not be reused
      Violation: File contains invalid dynamic memory statement.	free	6800	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		75	24	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		78	18	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3180	9	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3268	20	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3287	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3342	42	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3416	46	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3427	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3440	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3704	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3710	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3824	35	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3845	33	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3864	37	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3889	37	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		3902	35	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4026	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4027	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4028	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4030	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4031	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4064	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4075	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4151	27	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4186	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4750	9	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		4755	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8518	43	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8605	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8609	31	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8643	20	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8651	31	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8670	20	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8679	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		8680	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to TU	tu	3615	20	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to TU	tu	6081	20	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ASTUnit	astUnit	8517	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ASTUnit	astUnit	8621	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ASTUnit	astUnit	8660	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SM	sm	8627	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Range	range	6984	59	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Range	range	7006	59	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CursorRange	cursorRange	7042	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CursorRange	cursorRange	7213	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to end	End	6004	19	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to begin	Begin	6738	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to end	End	6745	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to GetTokenLoc	getTokenLoc	7356	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to TokLoc	tokLoc	7333	21	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to IsTokenRange	isTokenRange	147	24	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Range	range	8886	50	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to parent	Parent	1955	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	4399	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	5513	57	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	6436	47	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	6459	42	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	6825	13	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursors	cursors	6865	50	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	6908	57	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7041	37	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7202	54	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7287	62	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7293	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7315	36	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7370	43	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7643	46	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7666	52	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7757	61	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7877	49	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7927	48	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	7934	42	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	8000	48	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	8020	47	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	8037	38	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	8869	45	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Visit	visit	7315	21	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to PPRec	ppRec	8622	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to PPRec	ppRec	8661	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to FID	fid	4229	9	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to begin	Begin	260	4	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to end	End	261	4	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Empty	empty	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to first	First	446	60	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to D	d	1827	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Expr	expr	3763	48	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to TI	tl	1865	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to begin	Begin	1838	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to end	End	1839	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	772	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	808	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Ctx	ctx	3765	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ASTContext	astContext	8519	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to D	d	1828	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to D	d	1829	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to D	d	1830	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to D	d	1831	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to D	d	1832	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to D	d	1833	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Size	size	2112	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Size	size	2437	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Size	size	2559	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Stmt	stmt	3008	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Result	result	3184	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to kind	Kind	3198	34	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Result	result	3575	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Result	result	4106	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to options	Options	3367	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	3568	13	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	3588	13	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	3595	18	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Arg	arg	3674	8	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SubExpr	subExpr	3677	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Result	result	3775	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Val	val	3782	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to APFloat	apFloat	3799	18	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SubExpr	subExpr	3808	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Result	result	3984	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Impl	impl	4151	20	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	4221	63	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	4243	51	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	4258	33	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	8608	71	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to FileEntry	fileEntry	8628	13	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Filename	file_name	4209	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Size	size	4222	42	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Visitor	visitor	4368	45	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClientData	client_data	4369	42	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClientData	client_data	4400	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClientData	client_data	5515	61	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClientData	client_data	7289	66	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClientData	client_data	7294	59	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClientData	client_data	7371	47	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Block	block	4401	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Block	block	4408	59	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to buf	Buf	4546	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to os	OS	4547	32	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to os	OS	4925	30	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to os	OS	4950	30	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to os	OS	4972	30	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to os	OS	5008	30	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Size	size	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to kind	Kind	5018	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to data	Data	5516	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to index	Index	5696	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to pieceIndex	PieceIndex	6508	57	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Tokens	tokens	6865	32	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Tokens	tokens	7312	37	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to HasContextSensitiveKeywords	hasContextSensitiveKeywords	6892	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Action	action	6826	46	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Action	action	6914	20	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to kind	Kind	6928	33	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Attr	attr	8157	12	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to index	Index	8292	63	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to K	k	8455	73	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to K	k	8457	35	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Str	str	8462	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to PP	pp	8581	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to usage	Usage	8685	20	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	8634	48	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	8644	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	8671	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to fn	Fn	8703	75	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to diag	Diag	8738	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to os	OS	8931	15	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "Visitor" possibly hiding outer definition from line 2125	Visitor	2130	35	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Def" possibly hiding outer definition from line 6281	Def	6290	24	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Def" possibly hiding outer definition from line 6281	Def	6301	23	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Def" possibly hiding outer definition from line 6281	Def	6307	24	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Def" possibly hiding outer definition from line 6281	Def	6322	17	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Def" possibly hiding outer definition from line 6281	Def	6349	28	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Def" possibly hiding outer definition from line 6364	Def	6376	35	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Impl" possibly hiding outer definition from line 6358	Impl	6378	39	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "VisitChildren" possibly hiding outer definition from line 487	VisitChildren	6879	7	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SM" possibly hiding outer definition from line 7305	SM	7311	43	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Comment appears to contain code in or near cursor	cursor	5537		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      Comment appears to contain code in or near getBegin	getBegin	5556		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      Comment appears to contain code in or near NextIdx	NextIdx	7419		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      Function reprocess declared at block scope	reprocess	7428	2	MISRA08_3-1-2	3-1-2 Functions shall not be declared at block scope
      An object or function, buildPieces, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	buildPieces	3191	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_createIndex, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_createIndex	3250	8	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeIndex, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeIndex	3285	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXIndex_setGlobalOptions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXIndex_setGlobalOptions	3290	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXIndex_getGlobalOptions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXIndex_getGlobalOptions	3295	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXIndex_setInvocationEmissionPathOption, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXIndex_setInvocationEmissionPathOption	3301	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_toggleCrashRecovery, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_toggleCrashRecovery	3307	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_createTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_createTranslationUnit	3314	18	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_createTranslationUnit2, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_createTranslationUnit2	3325	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_defaultEditingTranslationUnitOptions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_defaultEditingTranslationUnitOptions	3355	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_createTranslationUnitFromSourceFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_createTranslationUnitFromSourceFile	3361	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_parseTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_parseTranslationUnit	3531	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_parseTranslationUnit2, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_parseTranslationUnit2	3548	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_parseTranslationUnit2FullArgv, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_parseTranslationUnit2FullArgv	3561	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getObjCEncoding, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getObjCEncoding	3614	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isMacroFunctionLike, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isMacroFunctionLike	3635	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isMacroBuiltin, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isMacroBuiltin	3647	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isFunctionInlined, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isFunctionInlined	3659	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_dispose	3709	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_getKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_getKind	3713	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_getAsInt, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_getAsInt	3720	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_getAsLongLong, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_getAsLongLong	3724	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_isUnsignedInt, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_isUnsignedInt	3734	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_getAsUnsigned, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_getAsUnsigned	3738	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_getAsDouble, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_getAsDouble	3749	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EvalResult_getAsStr, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EvalResult_getAsStr	3756	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_Evaluate, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_Evaluate	3931	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_hasAttrs, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_hasAttrs	3941	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_defaultSaveOptions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_defaultSaveOptions	3953	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_saveTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_saveTranslationUnit	3968	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeTranslationUnit	4018	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_suspendTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_suspendTranslationUnit	4035	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_defaultReparseOptions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_defaultReparseOptions	4049	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_reparseTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_reparseTranslationUnit	4095	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTranslationUnitSpelling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTranslationUnitSpelling	4125	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTranslationUnitCursor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTranslationUnitCursor	4135	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTranslationUnitTargetInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTranslationUnitTargetInfo	4145	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TargetInfo_getTriple, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TargetInfo_getTriple	4156	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TargetInfo_getPointerWidth, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TargetInfo_getPointerWidth	4170	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TargetInfo_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TargetInfo_dispose	4182	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFileName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFileName	4193	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFileTime, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFileTime	4201	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFile	4209	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFileContents, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFileContents	4221	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isFileMultipleIncludeGuarded, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isFileMultipleIncludeGuarded	4242	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFileUniqueID, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFileUniqueID	4258	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_File_isEqual, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_File_isEqual	4270	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_File_tryGetRealPathName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_File_tryGetRealPathName	4282	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_visitChildren, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_visitChildren	4367	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_visitChildrenWithBlock, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_visitChildrenWithBlock	4407	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorSpelling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorSpelling	4449	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getSpellingNameRange, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getSpellingNameRange	4610	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getMangling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getMangling	4705	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getCXXManglings, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getCXXManglings	4719	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getObjCManglings, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getObjCManglings	4733	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorPrintingPolicy, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorPrintingPolicy	4747	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_PrintingPolicy_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_PrintingPolicy_dispose	4753	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_PrintingPolicy_getProperty, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_PrintingPolicy_getProperty	4759	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_PrintingPolicy_setProperty, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_PrintingPolicy_setProperty	4824	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorPrettyPrinted, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorPrettyPrinted	4915	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorDisplayName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorDisplayName	4936	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorKindSpelling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorKindSpelling	5018	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursor	5613	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getNullCursor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNullCursor	5675	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_equalCursors, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_equalCursors	5679	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_hashCursor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_hashCursor	5695	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isInvalid, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isInvalid	5704	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isDeclaration, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isDeclaration	5708	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isInvalidDeclaration, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isInvalidDeclaration	5713	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isReference, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isReference	5722	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isExpression, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isExpression	5726	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isStatement, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isStatement	5730	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isAttribute, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isAttribute	5734	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isTranslationUnit	5738	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isPreprocessing, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isPreprocessing	5742	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isUnexposed, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isUnexposed	5746	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorKind	5758	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorLocation	5762	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorExtent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorExtent	6069	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorReferenced, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorReferenced	6077	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorDefinition, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorDefinition	6189	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isCursorDefinition, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isCursorDefinition	6410	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCanonicalCursor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCanonicalCursor	6417	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getObjCSelectorIndex, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getObjCSelectorIndex	6436	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getNumOverloadedDecls, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNumOverloadedDecls	6440	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getOverloadedDecl, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getOverloadedDecl	6459	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDefinitionSpellingAndExtent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDefinitionSpellingAndExtent	6486	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorReferenceNameRange, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorReferenceNameRange	6507	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_enableStackTraces, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_enableStackTraces	6556	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_executeOnThread, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_executeOnThread	6561	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTokenKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTokenKind	6578	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTokenSpelling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTokenSpelling	6582	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTokenLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTokenLocation	6624	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTokenExtent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTokenExtent	6638	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getToken, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getToken	6724	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_tokenize, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_tokenize	6760	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeTokens, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeTokens	6798	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, GetSubscriptOrCallOperator, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	GetSubscriptOrCallOperator	6922	27	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_annotateTokens, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_annotateTokens	7600	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorLinkage, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorLinkage	7643	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorVisibility, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorVisibility	7666	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorAvailability, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorAvailability	7757	24	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, Ctx, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	Ctx	7834	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, It, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	It	7835	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorPlatformAvailability, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorPlatformAvailability	7877	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeCXPlatformAvailability, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeCXPlatformAvailability	7922	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorLanguage, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorLanguage	7927	15	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorTLSKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorTLSKind	7934	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getStorageClass, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getStorageClass	7969	21	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorSemanticParent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorSemanticParent	8000	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorLexicalParent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorLexicalParent	8020	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getIncludedFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getIncludedFile	8037	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getObjCPropertyAttributes, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getObjCPropertyAttributes	8045	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getObjCPropertyGetterName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getObjCPropertyGetterName	8075	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getObjCPropertySetterName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getObjCPropertySetterName	8087	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getObjCDeclQualifiers, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getObjCDeclQualifiers	8099	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isObjCOptional, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isObjCOptional	8123	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isVariadic, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isVariadic	8136	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isExternalSymbol, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isExternalSymbol	8149	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getCommentRange, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getCommentRange	8169	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getRawCommentText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getRawCommentText	8182	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getBriefCommentText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getBriefCommentText	8197	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getModule, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getModule	8216	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getModuleForFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getModuleForFile	8226	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Module_getASTFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Module_getASTFile	8242	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Module_getParent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Module_getParent	8249	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Module_getName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Module_getName	8256	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Module_getFullName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Module_getFullName	8263	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Module_isSystem, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Module_isSystem	8270	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Module_getNumTopLevelHeaders, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Module_getNumTopLevelHeaders	8277	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Module_getTopLevelHeader, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Module_getTopLevelHeader	8291	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXConstructor_isDefaultConstructor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXConstructor_isDefaultConstructor	8313	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXConstructor_isCopyConstructor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXConstructor_isCopyConstructor	8323	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXConstructor_isMoveConstructor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXConstructor_isMoveConstructor	8333	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXConstructor_isConvertingConstructor, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXConstructor_isConvertingConstructor	8343	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXField_isMutable, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXField_isMutable	8354	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXMethod_isPureVirtual, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXMethod_isPureVirtual	8364	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXMethod_isConst, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXMethod_isConst	8374	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXMethod_isDefaulted, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXMethod_isDefaulted	8384	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXMethod_isStatic, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXMethod_isStatic	8394	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXMethod_isVirtual, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXMethod_isVirtual	8404	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXXRecord_isAbstract, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXXRecord_isAbstract	8414	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_EnumDecl_isScoped, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_EnumDecl_isScoped	8425	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getIBOutletCollectionType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getIBOutletCollectionType	8438	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTUResourceUsageName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTUResourceUsageName	8461	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCXTUResourceUsage, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCXTUResourceUsage	8510	18	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeCXTUResourceUsage, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeCXTUResourceUsage	8603	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getSkippedRanges, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getSkippedRanges	8608	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getAllSkippedRanges, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getAllSkippedRanges	8650	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeSourceRangeList, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeSourceRangeList	8677	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getClangVersion, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getClangVersion	8846	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "int" used.	CompareCXXCtorInitializers	801	11	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_EvalResult_getAsInt	3720	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_EvalResult_getAsLongLong	3724	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long long".	clang_EvalResult_getAsUnsigned	3738	19	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "double" used.	clang_EvalResult_getAsDouble	3749	7	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	clang_EvalResult_getAsStr	3756	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_saveTranslationUnit	3968	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_reparseTranslationUnit	4095	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_TargetInfo_getPointerWidth	4170	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	clang_getFileContents	4221	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_getFileUniqueID	4258	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_File_isEqual	4270	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Cursor_getObjCSelectorIndex	6436	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_getCursorPlatformAvailability	7877	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Module_isSystem	8270	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	clang_getTUResourceUsageName	8461	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "int [2]".	VisitOrder	524	8	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	excludeDeclarationsFromPCH	3250	30	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	displayDiagnostics	3251	30	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	Path	3302	63	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	ast_filename	3315	58	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	ast_filename	3326	58	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	3362	54	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	3363	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	3364	62	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	3532	39	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	3533	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	3534	31	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	3375	58	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	3376	51	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	3377	36	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	I	3452	11	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	Arg	3523	21	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	3549	30	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	3550	23	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	3550	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	3562	30	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	3563	23	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	3563	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	i	3568	13	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	i	3588	13	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long long".	unsignedVal	3695	23	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	intVal	3696	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "double" used.	floatVal	3697	11	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "char *".	stringVal	3698	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	FileName	3958	62	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	FileName	3968	64	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	file_name	4209	55	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	flags	4393	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	reserved	4394	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	IsDef	5631	16	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char **".	startBuf	6487	55	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char **".	endBuf	6488	55	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	Text	6592	16	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	EffectiveBufferEnd	6677	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "int *".	always_deprecated	7786	24	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "int *".	always_unavailable	7787	9	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "int *".	always_deprecated	7877	62	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "int *".	always_unavailable	7879	45	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	availability_size	7882	44	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long".	amount	8456	60	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	str	8462	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long".	completionBytes	8538	16	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Boolean operator used incorrectly in CreatePreambleOnFirstParse.	CreatePreambleOnFirstParse	3488	36	MISRA08_4-5-1	4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator
      Improper '++' declaration.		729	43	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		748	45	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		989	16	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		1078	44	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		1091	43	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		1172	43	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		1648	13	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		1691	35	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		1728	35	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '--' declaration.		2488	13	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '--' declaration.		2492	14	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '--' declaration.		2693	16	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		2737	20	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		3151	42	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		3569	6	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		7277	19	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		7482	38	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		7622	11	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		8645	11	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		8672	11	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		8687	18	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Loop or switch statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3524	34	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit2FullArgv	3569	41	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7482	55	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CIndex.cpp.	clang_annotateTokens	7622	18	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CIndex.cpp.	clang_getSkippedRanges	8645	74	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CIndex.cpp.	clang_getAllSkippedRanges	8672	75	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in clang.	PrintLibclangResourceUsage	8689	36	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitClassTemplateSpecializationDecl	730	21	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitClassTemplatePartialSpecializationDecl	749	17	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCCategoryDecl	1080	17	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCProtocolDecl	1093	17	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCInterfaceDecl	1174	17	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifier	1328	16	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifierLoc	1368	35	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionTypeLoc	1650	19	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateSpecializationTypeLoc	1692	17	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitDependentTemplateSpecializationTypeLoc	1729	17	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	VisitAttributes	1808	19	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3152	27	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCompoundStmt	2459	14	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXNewExpr	2488	36	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXOperatorCallExpr	2492	28	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in EnqueueVisitor.	VisitTypeTraitExpr	2693	30	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in EnqueueVisitor.	VisitOMPExecutableDirective	2737	23	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in OMPClauseEnqueue.	VisitOMPInReductionClause	2357	23	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	RangeCompare	113	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	RangeCompare	116	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	LocationCompare	127	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	LocationCompare	129	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	LocationCompare	131	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	visitPreprocessedEntitiesInRange	244	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	isInLexicalContext	293	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	isInLexicalContext	298	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	HasTrailingReturnType	794	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	addRangedDeclsInContainer	992	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	addRangedDeclsInContainer	995	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	buildPieces	3203	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	buildPieces	3206	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	buildPieces	3209	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_createIndex	3255	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_createIndex	3271	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_createIndex	3273	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_createIndex	3277	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_createIndex	3280	78	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_disposeIndex	3287	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXIndex_setGlobalOptions	3292	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXIndex_getGlobalOptions	3297	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXIndex_setInvocationEmissionPathOption	3304	78	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_toggleCrashRecovery	3309	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_toggleCrashRecovery	3311	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_createTranslationUnit2	3329	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_createTranslationUnit2	3332	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3382	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3386	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3391	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3419	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3463	58	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3471	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3508	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3513	59	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit_Impl	3517	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit2FullArgv	3573	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit2FullArgv	3590	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit2FullArgv	3597	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_parseTranslationUnit2FullArgv	3608	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getMacroIdentifier	3627	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isMacroFunctionLike	3643	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isMacroBuiltin	3655	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_EvalResult_getAsLongLong	3730	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_EvalResult_getAsUnsigned	3745	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateExpr	3767	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateExpr	3771	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateExpr	3877	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateExpr	3882	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateDeclExpr	3914	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateDeclExpr	3916	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateDeclExpr	3918	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	evaluateCompoundStmtExpr	3926	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_Evaluate	3937	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_saveTranslationUnit_Impl	3962	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_saveTranslationUnit	3982	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_saveTranslationUnit	3993	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_disposeTranslationUnit	4024	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_suspendTranslationUnit	4040	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_reparseTranslationUnit_Impl	4069	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_reparseTranslationUnit_Impl	4089	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_reparseTranslationUnit_Impl	4091	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_reparseTranslationUnit	4104	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_reparseTranslationUnit	4119	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_TargetInfo_getTriple	4158	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_TargetInfo_getPointerWidth	4172	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_TargetInfo_dispose	4184	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getFileName	4195	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getFileTime	4203	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getFileContents	4234	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getFileContents	4238	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_isFileMultipleIncludeGuarded	4250	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getFileUniqueID	4260	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_File_isEqual	4272	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_File_isEqual	4275	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_File_tryGetRealPathName	4284	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4296	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4299	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4301	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4303	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4306	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4312	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4316	51	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4319	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4319	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4322	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4325	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4325	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4328	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4330	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4333	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4336	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4340	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclFromExpr	4340	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getLocationFromExpr	4347	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getLocationFromExpr	4350	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getLocationFromExpr	4352	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getLocationFromExpr	4354	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getLocationFromExpr	4356	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getLocationFromExpr	4358	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getLocationFromExpr	4360	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4414	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4421	72	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4421	72	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4425	60	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4425	60	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4431	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4437	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclSpelling	4440	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4451	59	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4511	59	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4515	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4519	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4554	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4561	50	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4568	76	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4572	76	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4575	77	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSpelling	4578	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4614	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4622	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4633	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4643	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4651	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4654	71	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4657	72	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4662	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4668	80	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4677	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getSpellingNameRange	4698	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getMangling	4707	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getMangling	4712	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getCXXManglings	4721	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getCXXManglings	4725	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCManglings	4735	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCManglings	4739	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPrintingPolicy	4749	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_PrintingPolicy_dispose	4755	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_PrintingPolicy_getProperty	4762	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_PrintingPolicy_setProperty	4828	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPrettyPrinted	4917	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPrettyPrinted	4922	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4938	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4942	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4946	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4953	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4957	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4963	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4978	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4989	68	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4992	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	4994	8	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDisplayName	5005	71	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetCursorVisitor	5523	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetCursorVisitor	5530	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetCursorVisitor	5547	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetCursorVisitor	5560	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetCursorVisitor	5573	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetCursorVisitor	5588	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetCursorVisitor	5607	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_equalCursors	5688	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_equalCursors	5690	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_hashCursor	5698	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_isInvalidDeclaration	5716	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5812	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5816	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5839	73	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5843	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5874	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5878	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5888	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLocation	5893	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getRawCursorExtent	5971	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getRawCursorExtent	5974	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getRawCursorExtent	5977	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getRawCursorExtent	5980	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getRawCursorExtent	6011	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getRawCursorExtent	6021	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getFullCursorExtent	6034	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getFullCursorExtent	6043	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getFullCursorExtent	6046	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getFullCursorExtent	6051	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getFullCursorExtent	6060	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorExtent	6072	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6079	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6085	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6087	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6091	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6091	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6107	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6117	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6117	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6117	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6125	47	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6129	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6138	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenced	6146	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6191	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6202	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6205	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6209	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6282	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6292	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6302	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6309	66	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6317	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6324	76	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6341	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6352	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6352	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6352	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6352	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6360	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6365	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6377	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6379	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6392	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6392	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6398	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorDefinition	6403	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_isCursorDefinition	6412	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCanonicalCursor	6419	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCanonicalCursor	6424	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCanonicalCursor	6424	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCanonicalCursor	6428	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCanonicalCursor	6428	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getNumOverloadedDecls	6442	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getNumOverloadedDecls	6446	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getNumOverloadedDecls	6450	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getNumOverloadedDecls	6454	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getOverloadedDecl	6461	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getOverloadedDecl	6464	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getOverloadedDecl	6469	52	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getOverloadedDecl	6473	46	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenceNameRange	6515	65	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenceNameRange	6532	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenceNameRange	6536	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenceNameRange	6546	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorReferenceNameRange	6550	66	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getTokenSpelling	6610	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getTokenSpelling	6619	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getTokenLocation	6632	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getTokenExtent	6646	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getTokens	6662	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getTokens	6669	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getTokens	6684	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getToken	6736	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getToken	6740	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getToken	6751	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_tokenize	6767	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_tokenize	6769	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_tokenize	6778	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_tokenize	6784	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_tokenize	6790	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetSubscriptOrCallOperator	6924	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	GetSubscriptOrCallOperator	6930	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	updateCursorAnnotation	6972	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	lexNext	7381	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7403	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7409	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7423	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7438	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7443	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7470	73	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	annotatePreprocessorTokens	7485	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_annotateTokensImpl	7497	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_annotateTokensImpl	7518	56	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_annotateTokensImpl	7549	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_annotateTokensImpl	7571	51	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_annotateTokensImpl	7587	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_annotateTokens	7626	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLinkage	7645	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorVisibility	7668	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getDeclLanguage	7687	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getCursorAvailabilityForDecl	7737	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getCursorAvailabilityForDecl	7744	50	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorAvailability	7760	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorAvailability	7760	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	convertVersion	7768	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	convertVersion	7774	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	convertVersion	7776	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	convertVersion	7780	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getCursorPlatformAvailabilityForDecl	7794	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getCursorPlatformAvailabilityForDecl	7805	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getCursorPlatformAvailabilityForDecl	7824	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getCursorPlatformAvailabilityForDecl	7824	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	getCursorPlatformAvailabilityForDecl	7827	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPlatformAvailability	7884	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPlatformAvailability	7886	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPlatformAvailability	7888	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPlatformAvailability	7890	50	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPlatformAvailability	7893	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorPlatformAvailability	7897	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLanguage	7929	59	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	maybeGetTemplateCursor	7955	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	maybeGetTemplateCursor	7959	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	maybeGetTemplateCursor	7959	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	maybeGetTemplateCursor	7963	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	maybeGetTemplateCursor	7963	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSemanticParent	8005	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorSemanticParent	8014	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getCursorLexicalParent	8025	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getIncludedFile	8039	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCPropertyAttributes	8047	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCPropertyAttributes	8057	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCPropertyGetterName	8077	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCPropertyGetterName	8082	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCPropertySetterName	8089	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCPropertySetterName	8094	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8101	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8106	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8108	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8110	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8113	61	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8114	67	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8115	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8116	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8117	67	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getObjCDeclQualifiers	8118	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isObjCOptional	8125	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isObjCOptional	8129	72	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isObjCOptional	8131	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isVariadic	8138	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isVariadic	8142	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isVariadic	8144	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isExternalSymbol	8153	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isExternalSymbol	8159	58	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isExternalSymbol	8161	60	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_isExternalSymbol	8163	52	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getCommentRange	8171	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getCommentRange	8177	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getRawCommentText	8184	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getBriefCommentText	8199	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Cursor_getModule	8220	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getModuleForFile	8232	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_getASTFile	8244	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_getParent	8251	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_getName	8258	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_getFullName	8265	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_isSystem	8272	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_getNumTopLevelHeaders	8284	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_getTopLevelHeader	8298	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_Module_getTopLevelHeader	8304	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXConstructor_isDefaultConstructor	8315	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXConstructor_isCopyConstructor	8325	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXConstructor_isMoveConstructor	8335	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXConstructor_isConvertingConstructor	8345	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXField_isMutable	8356	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXField_isMutable	8360	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXField_isMutable	8360	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXMethod_isPureVirtual	8366	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXMethod_isConst	8376	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXMethod_isDefaulted	8386	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXMethod_isStatic	8396	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXMethod_isVirtual	8406	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXRecord_isAbstract	8416	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_CXXRecord_isAbstract	8421	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_EnumDecl_isScoped	8427	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getIBOutletCollectionType	8440	67	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_disposeCXTUResourceUsage	8605	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getSkippedRanges	8619	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getSkippedRanges	8624	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getSkippedRanges	8637	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getSkippedRanges	8639	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndex.cpp.	clang_getAllSkippedRanges	8663	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in clang.	RunSafely	8706	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in clang.	RunSafely	8708	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in clang.	setThreadBackgroundPriority	8724	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getCursor	5906	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxtu.	MakeCXTranslationUnit	73	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxtu.	isASTReadError	94	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	printDiagsToStderr	8733	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	getMacroInfo	8756	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	getMacroInfo	8758	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	getMacroInfo	8767	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	getMacroInfo	8777	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	getMacroInfo	8780	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8789	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8791	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8794	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8802	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8804	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8809	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8813	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8817	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8821	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8830	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8833	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8837	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxindex.	checkForMacroInMacroDefinition	8841	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXTUOwner.	~CXTUOwner	101	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	Visit	191	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	Visit	203	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	Visit	211	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	Visit	225	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	Visit	225	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitFileRegion	254	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitFileRegion	272	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitFileRegion	280	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitFileRegion	280	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitFileRegion	283	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitFileRegion	286	46	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	318	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	322	47	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	324	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	326	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	341	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	344	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	350	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	350	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	354	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	356	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	369	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	373	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	385	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitDeclsFromFileRegion	389	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntitiesInRegion	400	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntitiesInRegion	414	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntitiesInRegion	426	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntitiesInRegion	440	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntities	452	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntities	456	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntities	460	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntities	467	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	visitPreprocessedEntities	474	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	501	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	508	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	515	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	534	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	539	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	545	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	565	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitChildren	579	78	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitBlockDecl	589	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitBlockDecl	589	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitBlockDecl	592	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	shouldVisitCursor	601	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclContext	631	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclContext	634	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	handleDeclForVisitation	650	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	handleDeclForVisitation	658	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	handleDeclForVisitation	663	67	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	handleDeclForVisitation	668	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	handleDeclForVisitation	670	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	handleDeclForVisitation	672	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTypeAliasTemplateDecl	682	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTypeAliasDecl	689	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTypedefDecl	696	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitClassTemplateSpecializationDecl	730	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitClassTemplatePartialSpecializationDecl	742	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitClassTemplatePartialSpecializationDecl	749	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateTypeParmDecl	759	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateTypeParmDecl	759	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateTypeParmDecl	759	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitEnumConstantDecl	766	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclaratorDecl	775	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclaratorDecl	780	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclaratorDecl	780	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclaratorDecl	785	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclaratorDecl	785	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	811	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	827	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	832	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	832	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	837	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	837	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	843	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	847	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	858	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	873	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	876	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	882	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	882	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionDecl	887	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFieldDecl	895	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFieldDecl	898	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFieldDecl	901	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitVarDecl	908	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitVarDecl	911	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNonTypeTemplateParmDecl	918	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNonTypeTemplateParmDecl	922	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNonTypeTemplateParmDecl	922	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionTemplateDecl	931	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitClassTemplateDecl	941	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateTemplateParmDecl	949	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateTemplateParmDecl	953	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCTypeParamDecl	963	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCMethodDecl	973	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCMethodDecl	973	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCMethodDecl	977	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCContainerDecl	1011	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCContainerDecl	1032	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCContainerDecl	1039	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCContainerDecl	1059	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCContainerDecl	1061	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCContainerDecl	1063	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCCategoryDecl	1071	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCCategoryDecl	1074	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCCategoryDecl	1080	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCProtocolDecl	1087	72	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCProtocolDecl	1093	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1100	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1107	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1111	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1119	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1126	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1126	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1126	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1131	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1131	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyDecl	1131	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCTypeParamList	1138	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCTypeParamList	1143	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCInterfaceDecl	1157	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCInterfaceDecl	1164	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCInterfaceDecl	1168	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCInterfaceDecl	1168	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCInterfaceDecl	1174	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCCategoryImplDecl	1187	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCCategoryImplDecl	1187	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCImplementationDecl	1200	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyImplDecl	1209	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCPropertyImplDecl	1209	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNamespaceAliasDecl	1222	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNamespaceAliasDecl	1222	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUsingDecl	1232	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUsingDecl	1236	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUsingDirectiveDecl	1245	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUsingDirectiveDecl	1245	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUnresolvedUsingValueDecl	1255	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUnresolvedUsingTypenameDecl	1266	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUnresolvedUsingTypenameDecl	1266	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitStaticAssertDecl	1273	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitStaticAssertDecl	1276	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitStaticAssertDecl	1276	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFriendDecl	1283	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFriendDecl	1286	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeclarationNameInfo	1304	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifier	1324	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifier	1345	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifier	1347	75	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifier	1350	72	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifierLoc	1378	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifierLoc	1386	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitNestedNameSpecifierLoc	1393	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateParameters	1410	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateParameters	1416	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateName	1430	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateArgumentLoc	1467	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateArgumentLoc	1472	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateArgumentLoc	1477	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateArgumentLoc	1482	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateArgumentLoc	1488	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitBuiltinTypeLoc	1551	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTagTypeLoc	1567	66	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCTypeParamTypeLoc	1582	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCTypeParamTypeLoc	1586	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCObjectTypeLoc	1594	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCObjectTypeLoc	1598	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitObjCObjectTypeLoc	1604	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionTypeLoc	1645	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionTypeLoc	1650	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitFunctionTypeLoc	1650	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitArrayTypeLoc	1657	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitArrayTypeLoc	1660	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDeducedTemplateSpecializationTypeLoc	1677	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateSpecializationTypeLoc	1687	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTemplateSpecializationTypeLoc	1692	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitTypeOfTypeLoc	1703	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitUnaryTransformTypeLoc	1710	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDependentTemplateSpecializationTypeLoc	1724	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDependentTemplateSpecializationTypeLoc	1729	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitElaboratedTypeLoc	1736	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitDecltypeTypeLoc	1747	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitCXXRecordDecl	1791	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitCXXRecordDecl	1791	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitCXXRecordDecl	1796	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	VisitAttributes	1808	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	IsInRegionOfInterest	2966	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	2983	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	2988	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	2996	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3003	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3020	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3027	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3033	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3039	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3044	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3050	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3063	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3063	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3067	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3075	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3085	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3085	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3088	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3096	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3096	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3099	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3102	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3111	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3119	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3137	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3142	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3152	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3157	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CursorVisitor.	RunVisitorWorkList	3165	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	AddNestedNameSpecifierLoc	2088	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	AddStmt	2093	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	AddDecl	2097	47	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	AddMemberRef	2105	46	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	AddTypeLoc	2109	56	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	EnqueueChildren	2117	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	EnqueueChildren	2441	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitMSDependentExistsStmt	2466	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXDependentScopeMemberExpr	2472	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXDependentScopeMemberExpr	2475	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXDependentScopeMemberExpr	2477	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXPseudoDestructorExpr	2505	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXTypeidExpr	2521	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitCXXUuidofExpr	2532	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitDeclRefExpr	2548	76	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitDependentScopeDeclRefExpr	2554	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitDeclStmt	2566	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitDesignatedInitExpr	2578	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitInitListExpr	2613	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitMemberExpr	2624	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitOverloadExpr	2667	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitUnaryExprOrTypeTraitExpr	2674	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitUnresolvedMemberExpr	2707	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitOpaqueValueExpr	2720	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in EnqueueVisitor.	VisitOMPTaskgroupDirective	2817	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Logger.	operator<<	8855	54	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	IsIgnoredChildCursor	6910	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	annotateAndAdvanceTokens	6989	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	annotateAndAdvanceTokens	6989	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	annotateAndAdvanceFunctionMacroTokens	7025	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	annotateAndAdvanceFunctionMacroTokens	7028	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	annotateAndAdvanceFunctionMacroTokens	7030	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	annotateAndAdvanceFunctionMacroTokens	7034	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7044	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7047	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7054	85	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7062	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7078	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7088	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7088	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7095	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7133	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7139	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	Visit	7154	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	postVisitChildren	7204	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	postVisitChildren	7207	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	postVisitChildren	7223	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	postVisitChildren	7231	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	HandlePostPonedChildCursor	7259	11	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AnnotateTokensWorker.	HandlePostPonedChildCursor	7265	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MarkMacroArgTokensVisitor.	visit	7317	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MarkMacroArgTokensVisitor.	visit	7321	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MarkMacroArgTokensVisitor.	visit	7326	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MarkMacroArgTokensVisitor.	visit	7330	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MarkMacroArgTokensVisitor.	visit	7335	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MarkMacroArgTokensVisitor.	visit	7341	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Else If with no following Else	getMacroIdentifier	3632	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	evaluateExpr	3851	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	evaluateExpr	3896	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	evaluateExpr	3909	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	evaluateDeclExpr	3919	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	GetCursorVisitor	5576	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	getFullCursorExtent	6049	4	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	clang_getCursorDefinition	6380	4	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	clang_getCursorReferenceNameRange	6553	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	clang_Cursor_getObjCDeclQualifiers	8109	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	clang_getSkippedRanges	8640	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	VisitChildren	540	8	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	handleDeclForVisitation	666	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	VisitFunctionDecl	880	8	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	VisitFriendDecl	1288	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	Visit	7090	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	HandlePostPonedChildCursor	7283	4	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4456	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4460	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4465	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4469	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4474	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4481	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4488	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4495	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4502	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4510	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4525	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4530	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4597	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4599	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorSpelling	4601	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4766	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4768	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4770	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4772	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4774	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4776	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4778	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4780	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4782	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4784	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4786	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4788	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4790	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4792	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4794	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4796	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4798	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4800	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4802	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4804	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4806	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4808	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4810	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4812	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4814	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_getProperty	4816	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4833	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4836	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4839	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4842	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4845	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4848	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4851	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4854	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4857	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4860	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4863	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4866	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4869	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4872	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4875	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4878	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4881	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4884	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4887	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4890	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4893	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4896	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4899	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4902	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4905	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_PrintingPolicy_setProperty	4908	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5020	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5022	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5024	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5026	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5028	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5030	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5032	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5034	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5036	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5038	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5040	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5042	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5044	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5046	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5048	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5050	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5052	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5054	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5056	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5058	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5060	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5062	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5064	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5066	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5068	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5070	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5072	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5074	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5076	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5078	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5080	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5082	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5084	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5086	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5088	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5090	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5092	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5094	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5096	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5098	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5100	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5102	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5104	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5106	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5108	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5110	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5112	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5114	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5116	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5118	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5120	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5122	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5124	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5126	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5128	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5130	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5132	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5134	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5136	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5138	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5140	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5142	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5144	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5146	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5148	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5150	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5152	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5154	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5156	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5158	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5160	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5162	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5164	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5166	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5168	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5170	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5172	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5174	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5176	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5178	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5180	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5182	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5184	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5186	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5188	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5190	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5192	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5194	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5196	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5198	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5200	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5202	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5204	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5206	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5208	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5210	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5212	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5214	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5216	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5218	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5220	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5222	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5224	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5226	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5228	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5230	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5232	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5234	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5236	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5238	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5240	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5242	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5244	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5246	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5248	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5250	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5252	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5254	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5256	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5258	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5260	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5262	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5264	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5266	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5268	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5270	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5272	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5274	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5276	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5278	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5280	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5282	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5284	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5286	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5288	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5290	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5292	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5294	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5296	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5298	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5300	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5302	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5304	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5306	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5308	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5310	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5312	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5314	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5316	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5318	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5320	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5322	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5324	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5326	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5328	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5330	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5332	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5334	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5336	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5338	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5340	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5342	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5344	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5346	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5348	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5350	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5352	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5354	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5356	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5358	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5360	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5362	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5364	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5366	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5368	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5370	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5372	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5374	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5376	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5378	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5380	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5382	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5384	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5386	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5388	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5390	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5392	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5394	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5396	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5398	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5400	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5402	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5404	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5406	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5408	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5410	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5412	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5414	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5416	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5418	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5420	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5422	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5424	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5426	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5428	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5430	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5432	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5434	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5436	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5438	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5440	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5442	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5444	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5446	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5448	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5450	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5452	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5454	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5456	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5458	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5460	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5462	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5464	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5466	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5468	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5470	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5472	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5475	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5477	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5479	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5481	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5483	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5485	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5487	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5489	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorKindSpelling	5491	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_isUnexposed	5748	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_isUnexposed	5753	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5766	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5772	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5778	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5784	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5789	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5795	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5800	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5805	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5811	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5823	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5827	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLocation	5831	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5931	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5934	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5937	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5940	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5943	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5946	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5949	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5952	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5955	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5958	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5961	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getRawCursorExtent	5964	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6132	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6137	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6145	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6151	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6154	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6157	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6160	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6164	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6169	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6177	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6180	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorReferenced	6183	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6214	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6269	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6273	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6281	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6291	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6301	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6308	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6314	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6322	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6328	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6332	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6340	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6358	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6364	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6376	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6383	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6391	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6397	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorDefinition	6402	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTokenSpelling	6584	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTokenSpelling	6592	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLinkage	7650	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLinkage	7652	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLinkage	7654	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorLinkage	7655	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorVisibility	7673	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorVisibility	7674	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorVisibility	7675	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getDeclLanguage	7692	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getDeclLanguage	7706	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getCursorAvailabilityForDecl	7742	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getCursorAvailabilityForDecl	7747	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getCursorAvailabilityForDecl	7750	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorTLSKind	7938	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorTLSKind	7940	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorTLSKind	7942	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getStorageClass	7984	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getStorageClass	7986	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getStorageClass	7988	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getStorageClass	7990	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getStorageClass	7992	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getStorageClass	7994	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	Visit	215	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	Visit	218	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	Visit	224	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	shouldVisitCursor	604	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	shouldVisitCursor	608	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitClassTemplateSpecializationDecl	709	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitDeclarationNameInfo	1293	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitDeclarationNameInfo	1303	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitDeclarationNameInfo	1307	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitNestedNameSpecifier	1331	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitNestedNameSpecifier	1335	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitNestedNameSpecifier	1344	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitNestedNameSpecifierLoc	1375	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitNestedNameSpecifierLoc	1383	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitNestedNameSpecifierLoc	1392	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateName	1424	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateName	1429	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateName	1434	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateName	1438	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateName	1444	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateName	1449	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateArgumentLoc	1460	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateArgumentLoc	1466	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateArgumentLoc	1471	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateArgumentLoc	1476	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateArgumentLoc	1481	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitTemplateArgumentLoc	1487	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	2982	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	2995	13	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3002	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3009	13	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3019	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3025	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3032	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3038	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3046	10	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3062	13	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3084	13	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3095	13	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3109	13	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	RunVisitorWorkList	3164	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	get	1924	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	get	1926	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	get	1928	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	get	1930	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	get	1932	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	VisitOffsetOfExpr	2657	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	Visit	7110	8	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	Visit	7124	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	clang_getCursorSpelling	4603	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_PrintingPolicy_getProperty	4818	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_PrintingPolicy_setProperty	4910	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getCursorKindSpelling	5493	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getCursorDefinition	6405	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getTokenSpelling	6599	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getCursorLinkage	7657	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getCursorVisibility	7676	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7692	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7693	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7694	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7695	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7696	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7697	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7698	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7699	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7700	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7701	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7702	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7703	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7704	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7706	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7707	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7708	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7709	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7710	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7711	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7712	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7713	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7714	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7715	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7716	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7717	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7718	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7719	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7720	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7721	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7722	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7723	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7724	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7725	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7726	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7727	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	getDeclLanguage	7728	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	getCursorAvailabilityForDecl	7752	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getCursorTLSKind	7944	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_Cursor_getStorageClass	7996	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getTUResourceUsageName	8506	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	Visit	228	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	shouldVisitCursor	615	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitClassTemplateSpecializationDecl	721	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitDeclarationNameInfo	1312	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitNestedNameSpecifier	1359	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitNestedNameSpecifierLoc	1401	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitTemplateName	1453	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitTemplateArgumentLoc	1492	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitBuiltinTypeLoc	1546	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	RunVisitorWorkList	3053	8	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	RunVisitorWorkList	3167	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	get	1926	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	get	1928	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	get	1930	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	get	1932	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	VisitOffsetOfExpr	2660	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	Visit	7115	6	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	Visit	7142	6	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      For loop contains more than one loop counter	clang_getCursorDisplayName	4955	23	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	clang_getCursorDisplayName	4976	23	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Loop does not contain a traditional loop counter; cannot test	annotatePreprocessorTokens	7481	11	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	clang_getSkippedRanges	8634	73	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	clang_getSkippedRanges	8644	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	clang_getAllSkippedRanges	8671	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	isASTReadError	88	64	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	printDiagsToStderr	8735	66	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Loop does not contain a traditional loop counter; cannot test	visitPreprocessedEntities	450	7	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitChildren	529	74	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Loop does not contain a traditional loop counter; cannot test	VisitDeclContext	628	8	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitClassTemplateSpecializationDecl	728	25	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitClassTemplatePartialSpecializationDecl	747	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitFunctionDecl	868	25	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCContainerDecl	1054	68	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCCategoryDecl	1077	67	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCCategoryDecl	1078	44	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCProtocolDecl	1090	68	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCProtocolDecl	1091	43	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCInterfaceDecl	1171	67	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCInterfaceDecl	1172	43	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Loop does not contain a traditional loop counter; cannot test	VisitNestedNameSpecifierLoc	1367	7	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitTemplateParameters	1412	64	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCTypeParamTypeLoc	1583	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCObjectTypeLoc	1596	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitObjCObjectTypeLoc	1601	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitFunctionTypeLoc	1647	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitTemplateSpecializationTypeLoc	1690	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitDependentTemplateSpecializationTypeLoc	1727	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	RunVisitorWorkList	3071	68	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	RunVisitorWorkList	3132	73	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	RunVisitorWorkList	3150	31	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitOffsetOfExpr	2648	41	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	VisitOMPExecutableDirective	2734	63	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Loop does not contain a traditional loop counter; cannot test	annotateAndAdvanceFunctionMacroTokens	7022	7	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Loop does not contain a traditional loop counter; cannot test	visit	7323	9	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Loop does not contain a traditional loop counter; cannot test	visit	7332	9	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	isInLexicalContext	296	51	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	clang_getCursorDisplayName	4955	66	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	clang_getCursorDisplayName	4976	56	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	clang_getSkippedRanges	8635	19	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	clang_getSkippedRanges	8644	56	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	clang_getAllSkippedRanges	8671	56	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	isASTReadError	90	21	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	printDiagsToStderr	8737	21	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	getMacroInfo	8765	75	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	visitDeclsFromFileRegion	338	75	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitChildren	531	32	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitClassTemplateSpecializationDecl	728	63	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitClassTemplatePartialSpecializationDecl	747	61	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitFunctionDecl	868	63	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitObjCContainerDecl	1055	48	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitObjCCategoryDecl	1078	50	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitObjCProtocolDecl	1091	49	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitObjCInterfaceDecl	1172	49	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitTemplateParameters	1414	21	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitObjCTypeParamTypeLoc	1583	60	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitObjCObjectTypeLoc	1596	59	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitObjCObjectTypeLoc	1601	60	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitFunctionTypeLoc	1647	57	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitTemplateSpecializationTypeLoc	1690	55	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitDependentTemplateSpecializationTypeLoc	1727	55	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	RunVisitorWorkList	3073	35	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	RunVisitorWorkList	3134	27	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	RunVisitorWorkList	3150	70	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	VisitOMPExecutableDirective	2736	18	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Loop counter inappropriately modifed	DeclDC	296	17	MISRA08_6-5-4	6-5-4 The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop
      Loop counter inappropriately modifed	Def	8765	43	MISRA08_6-5-4	6-5-4 The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop
      Goto statement used as a back jump	reprocess	7428	2	MISRA08_6-6-2	6-6-2 The goto statement shall jump to a label declared later in the same function body
      More than one break or goto in loop iteration statment		989	2	MISRA08_6-6-4	6-6-4 For any iteration statement there shall be no more than one break or goto statement used for loop termination
      More than one break or goto in loop iteration statment		7420	2	MISRA08_6-6-4	6-6-4 For any iteration statement there shall be no more than one break or goto statement used for loop termination
      More than one break or goto in loop iteration statment		7262	4	MISRA08_6-6-4	6-6-4 For any iteration statement there shall be no more than one break or goto statement used for loop termination
      Multiple exit points from function	MakeCXTranslationUnit	70	24	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isASTReadError	87	11	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	clang_disposeTranslationUnit	4018	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	RangeCompare	106	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	LocationCompare	122	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getRawCursorExtent	5928	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getFullCursorExtent	6030	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	Visit	189	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitFileRegion	252	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isInLexicalContext	291	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitDeclsFromFileRegion	303	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitPreprocessedEntitiesInRegion	398	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitPreprocessedEntities	446	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitChildren	487	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitBlockDecl	586	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	shouldVisitCursor	597	30	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitDeclContext	620	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleDeclForVisitation	640	30	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	VisitTranslationUnitDecl	676	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTypeAliasTemplateDecl	680	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTypeAliasDecl	687	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTypedefDecl	694	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitClassTemplateSpecializationDecl	705	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitClassTemplatePartialSpecializationDecl	737	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTemplateTypeParmDecl	754	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitEnumConstantDecl	764	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitDeclaratorDecl	770	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	HasTrailingReturnType	790	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitFunctionDecl	806	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitFieldDecl	893	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitVarDecl	906	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitNonTypeTemplateParmDecl	916	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitFunctionTemplateDecl	927	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitClassTemplateDecl	937	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTemplateTemplateParmDecl	947	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCTypeParamDecl	958	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCMethodDecl	970	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCContainerDecl	1005	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCCategoryDecl	1068	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCProtocolDecl	1085	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCPropertyDecl	1098	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCTypeParamList	1136	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCInterfaceDecl	1149	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCCategoryImplDecl	1183	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCImplementationDecl	1192	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCPropertyImplDecl	1206	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitNamespaceAliasDecl	1218	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitUsingDecl	1228	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitUsingDirectiveDecl	1241	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitUnresolvedUsingValueDecl	1251	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitUnresolvedUsingTypenameDecl	1261	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitStaticAssertDecl	1271	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitFriendDecl	1280	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitDeclarationNameInfo	1291	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitNestedNameSpecifier	1317	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitNestedNameSpecifierLoc	1365	15	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTemplateParameters	1407	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTemplateName	1422	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTemplateArgumentLoc	1458	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitBuiltinTypeLoc	1505	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTagTypeLoc	1565	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCTypeParamTypeLoc	1580	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitObjCObjectTypeLoc	1592	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitFunctionTypeLoc	1642	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitArrayTypeLoc	1655	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitDeducedTemplateSpecializationTypeLoc	1673	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTemplateSpecializationTypeLoc	1682	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitTypeOfTypeLoc	1701	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitUnaryTransformTypeLoc	1708	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitDependentTemplateSpecializationTypeLoc	1719	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitElaboratedTypeLoc	1734	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitDecltypeTypeLoc	1745	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitCXXRecordDecl	1787	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitAttributes	1803	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ExplicitTemplateArgsVisit	1838	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	DeclVisit	1854	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	TypeLocVisit	1865	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	LabelRefVisit	1881	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	NestedNameSpecifierLocVisit	1897	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	DeclarationNameInfoVisit	1916	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	get	1921	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	MemberRefVisit	1939	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	EnqueueVisitor	1957	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	EnqueueChildren	2111	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	EnqueueChildren	2436	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	VisitDeclStmt	2558	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	VisitMemberExpr	2616	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	IsInRegionOfInterest	2962	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	RunVisitorWorkList	2971	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	RegisterFatalErrorHandler	3242	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXIndex_getGlobalOptions	3295	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_createTranslationUnit2	3325	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_parseTranslationUnit_Impl	3375	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_parseTranslationUnit2FullArgv	3561	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ParseTranslationUnitImpl	3576	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getMacroIdentifier	3624	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isMacroFunctionLike	3635	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isMacroBuiltin	3647	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isFunctionInlined	3659	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCFSTR_value	3668	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_EvalResult_getKind	3713	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_EvalResult_getAsLongLong	3724	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_EvalResult_getAsUnsigned	3738	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_EvalResult_getAsDouble	3749	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_EvalResult_getAsStr	3756	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	evaluateExpr	3763	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	evaluateDeclExpr	3912	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	evaluateCompoundStmtExpr	3922	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_Evaluate	3931	13	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_hasAttrs	3941	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_saveTranslationUnit	3968	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	SaveTranslationUnitImpl	3985	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_suspendTranslationUnit	4035	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_reparseTranslationUnit_Impl	4054	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_reparseTranslationUnit	4095	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ReparseTranslationUnitImpl	4107	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTranslationUnitSpelling	4125	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTranslationUnitCursor	4135	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTranslationUnitTargetInfo	4145	13	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_TargetInfo_getTriple	4156	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_TargetInfo_getPointerWidth	4170	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	clang_TargetInfo_dispose	4182	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFileName	4193	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFileTime	4201	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFile	4209	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFileContents	4221	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_isFileMultipleIncludeGuarded	4242	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFileUniqueID	4258	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_File_isEqual	4270	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_File_tryGetRealPathName	4282	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getDeclFromExpr	4294	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getLocationFromExpr	4345	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getDeclSpelling	4412	16	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorSpelling	4449	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getSpellingNameRange	4610	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorLocation	5762	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getMangling	4705	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getCXXManglings	4719	13	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getObjCManglings	4733	13	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorPrintingPolicy	4747	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_PrintingPolicy_getProperty	4759	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_PrintingPolicy_setProperty	4824	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorPrettyPrinted	4915	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorDisplayName	4936	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorKindSpelling	5018	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	GetCursorData	5505	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	GetCursorVisitor	5513	31	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursor	5613	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_isCursorDefinition	6410	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorDefinition	6189	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_isInvalidDeclaration	5713	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_isUnexposed	5746	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCursor	5900	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorExtent	6069	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorReferenced	6077	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCanonicalCursor	6417	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getNumOverloadedDecls	6440	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getOverloadedDecl	6459	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorReferenceNameRange	6507	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTokenSpelling	6582	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTokenLocation	6624	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTokenExtent	6638	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getTokens	6652	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getToken	6724	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_tokenize	6760	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	AnnotateTokensWorker	6865	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	IsIgnoredChildCursor	6908	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	GetSubscriptOrCallOperator	6922	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	updateCursorAnnotation	6969	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	annotateAndAdvanceTokens	6982	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	annotateAndAdvanceFunctionMacroTokens	7003	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	Visit	7041	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	postVisitChildren	7202	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	MarkMacroArgTokensVisitor	7311	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visit	7315	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	lexNext	7378	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	annotatePreprocessorTokens	7388	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_annotateTokens	7600	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	AnnotateTokensImpl	7630	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorLinkage	7643	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorVisibility	7666	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getDeclLanguage	7685	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCursorAvailabilityForDecl	7735	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorAvailability	7757	24	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	convertVersion	7765	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCursorPlatformAvailabilityForDecl	7785	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorPlatformAvailability	7877	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorLanguage	7927	15	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorTLSKind	7934	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	maybeGetTemplateCursor	7953	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getStorageClass	7969	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorSemanticParent	8000	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorLexicalParent	8020	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getIncludedFile	8037	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getObjCPropertyAttributes	8045	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getObjCPropertyGetterName	8075	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getObjCPropertySetterName	8087	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getObjCDeclQualifiers	8099	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isObjCOptional	8123	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isVariadic	8136	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isExternalSymbol	8149	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getCommentRange	8169	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getRawCommentText	8182	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getBriefCommentText	8197	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getModule	8216	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getModuleForFile	8226	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Module_getASTFile	8242	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Module_getParent	8249	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Module_getName	8256	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Module_getFullName	8263	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Module_isSystem	8270	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Module_getNumTopLevelHeaders	8277	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Module_getTopLevelHeader	8291	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXConstructor_isDefaultConstructor	8313	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXConstructor_isCopyConstructor	8323	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXConstructor_isMoveConstructor	8333	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXConstructor_isConvertingConstructor	8343	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXField_isMutable	8354	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXMethod_isPureVirtual	8364	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXMethod_isConst	8374	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXMethod_isDefaulted	8384	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXMethod_isStatic	8394	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXMethod_isVirtual	8404	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXXRecord_isAbstract	8414	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_EnumDecl_isScoped	8425	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getIBOutletCollectionType	8438	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCXTUResourceUsage	8510	18	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getSkippedRanges	8608	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getAllSkippedRanges	8650	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	RunSafely	8703	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	setThreadBackgroundPriority	8722	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	printDiagsToStderr	8731	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getMacroInfo	8752	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getMacroInfo	8774	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	checkForMacroInMacroDefinition	8786	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	checkForMacroInMacroDefinition	8827	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	operator<<	8850	25	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value RegisterFatalErrorHandlerOnce not const qualified	RegisterFatalErrorHandlerOnce	3248	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value It not const qualified	It	7835	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value LoggingMutex not const qualified	LoggingMutex	8924	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value AU not const qualified	AU	71	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	75	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value AU not const qualified	AU	87	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	4022	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	106	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	122	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Expansion not const qualified	Expansion	149	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Length not const qualified	Length	154	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	159	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	5928	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	5983	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	5984	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	5989	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	5990	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	5995	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	5996	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6001	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MainID not const qualified	MainID	6002	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Start not const qualified	Start	6003	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value End not const qualified	End	6004	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	6013	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	6030	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SrcMgr not const qualified	SrcMgr	6030	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	6036	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TI not const qualified	TI	6042	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TI not const qualified	TI	6045	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	175	73	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	189	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CheckedRegionOfInterest not const qualified	CheckedRegionOfInterest	189	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	209	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ret not const qualified	ret	222	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5704	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	233	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Visitor not const qualified	Visitor	235	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	236	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	256	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	257	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value File not const qualified	File	274	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Offset not const qualified	Offset	275	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Length not const qualified	Length	276	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	291	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DC not const qualified	DC	291	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value File not const qualified	File	303	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Offset not const qualified	Offset	304	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Length not const qualified	Length	304	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	305	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	307	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DE not const qualified	DE	338	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TD not const qualified	TD	348	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CurDeclRange not const qualified	CurDeclRange	383	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	404	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MappedRange not const qualified	MappedRange	407	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value B not const qualified	B	408	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value breaked not const qualified	breaked	422	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value OnlyLocalDecls not const qualified	OnlyLocalDecls	435	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value First not const qualified	First	446	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Last not const qualified	Last	447	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PPRec not const qualified	PPRec	448	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	449	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PPE not const qualified	PPE	454	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SetParent not const qualified	SetParent	496	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	521	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value VisitOrder not const qualified	VisitOrder	524	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BeginLoc not const qualified	BeginLoc	571	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	574	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5722	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5730	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5726	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5738	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value B not const qualified	B	586	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	597	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	599	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DC not const qualified	DC	620	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	621	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ivarD not const qualified	ivarD	648	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	676	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	687	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	694	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	701	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	725	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	728	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	747	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	754	68	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	764	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DD not const qualified	DD	770	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumParamList not const qualified	NumParamList	771	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	783	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ND not const qualified	ND	790	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumParamList not const qualified	NumParamList	807	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	817	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FTL not const qualified	FTL	818	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	830	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value WrittenInits not const qualified	WrittenInits	855	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	856	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	868	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	958	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TInfo not const qualified	TInfo	961	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DI_current not const qualified	DI_current	985	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DE_current not const qualified	DE_current	985	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	986	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndLoc not const qualified	EndLoc	986	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Decls not const qualified	Decls	987	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D_next not const qualified	D_next	990	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value L not const qualified	L	993	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndLoc not const qualified	EndLoc	1018	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SubDecl not const qualified	SubDecl	1036	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	1055	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1056	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PD not const qualified	PD	1098	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CDecl not const qualified	CDecl	1105	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ID not const qualified	ID	1109	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PropertyId not const qualified	PropertyId	1113	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value prevDecl not const qualified	prevDecl	1114	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value typeParamList not const qualified	typeParamList	1136	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value typeParam not const qualified	typeParam	1140	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1179	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PD not const qualified	PD	1206	68	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1214	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	1220	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	1230	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	1243	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1251	76	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	1253	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1262	76	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	1264	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1280	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Name not const qualified	Name	1291	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	1318	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Prefix not const qualified	Prefix	1327	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Qualifier not const qualified	Qualifier	1365	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Qualifiers not const qualified	Qualifiers	1366	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Q not const qualified	Q	1371	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	1422	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1497	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1501	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1505	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Context not const qualified	Context	1506	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	1583	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	1596	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	1601	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1610	75	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1614	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1618	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1622	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1626	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1630	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1634	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1638	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1642	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SkipResultType not const qualified	SkipResultType	1643	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	1647	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1655	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1665	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1669	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1674	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	1690	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1697	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1701	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1708	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1715	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	1727	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1734	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1741	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1745	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1756	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1760	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1769	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1770	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1771	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1772	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1773	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1774	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1775	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1776	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1777	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1778	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1779	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1780	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1781	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1782	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1783	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1784	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1785	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	1789	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1803	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	1827	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	1828	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	1829	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	1830	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	1831	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	1832	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	1833	0	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1874	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Qualifier not const qualified	Qualifier	2086	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isFirst not const qualified	isFirst	2095	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumTemplateArgs not const qualified	NumTemplateArgs	2100	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value L not const qualified	L	2103	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TI not const qualified	TI	2107	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value size not const qualified	size	2112	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Node not const qualified	Node	2260	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2291	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2294	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2297	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2300	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2310	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2313	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2316	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2319	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2327	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2330	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2333	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2336	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2344	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2347	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2350	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2353	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2356	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2383	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2386	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2389	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2396	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2399	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2402	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value size not const qualified	size	2437	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	2458	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	2465	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	2474	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	2504	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value size not const qualified	size	2559	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Syntactic not const qualified	Syntactic	2612	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FD not const qualified	FD	2629	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	2648	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SourceExpr not const qualified	SourceExpr	2719	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	2735	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value WL not const qualified	WL	2958	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	2962	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	2964	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SetParent not const qualified	SetParent	2977	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value V not const qualified	V	3018	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	3042	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	3061	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	3083	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QualifierLoc not const qualified	QualifierLoc	3094	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	3145	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	3150	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	3184	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NameFlags not const qualified	NameFlags	3191	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IsMemberRefExpr not const qualified	IsMemberRefExpr	3191	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QLoc not const qualified	QLoc	3192	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Pieces not const qualified	Pieces	3200	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	3219	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value user_data not const qualified	user_data	3232	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value gen_crash_diag not const qualified	gen_crash_diag	3233	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value excludeDeclarationsFromPCH not const qualified	excludeDeclarationsFromPCH	3250	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value displayDiagnostics not const qualified	displayDiagnostics	3251	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdxr not const qualified	CIdxr	3268	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3285	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3290	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	3290	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3295	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3301	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isEnabled not const qualified	isEnabled	3307	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3314	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3325	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	3334	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileSystemOpts not const qualified	FileSystemOpts	3339	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diags not const qualified	Diags	3341	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value AU not const qualified	AU	3343	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3361	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	3363	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	3365	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	3366	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Options not const qualified	Options	3367	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3531	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	3534	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	3535	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	3536	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	3537	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3375	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	3377	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	3378	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	3379	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PrecompilePreamble not const qualified	PrecompilePreamble	3393	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CreatePreambleOnFirstParse not const qualified	CreatePreambleOnFirstParse	3394	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TUKind not const qualified	TUKind	3397	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CacheCodeCompletionResults not const qualified	CacheCodeCompletionResults	3400	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IncludeBriefCommentsInCodeCompletion not const qualified	IncludeBriefCommentsInCodeCompletion	3402	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SingleFileParse not const qualified	SingleFileParse	3404	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ForSerialization not const qualified	ForSerialization	3405	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diags not const qualified	Diags	3416	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MB not const qualified	MB	3434	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumErrors not const qualified	NumErrors	3482	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PrecompilePreambleAfterNParses not const qualified	PrecompilePreambleAfterNParses	3487	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InvocationReporter not const qualified	InvocationReporter	3490	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3549	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	3550	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	3551	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	3551	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	3552	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_TU not const qualified	out_TU	3552	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	3562	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	3563	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	3564	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	3564	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	3565	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_TU not const qualified	out_TU	3565	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	3566	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	3575	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	3582	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	3607	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	3614	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value tu not const qualified	tu	3615	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	3616	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	3624	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ME not const qualified	ME	3629	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	3635	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ASTU not const qualified	ASTU	3640	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	3647	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ASTU not const qualified	ASTU	3652	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	3659	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value callExpr not const qualified	callExpr	3668	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value arg not const qualified	arg	3674	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	3676	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value subExpr not const qualified	subExpr	3677	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3709	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3713	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3720	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3724	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	3728	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3734	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3738	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	3743	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3749	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	3756	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value expr not const qualified	expr	3763	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	3763	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ctx not const qualified	ctx	3765	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	3775	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value val not const qualified	val	3782	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value floatStr not const qualified	floatStr	3796	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ignored not const qualified	ignored	3798	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value subExpr not const qualified	subExpr	3808	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value strRef not const qualified	strRef	3823	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value strRef not const qualified	strRef	3844	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CC not const qualified	CC	3852	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value S not const qualified	S	3859	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value strLiteral not const qualified	strLiteral	3861	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value S not const qualified	S	3885	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value strLiteral not const qualified	strLiteral	3887	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	3897	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value V not const qualified	V	3898	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value strName not const qualified	strName	3900	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Var not const qualified	Var	3915	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Field not const qualified	Field	3917	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value bodyIterator not const qualified	bodyIterator	3924	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	5758	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	3941	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	3953	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	3957	68	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	3959	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXIdx not const qualified	CXXIdx	3960	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value hadError not const qualified	hadError	3964	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	3968	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	3969	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	3970	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	3975	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	3979	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	3984	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	4001	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CTUnit not const qualified	CTUnit	4035	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	4037	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	4049	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	4054	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	4055	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	4056	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4059	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXIdx not const qualified	CXXIdx	4067	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MB not const qualified	MB	4082	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	4095	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	4096	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	4097	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	4098	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4099	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	4106	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	4112	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CTUnit not const qualified	CTUnit	4125	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4127	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4137	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CTUnit not const qualified	CTUnit	4145	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4147	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TargetInfo not const qualified	TargetInfo	4156	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	4164	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TargetInfo not const qualified	TargetInfo	4170	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	4178	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TargetInfo not const qualified	TargetInfo	4182	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SFile not const qualified	SFile	4193	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SFile not const qualified	SFile	4201	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FEnt not const qualified	FEnt	4205	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	4209	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4211	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	4215	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	4221	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	4221	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4224	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value fid not const qualified	fid	4229	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	4242	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	4243	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	4245	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	4252	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FEnt not const qualified	FEnt	4253	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	4258	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FEnt not const qualified	FEnt	4262	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file1 not const qualified	file1	4270	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file2 not const qualified	file2	4270	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FEnt1 not const qualified	FEnt1	4277	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FEnt2 not const qualified	FEnt2	4278	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SFile not const qualified	SFile	4282	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	4367	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value visitor not const qualified	visitor	4368	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	4369	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CursorVis not const qualified	CursorVis	4370	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	4399	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	4399	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	4400	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value block not const qualified	block	4401	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	4407	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value block not const qualified	block	4408	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value S not const qualified	S	4442	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Storage not const qualified	Storage	4508	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	4546	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	4610	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	4612	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	4705	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	4714	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	4719	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	4727	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	4733	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	4741	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	4747	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Policy not const qualified	Policy	4753	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Policy not const qualified	Policy	4759	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Property not const qualified	Property	4760	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value P not const qualified	P	4764	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Policy not const qualified	Policy	4824	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Property not const qualified	Property	4825	68	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Value not const qualified	Value	4826	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	4915	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cxPolicy not const qualified	cxPolicy	4915	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	4924	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value UserPolicy not const qualified	UserPolicy	4926	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	4936	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	4949	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	4955	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	4971	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Params not const qualified	Params	4975	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	4976	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Param not const qualified	Param	4980	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TTP not const qualified	TTP	4988	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NTTP not const qualified	NTTP	4990	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	5007	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Kind not const qualified	Kind	5018	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	5505	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	5513	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	5514	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	5515	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StartLoc not const qualified	StartLoc	5552	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	5613	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	5615	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	5619	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SLoc not const qualified	SLoc	5622	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	5623	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	5625	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SearchFile not const qualified	SearchFile	5626	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SearchLine not const qualified	SearchLine	5627	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SearchColumn not const qualified	SearchColumn	5627	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultFile not const qualified	ResultFile	5628	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultLine not const qualified	ResultLine	5629	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultColumn not const qualified	ResultColumn	5629	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SearchFileName not const qualified	SearchFileName	5630	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultFileName not const qualified	ResultFileName	5630	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value KindSpelling not const qualified	KindSpelling	5630	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value USR not const qualified	USR	5630	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultLoc not const qualified	ResultLoc	5632	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Definition not const qualified	Definition	5653	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DefinitionLoc not const qualified	DefinitionLoc	5655	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DefinitionKindSpelling not const qualified	DefinitionKindSpelling	5656	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DefinitionFile not const qualified	DefinitionFile	5658	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DefinitionLine not const qualified	DefinitionLine	5659	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DefinitionColumn not const qualified	DefinitionColumn	5659	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DefinitionFileName not const qualified	DefinitionFileName	5662	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	6410	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	6189	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ClassImpl not const qualified	ClassImpl	6348	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	5679	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Y not const qualified	Y	5679	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	5695	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5708	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	5713	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5734	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5742	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	5746	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SLoc not const qualified	SLoc	5900	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CursorVis not const qualified	CursorVis	5918	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value label not const qualified	label	6115	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	6436	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	6440	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Storage not const qualified	Storage	6444	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value S not const qualified	S	6448	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	6459	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Storage not const qualified	Storage	6467	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value startLine not const qualified	startLine	6489	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value startColumn not const qualified	startColumn	6490	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value endLine not const qualified	endLine	6491	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value endColumn not const qualified	endColumn	6492	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Body not const qualified	Body	6495	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	6497	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NameFlags not const qualified	NameFlags	6507	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PieceIndex not const qualified	PieceIndex	6508	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value fn not const qualified	fn	6561	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value user_data not const qualified	user_data	6561	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value stack_size not const qualified	stack_size	6562	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXTok not const qualified	CXTok	6578	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6582	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	6602	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	6608	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	6612	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6624	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXTok not const qualified	CXTok	6624	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	6626	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6638	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXTok not const qualified	CXTok	6638	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	6640	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	6652	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	6652	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXTokens not const qualified	CXTokens	6653	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SourceMgr not const qualified	SourceMgr	6654	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BeginLocInfo not const qualified	BeginLocInfo	6655	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndLocInfo not const qualified	EndLocInfo	6657	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buffer not const qualified	Buffer	6666	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Lex not const qualified	Lex	6671	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Tok not const qualified	Tok	6678	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value II not const qualified	II	6700	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6724	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	6725	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	6730	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Begin not const qualified	Begin	6738	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	6741	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXTokens not const qualified	CXTokens	6747	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Token not const qualified	Token	6754	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6760	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	6760	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	6762	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	6772	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	6782	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6798	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Tokens not const qualified	Tokens	6799	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumTokens not const qualified	NumTokens	6799	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7287	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	7288	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	7289	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7293	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	7294	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value tokI not const qualified	tokI	6850	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value tokI not const qualified	tokI	6853	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value tokI not const qualified	tokI	6856	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	6879	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	6908	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	6922	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	6937	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value actions not const qualified	actions	6938	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	6952	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	6969	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value compResult not const qualified	compResult	6983	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range not const qualified	range	6984	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TokLoc not const qualified	TokLoc	6991	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value updateC not const qualified	updateC	7004	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value compResult not const qualified	compResult	7005	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range not const qualified	range	7006	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TokLoc not const qualified	TokLoc	7023	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7041	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	7041	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursorRange not const qualified	cursorRange	7042	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SavedTokIdx not const qualified	SavedTokIdx	7100	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TokLoc not const qualified	TokLoc	7107	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TokLoc not const qualified	TokLoc	7122	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BeforeReachingCursorIdx not const qualified	BeforeReachingCursorIdx	7156	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7202	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursorRange not const qualified	cursorRange	7213	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	7248	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StartTokenIndex not const qualified	StartTokenIndex	7248	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7315	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	7315	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value macroRange not const qualified	macroRange	7319	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value tokLoc not const qualified	tokLoc	7333	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value tokI not const qualified	tokI	7356	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value tokI not const qualified	tokI	7360	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value loc not const qualified	loc	7360	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7370	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	7370	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	7371	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Lex not const qualified	Lex	7378	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Tok not const qualified	Tok	7378	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NextIdx not const qualified	NextIdx	7379	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumTokens not const qualified	NumTokens	7379	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	7388	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RegionOfInterest not const qualified	RegionOfInterest	7389	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Tokens not const qualified	Tokens	7391	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumTokens not const qualified	NumTokens	7392	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	7393	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SourceMgr not const qualified	SourceMgr	7396	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BeginLocInfo not const qualified	BeginLocInfo	7397	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndLocInfo not const qualified	EndLocInfo	7399	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buffer not const qualified	Buffer	7405	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BeginLoc not const qualified	BeginLoc	7436	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MappedTokLoc not const qualified	MappedTokLoc	7448	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SaveLoc not const qualified	SaveLoc	7463	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndLoc not const qualified	EndLoc	7476	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXIdx not const qualified	CXXIdx	7495	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RegionOfInterest not const qualified	RegionOfInterest	7500	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	7514	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	7515	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MacroArgMarker not const qualified	MacroArgMarker	7525	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value II not const qualified	II	7552	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value II not const qualified	II	7578	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	7600	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Tokens not const qualified	Tokens	7601	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumTokens not const qualified	NumTokens	7601	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursors not const qualified	Cursors	7602	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	7604	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	7608	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	7612	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value bloc not const qualified	bloc	7614	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value eloc not const qualified	eloc	7615	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	7620	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	7624	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	7633	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7643	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7666	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7757	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value In not const qualified	In	7765	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Minor not const qualified	Minor	7772	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Subminor not const qualified	Subminor	7778	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value A not const qualified	A	7790	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7877	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value availability_size not const qualified	availability_size	7882	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value availability not const qualified	availability	7922	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	7934	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FunTmpl not const qualified	FunTmpl	7958	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ClassTmpl not const qualified	ClassTmpl	7962	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	7969	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	8037	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8045	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value reserved not const qualified	reserved	8045	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8075	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8087	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8099	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8123	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8136	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8149	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value language not const qualified	language	8150	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value definedIn not const qualified	definedIn	8150	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isGenerated not const qualified	isGenerated	8151	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8169	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8182	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Context not const qualified	Context	8187	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8197	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8216	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8226	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value File not const qualified	File	8226	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	8228	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FE not const qualified	FE	8233	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	8235	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXMod not const qualified	CXMod	8242	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Mod not const qualified	Mod	8245	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXMod not const qualified	CXMod	8249	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Mod not const qualified	Mod	8252	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXMod not const qualified	CXMod	8256	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXMod not const qualified	CXMod	8263	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXMod not const qualified	CXMod	8270	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Mod not const qualified	Mod	8273	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8277	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXMod not const qualified	CXMod	8278	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	8280	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Mod not const qualified	Mod	8285	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TopHeaders not const qualified	TopHeaders	8287	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8291	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXMod not const qualified	CXMod	8292	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Index not const qualified	Index	8292	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	8294	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Mod not const qualified	Mod	8299	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TopHeaders not const qualified	TopHeaders	8302	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8313	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8323	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8333	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8343	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8354	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8364	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8374	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8384	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8394	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8404	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8414	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8425	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Enum not const qualified	Enum	8430	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	8438	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value entries not const qualified	entries	8454	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value k not const qualified	k	8455	73	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value amount not const qualified	amount	8456	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value entry not const qualified	entry	8457	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value kind not const qualified	kind	8461	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8510	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	8512	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value usage not const qualified	usage	8513	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value astUnit not const qualified	astUnit	8517	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value astContext not const qualified	astContext	8519	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value pRec not const qualified	pRec	8586	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value usage not const qualified	usage	8596	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value usage not const qualified	usage	8603	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8608	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	8608	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	8614	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value astUnit not const qualified	astUnit	8621	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ppRec not const qualified	ppRec	8622	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value sm not const qualified	sm	8627	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value fileEntry not const qualified	fileEntry	8628	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value wantedFileID not const qualified	wantedFileID	8629	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isMainFile not const qualified	isMainFile	8630	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ei not const qualified	ei	8634	75	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ei not const qualified	ei	8644	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8650	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	8656	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value astUnit not const qualified	astUnit	8660	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ppRec not const qualified	ppRec	8661	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ei not const qualified	ei	8671	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ranges not const qualified	ranges	8677	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8684	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Usage not const qualified	Usage	8685	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	8703	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Fn not const qualified	Fn	8703	75	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Size not const qualified	Size	8704	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Value not const qualified	Value	8716	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Msg not const qualified	Msg	8739	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MacroDefLoc not const qualified	MacroDefLoc	8753	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8754	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	8760	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MD not const qualified	MD	8762	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8775	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8787	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DefRange not const qualified	DefRange	8795	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	8797	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	8800	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PPRec not const qualified	PPRec	8807	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InnerMD not const qualified	InnerMD	8819	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	8827	76	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8828	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	8834	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Tok not const qualified	Tok	8839	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	8850	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	8852	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	8869	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursorName not const qualified	cursorName	8870	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	8876	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value File not const qualified	File	8877	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Line not const qualified	Line	8878	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Column not const qualified	Column	8878	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileName not const qualified	FileName	8880	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range not const qualified	range	8886	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BLoc not const qualified	BLoc	8887	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ELoc not const qualified	ELoc	8888	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BFile not const qualified	BFile	8890	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BLine not const qualified	BLine	8891	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BColumn not const qualified	BColumn	8891	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EFile not const qualified	EFile	8894	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ELine not const qualified	ELine	8895	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EColumn not const qualified	EColumn	8895	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BFileName not const qualified	BFileName	8898	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EFileName not const qualified	EFileName	8903	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	8914	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value sBeginTR not const qualified	sBeginTR	8929	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	AU	87	35	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SM	106	57	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SM	122	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SrcMgr	6030	66	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	PPRec	234	66	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Visitor	235	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	291	37	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	DC	291	53	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	PPRec	448	67	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	B	586	46	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	DC	620	50	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	676	66	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	680	70	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	687	54	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	694	50	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	701	42	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	706	75	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	738	75	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	754	68	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	764	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	DD	770	56	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ND	790	48	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	X	801	65	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Y	802	65	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ND	806	52	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	893	46	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	906	42	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	916	74	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	927	68	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	937	62	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	947	76	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	958	62	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ND	970	56	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SM	986	53	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Decls	987	63	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1005	62	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ND	1068	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	PID	1085	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	PD	1098	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	typeParamList	1136	62	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1149	62	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1179	52	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1183	68	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1192	72	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	PD	1206	68	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1214	54	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1218	64	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1228	46	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1241	64	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1251	76	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1262	76	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1271	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1280	48	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1497	58	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1787	54	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	1803	42	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	TI	2107	48	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Node	2260	45	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	WL	2958	53	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	WL	2971	56	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	user_data	3232	38	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	3366	64	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	3535	49	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	3551	26	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	out_TU	3552	41	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	3564	26	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	out_TU	3565	41	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	callExpr	3668	47	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	4097	55	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	user_data	6561	52	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	CXXUnit	6652	31	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Tokens	6799	34	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Lex	7378	27	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Tok	7378	39	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Tokens	7391	48	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	CXXUnit	7492	68	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Cursors	7494	47	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Tokens	7601	35	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	AvailabilityAttrs	7788	41	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	availability	7922	65	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	entries	8454	65	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ranges	8677	53	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	CRC	8703	43	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Unit	8731	42	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration RangeCompare.	RangeCompare	106	29	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration LocationCompare.	LocationCompare	122	29	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getRawCursorExtent.	getRawCursorExtent	171	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getFullCursorExtent.	getFullCursorExtent	172	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration visitPreprocessedEntitiesInRange.	visitPreprocessedEntitiesInRange	233	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration isInLexicalContext.	isInLexicalContext	291	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration HasTrailingReturnType.	HasTrailingReturnType	790	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CompareCXXCtorInitializers.	CompareCXXCtorInitializers	801	11	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration addRangedDeclsInContainer.	addRangedDeclsInContainer	985	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration StmtVisit.	StmtVisit	1827	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration MemberExprParts.	MemberExprParts	1828	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration DeclRefExprParts.	DeclRefExprParts	1829	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration OverloadExprParts.	OverloadExprParts	1830	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration SizeOfPackExprParts.	SizeOfPackExprParts	1831	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration LambdaExprParts.	LambdaExprParts	1832	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration PostChildrenVisit.	PostChildrenVisit	1833	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration ExplicitTemplateArgsVisit.	ExplicitTemplateArgsVisit	1836	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration DeclVisit.	DeclVisit	1852	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration TypeLocVisit.	TypeLocVisit	1863	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration LabelRefVisit.	LabelRefVisit	1879	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration NestedNameSpecifierLocVisit.	NestedNameSpecifierLocVisit	1895	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration DeclarationNameInfoVisit.	DeclarationNameInfoVisit	1914	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration MemberRefVisit.	MemberRefVisit	1937	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration EnqueueVisitor.	EnqueueVisitor	1952	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration OMPClauseEnqueue.	OMPClauseEnqueue	2124	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration RefNamePieces.	RefNamePieces	3190	36	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration buildPieces.	buildPieces	3191	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration fatal_error_handler.	fatal_error_handler	3232	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration RegisterFatalErrorHandler.	RegisterFatalErrorHandler	3241	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration RegisterFatalErrorHandlerOnce.	RegisterFatalErrorHandlerOnce	3248	54	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_createIndex.	clang_createIndex	3250	8	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeIndex.	clang_disposeIndex	3285	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXIndex_setGlobalOptions.	clang_CXIndex_setGlobalOptions	3290	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXIndex_getGlobalOptions.	clang_CXIndex_getGlobalOptions	3295	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXIndex_setInvocationEmissionPathOption.	clang_CXIndex_setInvocationEmissionPathOption	3301	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_toggleCrashRecovery.	clang_toggleCrashRecovery	3307	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_createTranslationUnit.	clang_createTranslationUnit	3314	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_createTranslationUnit2.	clang_createTranslationUnit2	3325	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_defaultEditingTranslationUnitOptions.	clang_defaultEditingTranslationUnitOptions	3355	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_createTranslationUnitFromSourceFile.	clang_createTranslationUnitFromSourceFile	3361	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_parseTranslationUnit_Impl.	clang_parseTranslationUnit_Impl	3375	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_parseTranslationUnit.	clang_parseTranslationUnit	3531	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_parseTranslationUnit2.	clang_parseTranslationUnit2	3548	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_parseTranslationUnit2FullArgv.	clang_parseTranslationUnit2FullArgv	3561	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getObjCEncoding.	clang_Type_getObjCEncoding	3614	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getMacroIdentifier.	getMacroIdentifier	3624	29	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isMacroFunctionLike.	clang_Cursor_isMacroFunctionLike	3635	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isMacroBuiltin.	clang_Cursor_isMacroBuiltin	3647	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isFunctionInlined.	clang_Cursor_isFunctionInlined	3659	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getCFSTR_value.	getCFSTR_value	3668	22	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration ExprEvalResult.	ExprEvalResult	3692	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_dispose.	clang_EvalResult_dispose	3709	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_getKind.	clang_EvalResult_getKind	3713	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_getAsInt.	clang_EvalResult_getAsInt	3720	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_getAsLongLong.	clang_EvalResult_getAsLongLong	3724	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_isUnsignedInt.	clang_EvalResult_isUnsignedInt	3734	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_getAsUnsigned.	clang_EvalResult_getAsUnsigned	3738	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_getAsDouble.	clang_EvalResult_getAsDouble	3749	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EvalResult_getAsStr.	clang_EvalResult_getAsStr	3756	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration evaluateExpr.	evaluateExpr	3763	29	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration evaluateDeclExpr.	evaluateDeclExpr	3912	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration evaluateCompoundStmtExpr.	evaluateCompoundStmtExpr	3922	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_Evaluate.	clang_Cursor_Evaluate	3931	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_hasAttrs.	clang_Cursor_hasAttrs	3941	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_defaultSaveOptions.	clang_defaultSaveOptions	3953	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_saveTranslationUnit_Impl.	clang_saveTranslationUnit_Impl	3957	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_saveTranslationUnit.	clang_saveTranslationUnit	3968	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeTranslationUnit.	clang_disposeTranslationUnit	4018	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_suspendTranslationUnit.	clang_suspendTranslationUnit	4035	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_defaultReparseOptions.	clang_defaultReparseOptions	4049	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_reparseTranslationUnit_Impl.	clang_reparseTranslationUnit_Impl	4054	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_reparseTranslationUnit.	clang_reparseTranslationUnit	4095	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTranslationUnitSpelling.	clang_getTranslationUnitSpelling	4125	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTranslationUnitCursor.	clang_getTranslationUnitCursor	4135	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTranslationUnitTargetInfo.	clang_getTranslationUnitTargetInfo	4145	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TargetInfo_getTriple.	clang_TargetInfo_getTriple	4156	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TargetInfo_getPointerWidth.	clang_TargetInfo_getPointerWidth	4170	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TargetInfo_dispose.	clang_TargetInfo_dispose	4182	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFileName.	clang_getFileName	4193	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFileTime.	clang_getFileTime	4201	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFile.	clang_getFile	4209	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFileContents.	clang_getFileContents	4221	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isFileMultipleIncludeGuarded.	clang_isFileMultipleIncludeGuarded	4242	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFileUniqueID.	clang_getFileUniqueID	4258	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_File_isEqual.	clang_File_isEqual	4270	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_File_tryGetRealPathName.	clang_File_tryGetRealPathName	4282	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getDeclFromExpr.	getDeclFromExpr	4294	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getLocationFromExpr.	getLocationFromExpr	4345	22	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration _CXChildVisitResult.	_CXChildVisitResult	4390	15	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXCursorVisitorBlock.	CXCursorVisitorBlock	4397	3	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration visitWithBlock.	visitWithBlock	4399	31	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_visitChildrenWithBlock.	clang_visitChildrenWithBlock	4407	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getDeclSpelling.	getDeclSpelling	4412	16	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorSpelling.	clang_getCursorSpelling	4449	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getSpellingNameRange.	clang_Cursor_getSpellingNameRange	4610	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getMangling.	clang_Cursor_getMangling	4705	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getCXXManglings.	clang_Cursor_getCXXManglings	4719	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getObjCManglings.	clang_Cursor_getObjCManglings	4733	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorPrintingPolicy.	clang_getCursorPrintingPolicy	4747	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_PrintingPolicy_dispose.	clang_PrintingPolicy_dispose	4753	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_PrintingPolicy_getProperty.	clang_PrintingPolicy_getProperty	4759	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_PrintingPolicy_setProperty.	clang_PrintingPolicy_setProperty	4824	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorPrettyPrinted.	clang_getCursorPrettyPrinted	4915	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorDisplayName.	clang_getCursorDisplayName	4936	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorKindSpelling.	clang_getCursorKindSpelling	5018	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetCursorData.	GetCursorData	5498	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetCursorVisitor.	GetCursorVisitor	5513	31	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursor.	clang_getCursor	5613	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNullCursor.	clang_getNullCursor	5675	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_equalCursors.	clang_equalCursors	5679	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_hashCursor.	clang_hashCursor	5695	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isInvalid.	clang_isInvalid	5704	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isDeclaration.	clang_isDeclaration	5708	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isInvalidDeclaration.	clang_isInvalidDeclaration	5713	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isReference.	clang_isReference	5722	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isExpression.	clang_isExpression	5726	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isStatement.	clang_isStatement	5730	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isAttribute.	clang_isAttribute	5734	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isTranslationUnit.	clang_isTranslationUnit	5738	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isPreprocessing.	clang_isPreprocessing	5742	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isUnexposed.	clang_isUnexposed	5746	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorKind.	clang_getCursorKind	5758	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorLocation.	clang_getCursorLocation	5762	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorExtent.	clang_getCursorExtent	6069	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorReferenced.	clang_getCursorReferenced	6077	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorDefinition.	clang_getCursorDefinition	6189	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isCursorDefinition.	clang_isCursorDefinition	6410	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCanonicalCursor.	clang_getCanonicalCursor	6417	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getObjCSelectorIndex.	clang_Cursor_getObjCSelectorIndex	6436	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNumOverloadedDecls.	clang_getNumOverloadedDecls	6440	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getOverloadedDecl.	clang_getOverloadedDecl	6459	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDefinitionSpellingAndExtent.	clang_getDefinitionSpellingAndExtent	6486	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorReferenceNameRange.	clang_getCursorReferenceNameRange	6507	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_enableStackTraces.	clang_enableStackTraces	6556	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_executeOnThread.	clang_executeOnThread	6561	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTokenKind.	clang_getTokenKind	6578	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTokenSpelling.	clang_getTokenSpelling	6582	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTokenLocation.	clang_getTokenLocation	6624	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTokenExtent.	clang_getTokenExtent	6638	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getTokens.	getTokens	6652	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getToken.	clang_getToken	6724	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_tokenize.	clang_tokenize	6760	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeTokens.	clang_disposeTokens	6798	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration AnnotateTokensVisitor.	AnnotateTokensVisitor	6807	31	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration AnnotateTokensPostChildrenVisitor.	AnnotateTokensPostChildrenVisitor	6810	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration AnnotateTokensWorker.	AnnotateTokensWorker	6814	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetSubscriptOrCallOperator.	GetSubscriptOrCallOperator	6922	27	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration updateCursorAnnotation.	updateCursorAnnotation	6969	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration MarkMacroArgTokensVisitor.	MarkMacroArgTokensVisitor	7304	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration MarkMacroArgTokensVisitorDelegate.	MarkMacroArgTokensVisitorDelegate	7370	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration lexNext.	lexNext	7378	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration annotatePreprocessorTokens.	annotatePreprocessorTokens	7388	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_annotateTokensImpl.	clang_annotateTokensImpl	7492	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_annotateTokens.	clang_annotateTokens	7600	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorLinkage.	clang_getCursorLinkage	7643	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorVisibility.	clang_getCursorVisibility	7666	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getDeclLanguage.	getDeclLanguage	7685	22	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getCursorAvailabilityForDecl.	getCursorAvailabilityForDecl	7735	26	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorAvailability.	clang_getCursorAvailability	7757	24	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration convertVersion.	convertVersion	7765	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getCursorPlatformAvailabilityForDecl.	getCursorPlatformAvailabilityForDecl	7785	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration Ctx.	Ctx	7834	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration It.	It	7835	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorPlatformAvailability.	clang_getCursorPlatformAvailability	7877	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeCXPlatformAvailability.	clang_disposeCXPlatformAvailability	7922	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorLanguage.	clang_getCursorLanguage	7927	15	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorTLSKind.	clang_getCursorTLSKind	7934	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration maybeGetTemplateCursor.	maybeGetTemplateCursor	7953	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getStorageClass.	clang_Cursor_getStorageClass	7969	21	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorSemanticParent.	clang_getCursorSemanticParent	8000	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorLexicalParent.	clang_getCursorLexicalParent	8020	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getIncludedFile.	clang_getIncludedFile	8037	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getObjCPropertyAttributes.	clang_Cursor_getObjCPropertyAttributes	8045	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getObjCPropertyGetterName.	clang_Cursor_getObjCPropertyGetterName	8075	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getObjCPropertySetterName.	clang_Cursor_getObjCPropertySetterName	8087	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getObjCDeclQualifiers.	clang_Cursor_getObjCDeclQualifiers	8099	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isObjCOptional.	clang_Cursor_isObjCOptional	8123	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isVariadic.	clang_Cursor_isVariadic	8136	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isExternalSymbol.	clang_Cursor_isExternalSymbol	8149	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getCommentRange.	clang_Cursor_getCommentRange	8169	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getRawCommentText.	clang_Cursor_getRawCommentText	8182	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getBriefCommentText.	clang_Cursor_getBriefCommentText	8197	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getModule.	clang_Cursor_getModule	8216	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getModuleForFile.	clang_getModuleForFile	8226	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Module_getASTFile.	clang_Module_getASTFile	8242	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Module_getParent.	clang_Module_getParent	8249	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Module_getName.	clang_Module_getName	8256	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Module_getFullName.	clang_Module_getFullName	8263	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Module_isSystem.	clang_Module_isSystem	8270	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Module_getNumTopLevelHeaders.	clang_Module_getNumTopLevelHeaders	8277	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Module_getTopLevelHeader.	clang_Module_getTopLevelHeader	8291	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXConstructor_isDefaultConstructor.	clang_CXXConstructor_isDefaultConstructor	8313	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXConstructor_isCopyConstructor.	clang_CXXConstructor_isCopyConstructor	8323	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXConstructor_isMoveConstructor.	clang_CXXConstructor_isMoveConstructor	8333	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXConstructor_isConvertingConstructor.	clang_CXXConstructor_isConvertingConstructor	8343	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXField_isMutable.	clang_CXXField_isMutable	8354	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXMethod_isPureVirtual.	clang_CXXMethod_isPureVirtual	8364	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXMethod_isConst.	clang_CXXMethod_isConst	8374	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXMethod_isDefaulted.	clang_CXXMethod_isDefaulted	8384	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXMethod_isStatic.	clang_CXXMethod_isStatic	8394	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXMethod_isVirtual.	clang_CXXMethod_isVirtual	8404	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXXRecord_isAbstract.	clang_CXXRecord_isAbstract	8414	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_EnumDecl_isScoped.	clang_EnumDecl_isScoped	8425	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getIBOutletCollectionType.	clang_getIBOutletCollectionType	8438	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration MemUsageEntries.	MemUsageEntries	8452	44	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration createCXTUResourceUsageEntry.	createCXTUResourceUsageEntry	8454	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTUResourceUsageName.	clang_getTUResourceUsageName	8461	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCXTUResourceUsage.	clang_getCXTUResourceUsage	8510	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeCXTUResourceUsage.	clang_disposeCXTUResourceUsage	8603	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getSkippedRanges.	clang_getSkippedRanges	8608	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getAllSkippedRanges.	clang_getAllSkippedRanges	8650	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeSourceRangeList.	clang_disposeSourceRangeList	8677	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration SafetyStackThreadSize.	SafetyStackThreadSize	8699	16	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getClangVersion.	clang_getClangVersion	8846	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration LoggingMutex.	LoggingMutex	8924	45	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CIndex.cpp.	CIndex.cpp	65	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndex.cpp.	CIndex.cpp	66	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndex.cpp.	CIndex.cpp	67	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndex.cpp.	CIndex.cpp	68	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Multiple declarations for an identifier straddle using-declaration: CIndex.cpp.	clang	65	16	MISRA08_7-3-5	7-3-5 Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier
      Violation: function "visitPreprocessedEntitiesInRange" is indirectly recursive through "clang::cxcursor::CursorVisitor::visitPreprocessedEntitiesInRegion", which is unsafe.	visitPreprocessedEntitiesInRange	413	15	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "getDeclFromExpr" is directly recursive, which is unsafe.	getDeclFromExpr	4296	11	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "getLocationFromExpr" is directly recursive, which is unsafe.	getLocationFromExpr	4347	11	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang_getCursorDefinition" is directly recursive, which is unsafe.	clang_getCursorDefinition	6334	11	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "getCursorAvailabilityForDecl" is directly recursive, which is unsafe.	getCursorAvailabilityForDecl	7743	13	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "getCursorPlatformAvailabilityForDecl" is directly recursive, which is unsafe.	getCursorPlatformAvailabilityForDecl	7821	13	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxindex::checkForMacroInMacroDefinition" is directly recursive, which is unsafe.	checkForMacroInMacroDefinition	8843	9	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxcursor::CursorVisitor::Visit" is indirectly recursive through "clang::cxcursor::CursorVisitor::VisitAttributes", which is unsafe.	Visit	1807	8	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxcursor::CursorVisitor::visitPreprocessedEntitiesInRegion" is indirectly recursive through "clang::cxcursor::CursorVisitor::VisitChildren", which is unsafe.	visitPreprocessedEntitiesInRegion	545	8	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxcursor::CursorVisitor::visitPreprocessedEntities" is indirectly recursive through "visitPreprocessedEntitiesInRange", which is unsafe.	visitPreprocessedEntities	248	17	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxcursor::CursorVisitor::VisitChildren" is indirectly recursive through "clang::cxcursor::CursorVisitor::Visit", which is unsafe.	VisitChildren	222	15	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxcursor::CursorVisitor::VisitDeclContext" is indirectly recursive through "clang::cxcursor::CursorVisitor::VisitChildren", which is unsafe.	VisitDeclContext	537	19	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxcursor::CursorVisitor::handleDeclForVisitation" is indirectly recursive through "clang::cxcursor::CursorVisitor::VisitChildren", which is unsafe.	handleDeclForVisitation	532	37	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxcursor::CursorVisitor::VisitAttributes" is indirectly recursive through "clang::cxcursor::CursorVisitor::VisitChildren", which is unsafe.	VisitAttributes	503	11	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Init-declarator-list contains more than one init-declarator: SearchLine.	SearchLine	5627	13	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: ResultLine.	ResultLine	5629	13	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: SearchFileName.	SearchFileName	5630	13	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: ResultFileName.	ResultFileName	5630	29	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: KindSpelling.	KindSpelling	5630	45	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: DefinitionLine.	DefinitionLine	5659	15	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: Line.	Line	8878	11	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: BLine.	BLine	8891	11	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: ELine.	ELine	8895	11	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Function identifier dyn_cast used incorrectly	dyn_cast	793	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier ParseTranslationUnitImpl used incorrectly	ParseTranslationUnitImpl	3584	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	3661	27	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	3807	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	3813	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3819	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	3834	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3840	13	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	3915	18	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	3917	25	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	3925	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3934	41	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier SaveTranslationUnitImpl used incorrectly	SaveTranslationUnitImpl	4003	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier ReparseTranslationUnitImpl used incorrectly	ReparseTranslationUnitImpl	4114	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4295	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4298	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4300	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4302	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4304	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4315	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4317	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4321	27	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4323	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4327	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4329	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4332	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4335	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4337	41	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4338	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4339	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4346	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4349	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4351	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4353	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4355	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4357	41	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4359	43	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier visitWithBlock used incorrectly	visitWithBlock	4409	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4416	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4419	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4423	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4430	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4433	41	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4439	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4510	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4541	41	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	4544	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4560	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	4581	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	4586	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	4595	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4620	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4631	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4641	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4653	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4656	16	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4664	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	4679	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4711	14	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4711	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier CGNameGen used incorrectly	CGNameGen	4716	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4724	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4724	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier CGNameGen used incorrectly	CGNameGen	4729	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4738	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	4738	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier CGNameGen used incorrectly	CGNameGen	4743	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4945	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4948	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4970	47	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4988	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	4991	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	5002	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	5528	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	5533	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	5543	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	5551	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	5564	16	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	5596	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	5886	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	5892	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6019	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6041	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6044	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6058	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6086	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6089	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	6106	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	6114	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6270	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6274	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6281	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6291	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6301	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6308	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6314	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6316	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6323	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6324	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6329	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6335	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6339	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6347	25	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6359	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6364	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6374	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6390	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6397	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6402	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6422	47	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6426	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6453	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6476	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	6480	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6494	27	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6495	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6513	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6519	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6529	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6531	40	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6534	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6927	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier MarkMacroArgTokensVisitorDelegate used incorrectly	MarkMacroArgTokensVisitorDelegate	7526	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	7554	14	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier StringSwitch used incorrectly	StringSwitch	7579	18	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier AnnotateTokensImpl used incorrectly	AnnotateTokensImpl	7634	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	7648	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	7671	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	7736	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	7736	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7742	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	7744	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7791	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7802	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7813	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7820	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	7822	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7936	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7957	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7961	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7973	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	7975	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	8007	49	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	8027	49	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8050	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8079	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8091	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8105	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8107	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8128	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8130	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8141	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	8143	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8219	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8319	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8329	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8339	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8349	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8359	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8370	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8380	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8390	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8400	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8410	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8419	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	8430	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	8443	4	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier GetCursorVisitor used incorrectly	GetCursorVisitor	5918	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	348	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	361	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	458	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	465	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	472	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	561	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	648	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	656	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	661	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	824	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	835	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	853	42	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1105	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1115	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1344	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1346	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1349	40	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	2981	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	2987	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3002	18	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3007	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3009	45	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3018	41	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3025	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3031	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3037	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3058	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3081	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3092	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3106	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	3108	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3109	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	3116	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3117	42	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	3131	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1927	13	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1929	13	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1931	13	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1933	13	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	2628	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier fatal_error_handler used incorrectly	fatal_error_handler	3243	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier AnnotateTokensVisitor used incorrectly	AnnotateTokensVisitor	6870	18	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier AnnotateTokensPostChildrenVisitor used incorrectly	AnnotateTokensPostChildrenVisitor	6875	18	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6948	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	6950	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	7053	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	7060	14	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	7076	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Data member PostChildrenInfos not defined in constructor	AnnotateTokensWorker	6865	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Member function end can be made const, but is not const	end	1848	29	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitCXXDefaultArgExpr can be made static, but is not static	VisitCXXDefaultArgExpr	1964	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPDefaultClause can be made static, but is not static	VisitOMPDefaultClause	2179	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPProcBindClause can be made static, but is not static	VisitOMPProcBindClause	2181	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPNowaitClause can be made static, but is not static	VisitOMPNowaitClause	2192	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPUntiedClause can be made static, but is not static	VisitOMPUntiedClause	2194	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPMergeableClause can be made static, but is not static	VisitOMPMergeableClause	2196	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPReadClause can be made static, but is not static	VisitOMPReadClause	2198	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPWriteClause can be made static, but is not static	VisitOMPWriteClause	2200	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPUpdateClause can be made static, but is not static	VisitOMPUpdateClause	2202	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPCaptureClause can be made static, but is not static	VisitOMPCaptureClause	2204	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPSeqCstClause can be made static, but is not static	VisitOMPSeqCstClause	2206	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPThreadsClause can be made static, but is not static	VisitOMPThreadsClause	2208	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPSIMDClause can be made static, but is not static	VisitOMPSIMDClause	2210	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPNogroupClause can be made static, but is not static	VisitOMPNogroupClause	2212	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPUnifiedAddressClause can be made static, but is not static	VisitOMPUnifiedAddressClause	2214	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPUnifiedSharedMemoryClause can be made static, but is not static	VisitOMPUnifiedSharedMemoryClause	2217	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPReverseOffloadClause can be made static, but is not static	VisitOMPReverseOffloadClause	2220	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPDynamicAllocatorsClause can be made static, but is not static	VisitOMPDynamicAllocatorsClause	2223	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPAtomicDefaultMemOrderClause can be made static, but is not static	VisitOMPAtomicDefaultMemOrderClause	2226	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitOMPDefaultmapClause can be made static, but is not static	VisitOMPDefaultmapClause	2420	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function AdvanceToken can be made static, but is not static	AdvanceToken	6849	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Identifier is typographically ambiguous to Diag	diag	93	12	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CIndexCodeCompletion.cpp					
      Static Identifier 'Optional' reused	Optional	181	34	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: clang_getCompletionChunkKind defined but not called.	clang_getCompletionChunkKind	57	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionChunkText defined but not called.	clang_getCompletionChunkText	111	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionChunkCompletionString defined but not called.	clang_getCompletionChunkCompletionString	150	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getNumCompletionChunks defined but not called.	clang_getNumCompletionChunks	187	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionPriority defined but not called.	clang_getCompletionPriority	192	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionAvailability defined but not called.	clang_getCompletionAvailability	198	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionNumAnnotations defined but not called.	clang_getCompletionNumAnnotations	204	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionAnnotation defined but not called.	clang_getCompletionAnnotation	210	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionParent defined but not called.	clang_getCompletionParent	218	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionBriefComment defined but not called.	clang_getCompletionBriefComment	231	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionNumFixIts defined but not called.	clang_getCompletionNumFixIts	312	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCompletionFixIt defined but not called.	clang_getCompletionFixIt	322	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_codeCompleteAt defined but not called.	clang_codeCompleteAt	853	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_defaultCodeCompleteOptions defined but not called.	clang_defaultCodeCompleteOptions	887	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeCodeCompleteResults defined but not called.	clang_disposeCodeCompleteResults	891	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_codeCompleteGetNumDiagnostics defined but not called.	clang_codeCompleteGetNumDiagnostics	901	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_codeCompleteGetDiagnostic defined but not called.	clang_codeCompleteGetDiagnostic	911	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_codeCompleteGetContexts defined but not called.	clang_codeCompleteGetContexts	926	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_codeCompleteGetContainerKind defined but not called.	clang_codeCompleteGetContainerKind	935	18	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_codeCompleteGetContainerUSR defined but not called.	clang_codeCompleteGetContainerUSR	950	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_codeCompleteGetObjCSelector defined but not called.	clang_codeCompleteGetObjCSelector	960	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_sortCodeCompletionResults defined but not called.	clang_sortCodeCompletionResults	1041	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AllocatedCXCodeCompleteResults defined but not called.	AllocatedCXCodeCompleteResults	357	32	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: ProcessCodeCompleteResults defined but not called.	ProcessCodeCompleteResults	576	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: ProcessOverloadCandidates defined but not called.	ProcessOverloadCandidates	657	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator() defined but not called.	operator()	1014	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter options in Non Virtual Functions	options	859	53	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter OpenParLoc in Non Virtual Functions	OpenParLoc	660	50	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Variable	vector	307	7	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	InvocationReporter	757	29	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Type declaration OrderCompletionResults	OrderCompletionResults	1013	9	MISRA08_0-1-5	0-1-5 A project shall not contain unused type declarations
      Constructor with Single Argument is not explicit	AllocatedCXCodeCompleteResults	357	32	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      cstdlib function getenv used in file CIndexCodeCompletion.cpp	getenv	368	6	MISRA08_18-0-3	18-0-3 The library functions abort, exit, getenv and system from library <cstdlib> shall not be used
      Violation: File contains invalid dynamic memory statement.		359	40	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		360	11	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		361	44	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		363	16	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		375	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		378	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		683	33	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		737	44	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		897	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		921	8	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to string	String	1000	52	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Kind	kind	219	40	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to allocated_results	AllocatedResults	563	36	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Results	results	312	61	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Results	results	322	57	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Kind	kind	386	75	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Contexts	contexts	388	21	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to completion_string	CompletionString	591	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ContextKind	contextKind	597	39	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to type	Type	642	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to includeBriefComments	IncludeBriefComments	697	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to includeFixIts	IncludeFixIts	699	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to includeBriefComments	IncludeBriefComments	744	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to includeFixIts	IncludeFixIts	746	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to result	Result	1002	12	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "Diag" possibly hiding outer definition from line 360	Diag	918	22	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      <cstdio> included in file CIndexCodeCompletion.cpp	cstdio	40	0	MISRA08_27-0-1	27-0-1 The stream input/output library <cstdio> shall not be used
      An object or function, clang_getCompletionChunkKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionChunkKind	57	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionChunkText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionChunkText	111	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionChunkCompletionString, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionChunkCompletionString	150	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getNumCompletionChunks, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNumCompletionChunks	187	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionPriority, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionPriority	192	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionAvailability, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionAvailability	198	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionNumAnnotations, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionNumAnnotations	204	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionAnnotation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionAnnotation	210	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionParent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionParent	218	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionBriefComment, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionBriefComment	231	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionNumFixIts, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionNumFixIts	312	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCompletionFixIt, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCompletionFixIt	322	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_codeCompleteAt, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_codeCompleteAt	853	23	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_defaultCodeCompleteOptions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_defaultCodeCompleteOptions	887	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeCodeCompleteResults, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeCodeCompleteResults	891	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_codeCompleteGetNumDiagnostics, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_codeCompleteGetNumDiagnostics	901	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_codeCompleteGetDiagnostic, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_codeCompleteGetDiagnostic	911	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_codeCompleteGetContexts, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_codeCompleteGetContexts	926	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_codeCompleteGetContainerKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_codeCompleteGetContainerKind	935	18	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_codeCompleteGetContainerUSR, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_codeCompleteGetContainerUSR	950	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_codeCompleteGetObjCSelector, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_codeCompleteGetObjCSelector	960	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_sortCodeCompletionResults, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_sortCodeCompletionResults	1041	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "long" used in "unsigned long long".	getContextsForContextKind	385	26	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long long".	clang_codeCompleteGetContexts	926	0	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long long".	Contexts	289	21	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long long".	contexts	388	21	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	complete_filename	693	60	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	complete_filename	854	56	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	result	1029	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Improper '++' declaration.		370	14	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '--' declaration.		382	14	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Loop or switch statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt_Impl	752	32	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in AllocatedCXCodeCompleteResults.	~AllocatedCXCodeCompleteResults	378	30	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionChunkKind	61	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionChunkText	115	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionChunkCompletionString	154	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionParent	221	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionParent	225	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionBriefComment	235	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionNumFixIts	317	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionFixIt	330	47	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_getCompletionFixIt	337	47	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt_Impl	715	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt_Impl	719	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt_Impl	791	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt_Impl	809	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt_Impl	836	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt_Impl	840	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt	866	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteAt	882	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_disposeCodeCompleteResults	893	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteGetNumDiagnostics	905	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteGetDiagnostic	916	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteGetDiagnostic	921	78	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteGetContexts	930	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteGetContainerKind	941	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteGetContainerUSR	954	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	clang_codeCompleteGetObjCSelector	964	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	AppendToString	988	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCodeCompletion.cpp.	GetTypedName	1006	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AllocatedCXCodeCompleteResults.	AllocatedCXCodeCompleteResults	370	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AllocatedCXCodeCompleteResults.	~AllocatedCXCodeCompleteResults	382	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureCompletionResults.	ProcessCodeCompleteResults	582	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureCompletionResults.	ProcessCodeCompleteResults	594	82	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureCompletionResults.	ProcessCodeCompleteResults	608	58	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureCompletionResults.	ProcessCodeCompleteResults	618	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureCompletionResults.	ProcessCodeCompleteResults	623	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureCompletionResults.	ProcessCodeCompleteResults	626	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureCompletionResults.	ProcessCodeCompleteResults	630	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in OrderCompletionResults.	operator()	1027	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in OrderCompletionResults.	operator()	1031	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in OrderCompletionResults.	operator()	1033	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Else If with no following Else	clang_codeCompleteAt_Impl	813	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	ProcessCodeCompleteResults	631	6	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	64	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	66	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	68	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	70	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	72	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	74	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	76	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	78	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	80	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	82	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	84	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	86	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	88	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	90	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	92	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	94	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	96	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	98	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	100	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	102	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkKind	104	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkText	118	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkText	140	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkCompletionString	157	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCompletionChunkCompletionString	179	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	clang_getCompletionChunkKind	106	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getCompletionChunkText	143	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getCompletionChunkCompletionString	182	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	getContextsForContextKind	557	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      For loop contains more than one loop counter	clang_codeCompleteAt_Impl	788	58	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	GetTypedName	1003	57	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	~AllocatedCXCodeCompleteResults	377	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	ProcessCodeCompleteResults	604	69	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	clang_codeCompleteAt_Impl	789	18	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	GetTypedName	1004	21	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	~AllocatedCXCodeCompleteResults	377	63	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	ProcessCodeCompleteResults	606	22	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      More than one break or goto in loop iteration statment		828	4	MISRA08_6-6-4	6-6-4 For any iteration statement there shall be no more than one break or goto statement used for loop termination
      Multiple exit points from function	clang_getCompletionChunkKind	57	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCompletionChunkText	111	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCompletionChunkCompletionString	150	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCompletionParent	218	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCompletionBriefComment	231	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCompletionNumFixIts	312	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCompletionFixIt	322	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	AllocatedCXCodeCompleteResults	357	32	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CaptureCompletionResults	568	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteAt_Impl	693	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteAt	853	23	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CodeCompleteAtImpl	869	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	clang_disposeCodeCompleteResults	891	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteGetNumDiagnostics	901	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteGetDiagnostic	911	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteGetContexts	926	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteGetContainerKind	935	18	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteGetContainerUSR	950	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_codeCompleteGetObjCSelector	960	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	AppendToString	980	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	operator()	1014	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value completion_string not const qualified	completion_string	57	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value chunk_number not const qualified	chunk_number	58	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCStr not const qualified	CCStr	59	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	111	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	150	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value chunk_number not const qualified	chunk_number	151	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCStr not const qualified	CCStr	152	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	187	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCStr not const qualified	CCStr	188	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	192	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCStr not const qualified	CCStr	193	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	198	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCStr not const qualified	CCStr	199	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	204	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCStr not const qualified	CCStr	206	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	210	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value annotation_number not const qualified	annotation_number	211	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	218	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value kind not const qualified	kind	219	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_string not const qualified	completion_string	231	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value results not const qualified	results	312	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_index not const qualified	completion_index	313	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value allocated_results not const qualified	allocated_results	314	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value results not const qualified	results	322	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value completion_index not const qualified	completion_index	323	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value fixit_index not const qualified	fixit_index	324	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FixIts not const qualified	FixIts	334	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	377	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value kind not const qualified	kind	386	75	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value S not const qualified	S	387	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StoredCompletion not const qualified	StoredCompletion	584	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value contextKind not const qualified	contextKind	597	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SelIdents not const qualified	SelIdents	603	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	605	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value selIdent not const qualified	selIdent	607	28	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value baseType not const qualified	baseType	612	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	634	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CursorUSR not const qualified	CursorUSR	638	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value S not const qualified	S	657	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CurrentArg not const qualified	CurrentArg	657	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Candidates not const qualified	Candidates	658	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumCandidates not const qualified	NumCandidates	659	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value OpenParLoc not const qualified	OpenParLoc	660	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StoredCompletion not const qualified	StoredCompletion	663	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value complete_line not const qualified	complete_line	694	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value complete_column not const qualified	complete_column	694	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	695	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	696	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IncludeBriefComments not const qualified	IncludeBriefComments	697	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SkipPreamble not const qualified	SkipPreamble	698	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IncludeFixIts not const qualified	IncludeFixIts	699	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EnableLogging not const qualified	EnableLogging	706	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	709	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value AST not const qualified	AST	713	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RemappedFiles not const qualified	RemappedFiles	724	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MB not const qualified	MB	727	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CArgs not const qualified	CArgs	750	28	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CompletionInvocation not const qualified	CompletionInvocation	753	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InvocationReporter not const qualified	InvocationReporter	757	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	853	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value complete_line not const qualified	complete_line	855	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value complete_column not const qualified	complete_column	856	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	857	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	858	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	859	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	860	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	868	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	875	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultsIn not const qualified	ResultsIn	891	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Results not const qualified	Results	895	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultsIn not const qualified	ResultsIn	901	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Results not const qualified	Results	902	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultsIn not const qualified	ResultsIn	911	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultsIn not const qualified	ResultsIn	926	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Results not const qualified	Results	927	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultsIn not const qualified	ResultsIn	936	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IsIncomplete not const qualified	IsIncomplete	937	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Results not const qualified	Results	938	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultsIn not const qualified	ResultsIn	950	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResultsIn not const qualified	ResultsIn	960	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value New not const qualified	New	980	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buffer not const qualified	Buffer	981	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value String not const qualified	String	1000	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buffer not const qualified	Buffer	1001	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value XBuffer not const qualified	XBuffer	1021	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value XText not const qualified	XText	1022	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value YBuffer not const qualified	YBuffer	1023	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value YText not const qualified	YText	1024	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Results not const qualified	Results	1041	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value NumResults not const qualified	NumResults	1042	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	results	312	61	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	results	322	57	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	S	387	58	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	S	576	42	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	S	657	41	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Candidates	658	54	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	857	66	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ResultsIn	891	61	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ResultsIn	901	59	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ResultsIn	911	55	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ResultsIn	926	53	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ResultsIn	936	70	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ResultsIn	950	66	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ResultsIn	960	66	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Buffer	981	45	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	String	1000	52	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Buffer	1001	54	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Results	1041	57	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration clang_getCompletionChunkKind.	clang_getCompletionChunkKind	57	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionChunkText.	clang_getCompletionChunkText	111	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionChunkCompletionString.	clang_getCompletionChunkCompletionString	150	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNumCompletionChunks.	clang_getNumCompletionChunks	187	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionPriority.	clang_getCompletionPriority	192	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionAvailability.	clang_getCompletionAvailability	198	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionNumAnnotations.	clang_getCompletionNumAnnotations	204	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionAnnotation.	clang_getCompletionAnnotation	210	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionParent.	clang_getCompletionParent	218	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionBriefComment.	clang_getCompletionBriefComment	231	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration AllocatedCXCodeCompleteResults.	AllocatedCXCodeCompleteResults	249	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionNumFixIts.	clang_getCompletionNumFixIts	312	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCompletionFixIt.	clang_getCompletionFixIt	322	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CodeCompletionResultObjects.	CodeCompletionResultObjects	355	29	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getContextsForContextKind.	getContextsForContextKind	385	26	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CaptureCompletionResults.	CaptureCompletionResults	562	8	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteAt_Impl.	clang_codeCompleteAt_Impl	693	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteAt.	clang_codeCompleteAt	853	23	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_defaultCodeCompleteOptions.	clang_defaultCodeCompleteOptions	887	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeCodeCompleteResults.	clang_disposeCodeCompleteResults	891	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteGetNumDiagnostics.	clang_codeCompleteGetNumDiagnostics	901	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteGetDiagnostic.	clang_codeCompleteGetDiagnostic	911	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteGetContexts.	clang_codeCompleteGetContexts	926	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteGetContainerKind.	clang_codeCompleteGetContainerKind	935	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteGetContainerUSR.	clang_codeCompleteGetContainerUSR	950	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_codeCompleteGetObjCSelector.	clang_codeCompleteGetObjCSelector	960	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration AppendToString.	AppendToString	980	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetTypedName.	GetTypedName	1000	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration OrderCompletionResults.	OrderCompletionResults	1013	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_sortCodeCompletionResults.	clang_sortCodeCompletionResults	1041	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CIndexCodeCompletion.cpp.	CIndexCodeCompletion.cpp	53	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexCodeCompletion.cpp.	CIndexCodeCompletion.cpp	54	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Function identifier CodeCompleteAtImpl used incorrectly	CodeCompleteAtImpl	877	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Data member Diagnostics not defined in constructor	AllocatedCXCodeCompleteResults	357	32	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member DiagnosticsWrappers not defined in constructor	AllocatedCXCodeCompleteResults	357	32	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member TemporaryBuffers not defined in constructor	AllocatedCXCodeCompleteResults	357	32	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member CachedCompletionAllocator not defined in constructor	AllocatedCXCodeCompleteResults	357	32	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member ContextKind not defined in constructor	AllocatedCXCodeCompleteResults	357	32	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member ContainerUSR not defined in constructor	AllocatedCXCodeCompleteResults	357	32	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member Selector not defined in constructor	AllocatedCXCodeCompleteResults	357	32	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member StoredResults not defined in constructor	CaptureCompletionResults	568	4	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Member function getAllocator can be made const, but is not const	getAllocator	675	29	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function getCodeCompletionTUInfo can be made const, but is not const	getCodeCompletionTUInfo	679	26	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Identifier is typographically ambiguous to Result	result	870	4	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CIndexCXX.cpp					
      Violation: clang_isVirtualBase defined but not called.	clang_isVirtualBase	22	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCXXAccessSpecifier defined but not called.	clang_getCXXAccessSpecifier	30	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTemplateCursorKind defined but not called.	clang_getTemplateCursorKind	50	18	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getSpecializedCursorTemplate defined but not called.	clang_getSpecializedCursorTemplate	82	9	MISRA08_0-1-10	0-1-10 All defined functions called
      An object or function, clang_isVirtualBase, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isVirtualBase	22	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCXXAccessSpecifier, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCXXAccessSpecifier	30	27	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTemplateCursorKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTemplateCursorKind	50	18	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getSpecializedCursorTemplate, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getSpecializedCursorTemplate	82	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_isVirtualBase	24	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getCXXAccessSpecifier	34	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getCXXAccessSpecifier	36	61	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getCXXAccessSpecifier	38	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getTemplateCursorKind	58	76	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	84	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	88	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	94	54	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	101	52	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	103	8	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	106	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	110	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	113	59	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	116	56	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexCXX.cpp.	clang_getSpecializedCursorTemplate	119	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Else If with no following Else	clang_getSpecializedCursorTemplate	118	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCXXAccessSpecifier	41	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCXXAccessSpecifier	42	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCXXAccessSpecifier	43	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCXXAccessSpecifier	44	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTemplateCursorKind	56	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTemplateCursorKind	62	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTemplateCursorKind	66	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTemplateCursorKind	68	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTemplateCursorKind	69	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTemplateCursorKind	70	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	clang_getCXXAccessSpecifier	45	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getTemplateCursorKind	71	6	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Multiple exit points from function	clang_isVirtualBase	22	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCXXAccessSpecifier	30	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTemplateCursorKind	50	18	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getSpecializedCursorTemplate	82	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value C not const qualified	C	22	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	30	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration clang_isVirtualBase.	clang_isVirtualBase	22	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCXXAccessSpecifier.	clang_getCXXAccessSpecifier	30	27	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTemplateCursorKind.	clang_getTemplateCursorKind	50	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getSpecializedCursorTemplate.	clang_getSpecializedCursorTemplate	82	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CIndexCXX.cpp.	CIndexCXX.cpp	19	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexCXX.cpp.	CIndexCXX.cpp	20	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_getTemplateCursorKind.	clang_getTemplateCursorKind	51	25	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	63	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	93	12	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	96	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	107	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	111	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	115	42	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
    CIndexDiagnostic.cpp					
      Static Identifier 'getASTContext' reused	getASTContext	0	0	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: clang_getNumDiagnostics defined but not called.	clang_getNumDiagnostics	201	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getDiagnostic defined but not called.	clang_getDiagnostic	211	13	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeDiagnostic defined but not called.	clang_disposeDiagnostic	238	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_formatDiagnostic defined but not called.	clang_formatDiagnostic	243	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_defaultDiagnosticDisplayOptions defined but not called.	clang_defaultDiagnosticDisplayOptions	363	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getDiagnosticCategoryName defined but not called.	clang_getDiagnosticCategoryName	402	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getDiagnosticNumFixIts defined but not called.	clang_getDiagnosticNumFixIts	426	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getDiagnosticFixIt defined but not called.	clang_getDiagnosticFixIt	432	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeDiagnosticSet defined but not called.	clang_disposeDiagnosticSet	443	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getDiagnosticInSet defined but not called.	clang_getDiagnosticInSet	450	13	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getChildDiagnostics defined but not called.	clang_getChildDiagnostics	458	16	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getNumDiagnosticsInSet defined but not called.	clang_getNumDiagnosticsInSet	466	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter Diagnostic in Non Virtual Functions	Diagnostic	238	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Range in Non Virtual Functions	Range	72	34	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter FixIt in Non Virtual Functions	FixIt	76	29	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter PLoc in Non Virtual Functions	PLoc	112	60	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Level in Non Virtual Functions	Level	113	54	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Ranges in Non Virtual Functions	Ranges	114	55	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Loc in Non Virtual Functions	Loc	128	39	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter PLoc in Non Virtual Functions	PLoc	128	56	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Level in Non Virtual Functions	Level	129	50	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Ranges in Non Virtual Functions	Ranges	130	51	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Loc in Non Virtual Functions	Loc	132	37	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Level in Non Virtual Functions	Level	132	67	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Ranges in Non Virtual Functions	Ranges	133	57	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Hints in Non Virtual Functions	Hints	134	43	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Missing Virtual Keyword	~CXDiagnosticCustomNoteImpl	48	2	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Member data in non-POD class CXDiagnosticRenderer is not private.	CXDiagnosticRenderer	84	6	MISRA08_11-0-1	11-0-1 Member data in non-POD class types shall be private
      Violation: File contains invalid dynamic memory statement.		178	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		184	31	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		186	50	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		446	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to mainSet	MainSet	147	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Str	str	360	33	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      An object or function, clang_getNumDiagnostics, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNumDiagnostics	201	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnostic, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnostic	211	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticSetFromTU, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticSetFromTU	228	16	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeDiagnostic, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeDiagnostic	238	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_formatDiagnostic, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_formatDiagnostic	243	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_defaultDiagnosticDisplayOptions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_defaultDiagnosticDisplayOptions	363	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticSeverity, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticSeverity	368	26	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticLocation	374	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticSpelling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticSpelling	380	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticOption, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticOption	386	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticCategory, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticCategory	396	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticCategoryName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticCategoryName	402	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticCategoryText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticCategoryText	407	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticNumRanges, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticNumRanges	413	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticRange, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticRange	419	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticNumFixIts, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticNumFixIts	426	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticFixIt, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticFixIt	432	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeDiagnosticSet, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeDiagnosticSet	443	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDiagnosticInSet, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDiagnosticInSet	450	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getChildDiagnostics, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getChildDiagnostics	458	16	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getNumDiagnosticsInSet, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNumDiagnosticsInSet	466	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "char" used in "const char *".	OptionText	318	22	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getNumDiagnostics	207	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnostic	219	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnostic	223	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticSetFromTU	234	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	245	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	264	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	281	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	288	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	306	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	308	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	333	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	335	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	344	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	346	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_formatDiagnostic	357	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticSeverity	370	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticLocation	376	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticSpelling	382	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticOption	388	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticOption	391	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticCategory	398	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticCategoryText	409	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticNumRanges	415	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticRange	422	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticNumFixIts	428	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticFixIt	437	46	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_disposeDiagnosticSet	446	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticInSet	454	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getDiagnosticInSet	454	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexDiagnostic.cpp.	clang_getNumDiagnosticsInSet	468	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticCustomNoteImpl.	getDiagnosticOption	64	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticCustomNoteImpl.	getFixIt	79	46	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	beginDiagnostic	99	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	beginDiagnostic	102	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	beginDiagnostic	109	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	emitDiagnosticMessage	117	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	emitDiagnosticMessage	121	66	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	emitDiagnosticMessage	123	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	emitNote	139	66	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXDiagnosticRenderer.	emitNote	141	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_formatDiagnostic	297	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	clang_formatDiagnostic	302	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      For loop contains more than one loop counter	lazyCreateDiags	190	67	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	lazyCreateDiags	191	51	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      No exit point in function	CXDiagnosticCustomNoteImpl	44	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CXDiagnosticRenderer	86	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	beginDiagnostic	94	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	emitDiagnosticMessage	112	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getNumDiagnostics	201	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnostic	211	13	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticSetFromTU	228	16	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_formatDiagnostic	243	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticSeverity	368	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticLocation	374	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticNumRanges	413	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticRange	419	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticSpelling	380	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticOption	386	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticCategory	396	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticCategoryText	407	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticNumFixIts	426	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticFixIt	432	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDiagnosticInSet	450	13	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getChildDiagnostics	458	16	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getNumDiagnosticsInSet	466	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value D not const qualified	D	33	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Disable not const qualified	Disable	62	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	72	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FixIt not const qualified	FixIt	76	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ReplacementRange not const qualified	ReplacementRange	77	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	94	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Level not const qualified	Level	95	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Owner not const qualified	Owner	104	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CD not const qualified	CD	105	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PLoc not const qualified	PLoc	112	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Level not const qualified	Level	113	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Message not const qualified	Message	113	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ranges not const qualified	Ranges	114	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	115	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	128	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PLoc not const qualified	PLoc	128	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Level not const qualified	Level	129	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ranges not const qualified	Ranges	130	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	132	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Level not const qualified	Level	132	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ranges not const qualified	Ranges	133	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Hints not const qualified	Hints	134	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Message not const qualified	Message	136	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	151	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value checkIfChanged not const qualified	checkIfChanged	152	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Set not const qualified	Set	174	6	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	201	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	203	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	211	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Index not const qualified	Index	211	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	213	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	217	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diags not const qualified	Diags	221	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	228	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	230	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diagnostic not const qualified	Diagnostic	238	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diagnostic not const qualified	Diagnostic	243	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Options not const qualified	Options	243	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Severity not const qualified	Severity	247	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	249	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value File not const qualified	File	255	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Line not const qualified	Line	256	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Column not const qualified	Column	256	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FName not const qualified	FName	260	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	267	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StartFile not const qualified	StartFile	270	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndFile not const qualified	EndFile	270	28	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	271	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StartLine not const qualified	StartLine	273	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StartColumn not const qualified	StartColumn	273	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndLine not const qualified	EndLine	273	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndColumn not const qualified	EndColumn	273	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Text not const qualified	Text	304	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value OptionName not const qualified	OptionName	317	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CategoryID not const qualified	CategoryID	330	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CategoryName not const qualified	CategoryName	342	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	368	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	369	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	374	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	375	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	413	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	414	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	419	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	419	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	420	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	380	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	381	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	386	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	390	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	396	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	397	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	407	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	408	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Category not const qualified	Category	402	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	426	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	427	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	432	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FixIt not const qualified	FixIt	432	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	434	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diags not const qualified	Diags	443	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	444	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diags not const qualified	Diags	450	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Index not const qualified	Index	451	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	452	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diag not const qualified	Diag	458	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	459	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diags not const qualified	Diags	466	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	467	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	Ranges	133	57	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration CXDiagnosticCustomNoteImpl.	CXDiagnosticCustomNoteImpl	40	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXDiagnosticRenderer.	CXDiagnosticRenderer	84	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNumDiagnostics.	clang_getNumDiagnostics	201	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnostic.	clang_getDiagnostic	211	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticSetFromTU.	clang_getDiagnosticSetFromTU	228	16	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeDiagnostic.	clang_disposeDiagnostic	238	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_formatDiagnostic.	clang_formatDiagnostic	243	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_defaultDiagnosticDisplayOptions.	clang_defaultDiagnosticDisplayOptions	363	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticSeverity.	clang_getDiagnosticSeverity	368	26	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticLocation.	clang_getDiagnosticLocation	374	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticSpelling.	clang_getDiagnosticSpelling	380	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticOption.	clang_getDiagnosticOption	386	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticCategory.	clang_getDiagnosticCategory	396	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticCategoryName.	clang_getDiagnosticCategoryName	402	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticCategoryText.	clang_getDiagnosticCategoryText	407	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticNumRanges.	clang_getDiagnosticNumRanges	413	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticRange.	clang_getDiagnosticRange	419	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticNumFixIts.	clang_getDiagnosticNumFixIts	426	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticFixIt.	clang_getDiagnosticFixIt	432	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeDiagnosticSet.	clang_disposeDiagnosticSet	443	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDiagnosticInSet.	clang_getDiagnosticInSet	450	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getChildDiagnostics.	clang_getChildDiagnostics	458	16	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNumDiagnosticsInSet.	clang_getNumDiagnosticsInSet	466	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CIndexDiagnostic.cpp.	CIndexDiagnostic.cpp	25	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexDiagnostic.cpp.	CIndexDiagnostic.cpp	26	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexDiagnostic.cpp.	CIndexDiagnostic.cpp	27	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexDiagnostic.cpp.	CIndexDiagnostic.cpp	28	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Init-declarator-list contains more than one init-declarator: Line.	Line	256	13	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: StartFile.	StartFile	270	17	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: StartLine.	StartLine	273	19	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: StartColumn.	StartColumn	273	30	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: EndLine.	EndLine	273	43	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Function identifier make_unique used incorrectly	make_unique	104	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier make_unique used incorrectly	make_unique	125	14	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier make_unique used incorrectly	make_unique	143	14	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Member function emitDiagnosticLoc can be made static, but is not static	emitDiagnosticLoc	128	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function emitCodeContext can be made static, but is not static	emitCodeContext	132	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Str	str	360	33	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxstring	CXString	58	2	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxstring	CXString	58	2	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxstring	CXString	58	2	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Str	str	360	33	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxstring	CXString	58	2	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXString	cxstring	59	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxstring	CXString	58	2	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CIndexDiagnostic.h					
      Declaration or Definition of lazyCreateDiags is not compatible with another declaration or definition in file CIndexDiagnostic.cpp on line 151	lazyCreateDiags	159	21	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Violation: append defined but not called.	append	102	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Discarded Return Values	getDiagnostic	41	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Missing Virtual Keyword	~CXStoredDiagnostic	120	2	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getSeverity	123	23	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getLocation	126	19	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getSpelling	129	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getDiagnosticOption	132	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getCategory	135	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getCategoryText	138	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getNumRanges	141	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getRange	144	16	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getNumFixIts	147	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getFixIt	150	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Member data in non-POD class CXDiagnosticImpl is not private.	CXDiagnosticImpl	54	6	MISRA08_11-0-1	11-0-1 Member data in non-POD class types shall be private
      Constructor CXDiagnosticImpl does not call all the constructor(s) for its base class(es)	CXDiagnosticImpl	99	2	MISRA08_12-1-2	12-1-2 All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes
      Constructor with Single Argument is not explicit	CXDiagnosticSetImpl	31	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Constructor with Single Argument is not explicit	CXDiagnosticImpl	99	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      C library included in file CIndexDiagnostic.h	assert.h	19	0	MISRA08_18-0-1	18-0-1 The C library shall not be used
      Identifier is typographically ambiguous to IsExternallyManaged	isExternallyManaged	51	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to K	k	99	24	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "Diag" possibly hiding outer definition from line 112	Diag	115	45	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "LangOpts" possibly hiding outer definition from line 113	LangOpts	116	40	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      This header file will violate the One Definition Rule if included more than once because if defines CXDiagnosticSetImpl.	CXDiagnosticSetImpl	31	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getNumDiagnostics.	getNumDiagnostics	36	9	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getDiagnostic.	getDiagnostic	40	20	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines empty.	empty	47	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines isExternallyManaged.	isExternallyManaged	51	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getKind.	getKind	92	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getChildDiagnostics.	getChildDiagnostics	94	23	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines CXDiagnosticImpl.	CXDiagnosticImpl	99	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines append.	append	102	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines CXStoredDiagnostic.	CXStoredDiagnostic	115	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ~CXStoredDiagnostic.	~CXStoredDiagnostic	120	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	153	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      No exit point in function	CXDiagnosticSetImpl	31	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CXStoredDiagnostic	115	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value D not const qualified	D	102	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration CXDiagnosticImpl.	CXDiagnosticImpl	25	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXDiagnosticSetImpl.	CXDiagnosticSetImpl	27	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXStoredDiagnostic.	CXStoredDiagnostic	111	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Member function getChildDiagnostics can be made const, but is not const	getChildDiagnostics	94	23	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
    CIndexer.cpp					
      Static Identifier 'getContents' reused	getContents	205	18	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: LibclangInvocationReporter defined but not called.	LibclangInvocationReporter	150	28	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter Args in Non Virtual Functions	Args	152	33	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Variable	WriteStringKey	170	7	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Name for a standard library macro or object is reused in file CIndexer.cpp	_WIN32	30	0	MISRA08_17-0-2	17-0-2 The names of standard library macros and objects shall not be reused
      C library included in file CIndexer.cpp	errno.h	36	0	MISRA08_18-0-1	18-0-1 The C library shall not be used
      Identifier is typographically ambiguous to Version.h	version.h	28	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to driver	Driver	137	26	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to path	Path	155	12	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Args	args	182	12	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Value	value	186	38	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Digest	digest	208	38	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      <cstdio> included in file CIndexer.cpp	cstdio	25	0	MISRA08_27-0-1	27-0-1 The stream input/output library <cstdio> shall not be used
      Violation: basic numerical type "int" used.	FD	163	6	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CIndexer.	getClangResourcesPath	101	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexer.	getClangResourcesPath	130	47	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexer.	getClangToolchainPath	143	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in LibclangInvocationReporter.	LibclangInvocationReporter	157	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in LibclangInvocationReporter.	LibclangInvocationReporter	165	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Multiple exit points from function	getClangResourcesPath	98	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getClangToolchainPath	141	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	LibclangInvocationReporter	150	28	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value LibClangPath not const qualified	LibClangPath	103	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value info not const qualified	info	128	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ResourcePath not const qualified	ResourcePath	144	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Idx not const qualified	Idx	151	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Op not const qualified	Op	151	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ParseOptions not const qualified	ParseOptions	151	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Args not const qualified	Args	152	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InvocationArgs not const qualified	InvocationArgs	153	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value UnsavedFiles not const qualified	UnsavedFiles	154	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Path not const qualified	Path	155	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TempPath not const qualified	TempPath	160	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FD not const qualified	FD	163	6	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value WriteStringKey not const qualified	WriteStringKey	170	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Digest not const qualified	Digest	208	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	Idx	151	14	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Init-declarator-list contains more than one init-declarator: I.	I	183	19	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: I.	I	190	21	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Init-declarator-list contains more than one init-declarator: UF.	UF	198	21	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Function identifier OS used incorrectly	OS	171	4	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	174	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	176	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	179	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	180	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	181	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	182	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	185	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	186	4	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	189	4	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	192	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	193	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	197	4	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	200	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	201	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	203	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	210	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier OS used incorrectly	OS	213	2	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Identifier is typographically ambiguous to FS	fs	164	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Value	value	186	38	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CIndexer.h					
      Declaration or Definition of RunSafely is not compatible with another declaration or definition in file CIndex.cpp on line 8703	RunSafely	116	7	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Violation: getInvocationEmissionPath defined but not called.	getInvocationEmissionPath	85	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Variable	ResourcesPath	40	14	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	ToolchainPath	43	14	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	File	102	14	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Constructor with Single Argument is not explicit	CIndexer	48	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Identifier is typographically ambiguous to Options	options	70	36	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "PCHContainerOps" possibly hiding outer definition from line 41	PCHContainerOps	48	51	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      The class, union or enum name CIndexer, has been reused	CIndexer	48	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      This header file will violate the One Definition Rule if included more than once because if defines CIndexer.	CIndexer	48	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getOnlyLocalDecls.	getOnlyLocalDecls	57	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines setOnlyLocalDecls.	setOnlyLocalDecls	58	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getDisplayDiagnostics.	getDisplayDiagnostics	60	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines setDisplayDiagnostics.	setDisplayDiagnostics	61	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getPCHContainerOperations.	getPCHContainerOperations	65	42	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getCXGlobalOptFlags.	getCXGlobalOptFlags	69	11	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines setCXGlobalOptFlags.	setCXGlobalOptFlags	70	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines isOptEnabled.	isOptEnabled	72	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines setInvocationEmissionPath.	setInvocationEmissionPath	81	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getInvocationEmissionPath.	getInvocationEmissionPath	85	12	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      A type, object or function used in multiple translation units declared more than once: ASTUnit.	ASTUnit	28	6	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      A type, object or function used in multiple translation units declared more than once: MacroDefinitionRecord.	MacroDefinitionRecord	30	6	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      A type, object or function used in multiple translation units declared more than once: IdentifierInfo.	IdentifierInfo	33	6	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      No exit point in function	CIndexer	48	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value Local not const qualified	Local	58	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Display not const qualified	Display	61	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value options not const qualified	options	70	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value opt not const qualified	opt	72	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	81	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Init-declarator-list contains more than one init-declarator: ParseOperation.	ParseOperation	92	29	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
    CIndexHigh.cpp					
      Static Identifier 'getASTContext' reused	getASTContext	63	14	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Static Identifier 'getASTContext' reused	getASTContext	255	14	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Static Identifier 'getASTContext' reused	getASTContext	347	14	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: clang_findReferencesInFileWithBlock defined but not called.	clang_findReferencesInFileWithBlock	518	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_findIncludesInFileWithBlock defined but not called.	clang_findIncludesInFileWithBlock	526	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: visit defined but not called.	visit	372	33	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter parent in Non Virtual Functions	parent	145	59	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter parent in Non Virtual Functions	parent	263	62	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter block in Non Virtual Functions	block	520	72	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter block in Non Virtual Functions	block	528	72	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter parent in Non Virtual Functions	parent	351	58	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Identifier is typographically ambiguous to visitor	Visitor	214	53	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to visitor	Visitor	308	56	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to visitor	Visitor	382	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Methods	methods	115	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SelectorIdIdx	selectorIdIdx	56	44	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cursor	Cursor	306	63	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	409	60	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	478	63	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	519	52	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	527	50	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Range	range	513	63	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "TU" possibly hiding outer definition from line 46	TU	55	43	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "FID" possibly hiding outer definition from line 47	FID	55	54	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "visitor" possibly hiding outer definition from line 50	visitor	57	49	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Unit" possibly hiding outer definition from line 245	Unit	250	37	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "File" possibly hiding outer definition from line 246	File	250	60	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Macro" possibly hiding outer definition from line 247	Macro	251	50	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "visitor" possibly hiding outer definition from line 248	visitor	252	52	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Unit" possibly hiding outer definition from line 339	Unit	343	35	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "File" possibly hiding outer definition from line 340	File	343	58	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "visitor" possibly hiding outer definition from line 341	visitor	344	50	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Comment appears to contain code in or near getASTContext	getASTContext	71		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      An object or function, clang_findReferencesInFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_findReferencesInFile	409	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_findIncludesInFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_findIncludesInFile	478	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_findReferencesInFileWithBlock, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_findReferencesInFileWithBlock	518	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_findIncludesInFileWithBlock, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_findIncludesInFileWithBlock	526	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "int" used.	SelectorIdIdx	49	6	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	selectorIdIdx	56	44	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Loop or switch statement not enclosed in curly braces { } in CIndexHigh.cpp.	getTopOverriddenMethods	40	69	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	getTopOverriddenMethods	26	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	getTopOverriddenMethods	28	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	getFileSpellingLoc	138	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileIdRefVisit	149	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileIdRefVisit	153	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileIdRefVisit	164	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileIdRefVisit	176	8	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileIdRefVisit	183	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileIdRefVisit	197	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileIdRefVisit	207	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findIdRefsInFile	221	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileMacroRefVisit	267	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileMacroRefVisit	269	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileMacroRefVisit	271	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileMacroRefVisit	275	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileMacroRefVisit	292	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findFileMacroRefVisit	302	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findMacroRefsInFile	311	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findMacroRefsInFile	319	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findMacroRefsInFile	321	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	findMacroRefsInFile	323	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	415	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	420	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	425	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	430	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	435	66	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	439	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	449	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	466	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findReferencesInFile	474	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findIncludesInFile	488	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findIncludesInFile	493	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findIncludesInFile	498	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findIncludesInFile	502	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexHigh.cpp.	clang_findIncludesInFile	507	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIdRefVisitData.	getCanonical	80	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIdRefVisitData.	getCanonical	86	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIdRefVisitData.	isHit	98	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIdRefVisitData.	isHit	102	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIdRefVisitData.	isHit	105	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIdRefVisitData.	isOverriddingMethod	113	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIdRefVisitData.	isOverriddingMethod	120	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIncludesVisitor.	visit	353	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIncludesVisitor.	visit	364	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in FindFileIncludesVisitor.	visit	368	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Else If with no following Else	findFileMacroRefVisit	270	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	getCanonical	93	4	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      For loop contains more than one loop counter	getTopOverriddenMethods	39	31	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	isOverriddingMethod	118	30	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	getTopOverriddenMethods	39	66	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	isOverriddingMethod	118	62	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Multiple exit points from function	getTopOverriddenMethods	22	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	FindFileIdRefVisitData	55	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCanonical	78	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isHit	96	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isOverriddingMethod	111	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getFileSpellingLoc	132	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	findFileIdRefVisit	144	31	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	findIdRefsInFile	212	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	FindFileMacroRefVisitData	250	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	findFileMacroRefVisit	262	31	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	findMacroRefsInFile	306	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	FindFileIncludesVisitor	343	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visit	351	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_findReferencesInFile	409	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_findIncludesInFile	478	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value Overridden not const qualified	Overridden	30	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	39	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	133	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SpellLoc not const qualified	SpellLoc	136	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	145	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	146	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value declCursor not const qualified	declCursor	147	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SelIdLoc not const qualified	SelIdLoc	181	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value LocInfo not const qualified	LocInfo	195	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value declCursor not const qualified	declCursor	212	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Visitor not const qualified	Visitor	214	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	216	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	218	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	232	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FindIdRefsVisitor not const qualified	FindIdRefsVisitor	233	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	263	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	264	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value data not const qualified	data	273	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value LocInfo not const qualified	LocInfo	290	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	306	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	306	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Visitor not const qualified	Visitor	308	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	314	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	316	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	327	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FindMacroRefsVisitor not const qualified	FindMacroRefsVisitor	328	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	351	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	359	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value LocInfo not const qualified	LocInfo	362	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	372	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value parent not const qualified	parent	372	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	373	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	381	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Visitor not const qualified	Visitor	382	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	386	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	388	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	392	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InclusionCursorsVisitor not const qualified	InclusionCursorsVisitor	393	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	409	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value visitor not const qualified	visitor	410	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	411	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	437	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value refCursor not const qualified	refCursor	462	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	478	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value visitor not const qualified	visitor	479	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	481	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	485	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	500	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value context not const qualified	context	511	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	512	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range not const qualified	range	513	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value block not const qualified	block	514	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	518	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	519	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value block not const qualified	block	520	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value visitor not const qualified	visitor	521	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	526	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	527	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value block not const qualified	block	528	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value visitor not const qualified	visitor	529	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	Methods	24	67	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SM	132	56	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	context	511	55	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration getTopOverriddenMethods.	getTopOverriddenMethods	22	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration FindFileIdRefVisitData.	FindFileIdRefVisitData	45	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getFileSpellingLoc.	getFileSpellingLoc	132	22	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration findFileIdRefVisit.	findFileIdRefVisit	144	31	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration findIdRefsInFile.	findIdRefsInFile	212	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration FindFileMacroRefVisitData.	FindFileMacroRefVisitData	244	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration findFileMacroRefVisit.	findFileMacroRefVisit	262	31	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration findMacroRefsInFile.	findMacroRefsInFile	306	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration FindFileIncludesVisitor.	FindFileIncludesVisitor	338	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration findIncludesInFile.	findIncludesInFile	381	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_findIncludesInFile.	clang_findIncludesInFile	478	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration _visitCursorAndRange.	_visitCursorAndRange	511	28	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_findReferencesInFileWithBlock.	clang_findReferencesInFileWithBlock	518	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_findIncludesInFileWithBlock.	clang_findIncludesInFileWithBlock	526	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CIndexHigh.cpp.	CIndexHigh.cpp	18	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexHigh.cpp.	CIndexHigh.cpp	19	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexHigh.cpp.	CIndexHigh.cpp	20	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Violation: function "getTopOverriddenMethods" is directly recursive, which is unsafe.	getTopOverriddenMethods	40	4	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "getFileSpellingLoc" is directly recursive, which is unsafe.	getFileSpellingLoc	138	11	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "FindFileIdRefVisitData::getCanonical" is directly recursive, which is unsafe.	getCanonical	86	15	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Function identifier findFileIdRefVisit used incorrectly	findFileIdRefVisit	229	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier findFileIdRefVisit used incorrectly	findFileIdRefVisit	234	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier findFileMacroRefVisit used incorrectly	findFileMacroRefVisit	329	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier visit used incorrectly	visit	394	65	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier _visitCursorAndRange used incorrectly	_visitCursorAndRange	522	46	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier _visitCursorAndRange used incorrectly	_visitCursorAndRange	530	46	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	89	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	104	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	104	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Data member TopMethods not defined in constructor	FindFileIdRefVisitData	55	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
    CIndexInclusionStack.cpp					
      Violation: clang_getInclusions defined but not called.	clang_getInclusions	70	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Discarded Return Values	getInclusions	63	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Comment appears to contain code in or near clientData	clientData	91		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      An object or function, clang_getInclusions, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getInclusions	70	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      If statement not enclosed in curly braces { } in CIndexInclusionStack.cpp.	getInclusions	36	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexInclusionStack.cpp.	getInclusions	40	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexInclusionStack.cpp.	getInclusions	46	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexInclusionStack.cpp.	getInclusions	59	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexInclusionStack.cpp.	clang_getInclusions	94	75	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Exit point not at end of function	clang_getInclusions	70	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value n not const qualified	n	21	109	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	22	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CB not const qualified	CB	22	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value clientData not const qualified	clientData	23	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXUnit not const qualified	CXXUnit	25	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	26	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PLoc not const qualified	PLoc	51	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	70	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CB not const qualified	CB	70	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value clientData not const qualified	clientData	71	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	73	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration getInclusions.	getInclusions	21	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getInclusions.	clang_getInclusions	70	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CIndexInclusionStack.cpp.	CIndexInclusionStack.cpp	19	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
    CIndexUSRs.cpp					
      Violation: clang_getCursorUSR defined but not called.	clang_getCursorUSR	38	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_constructUSR_ObjCIvar defined but not called.	clang_constructUSR_ObjCIvar	92	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_constructUSR_ObjCMethod defined but not called.	clang_constructUSR_ObjCMethod	100	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_constructUSR_ObjCClass defined but not called.	clang_constructUSR_ObjCClass	110	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_constructUSR_ObjCProtocol defined but not called.	clang_constructUSR_ObjCProtocol	117	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_constructUSR_ObjCCategory defined but not called.	clang_constructUSR_ObjCCategory	124	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_constructUSR_ObjCProperty defined but not called.	clang_constructUSR_ObjCProperty	132	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Identifier is typographically ambiguous to Buf	buf	50	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Buf	buf	71	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      An object or function, clang_getCursorUSR, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorUSR	38	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_constructUSR_ObjCIvar, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_constructUSR_ObjCIvar	92	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_constructUSR_ObjCMethod, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_constructUSR_ObjCMethod	100	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_constructUSR_ObjCClass, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_constructUSR_ObjCClass	110	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_constructUSR_ObjCProtocol, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_constructUSR_ObjCProtocol	117	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_constructUSR_ObjCCategory, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_constructUSR_ObjCCategory	124	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_constructUSR_ObjCProperty, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_constructUSR_ObjCProperty	132	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "char" used in "const char *".	name	92	49	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	name	100	51	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	name	110	50	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	name	117	53	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	class_name	124	53	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	category_name	125	53	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	property	132	53	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CIndexUSRs.cpp.	clang_getCursorUSR	44	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexUSRs.cpp.	clang_getCursorUSR	48	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexUSRs.cpp.	clang_getCursorUSR	52	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexUSRs.cpp.	clang_getCursorUSR	69	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CIndexUSRs.cpp.	clang_getCursorUSR	73	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Multiple exit points from function	clang_getCursorUSR	38	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value s not const qualified	s	30	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	34	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	38	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	46	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ignore not const qualified	Ignore	54	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	67	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value buf not const qualified	buf	71	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ignore not const qualified	Ignore	75	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value classUSR not const qualified	classUSR	92	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	93	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isInstanceMethod not const qualified	isInstanceMethod	101	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value classUSR not const qualified	classUSR	102	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	103	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	111	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	118	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	126	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value classUSR not const qualified	classUSR	133	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	134	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	Buf	34	70	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration extractUSRSuffix.	extractUSRSuffix	30	24	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorUSR.	clang_getCursorUSR	38	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_constructUSR_ObjCIvar.	clang_constructUSR_ObjCIvar	92	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_constructUSR_ObjCMethod.	clang_constructUSR_ObjCMethod	100	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_constructUSR_ObjCClass.	clang_constructUSR_ObjCClass	110	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_constructUSR_ObjCProtocol.	clang_constructUSR_ObjCProtocol	117	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_constructUSR_ObjCCategory.	clang_constructUSR_ObjCCategory	124	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_constructUSR_ObjCProperty.	clang_constructUSR_ObjCProperty	132	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CIndexUSRs.cpp.	CIndexUSRs.cpp	23	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CIndexUSRs.cpp.	CIndexUSRs.cpp	24	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
    CLog.h					
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	73	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	74	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	79	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	80	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	81	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	82	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	83	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	84	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::Logger::operator<<" (which has external linkage) defined multiple times.	operator<<	85	10	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: operator<< defined but not called.	operator<<	73	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	74	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	79	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	80	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	81	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	82	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	83	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	84	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator<< defined but not called.	operator<<	85	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Function like Macro defined in file CLog.h	LOG_SECTION	98	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Pre-processor used for something other than file inclusion or include guards	LOG_SECTION	98	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CLog.h		99	72	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CLog.h		100	46	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Violation: File contains invalid dynamic memory statement.		59	13	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to Trace	trace	57	26	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Trace	trace	63	45	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      The class, union or enum name Logger, has been reused	Logger	63	11	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      Comment appears to contain code in or near LogRef	LogRef	36		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      This header file will violate the One Definition Rule if included more than once because if defines getEnvVar.	getEnvVar	46	21	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines isLoggingEnabled.	isLoggingEnabled	50	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines isStackTracingEnabled.	isStackTracingEnabled	51	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines make.	make	56	16	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines Logger.	Logger	63	11	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	73	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	74	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	79	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	80	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	81	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	82	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	83	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	84	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines operator<<.	operator<<	85	10	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      A type, object or function used in multiple translation units declared more than once: FileEntry.	FileEntry	26	8	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      Violation: basic numerical type "char" used in "const char *".	getEnvVar	46	21	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	sCachedVar	47	23	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	EnvOpt	52	20	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	Str	74	33	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long".	N	79	35	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used.	N	80	26	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "unsigned int".	N	81	34	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	N	82	25	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used.	C	83	26	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "unsigned char".	C	84	35	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "signed char".	C	85	33	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Char used with an incorrect operator in operator<<.	C	83	40	MISRA08_4-5-3	4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator
      If statement not enclosed in curly braces { } in Logger.	isStackTracingEnabled	53	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Logger.	make	59	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Logger.	operator<<	76	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Multiple exit points from function	isStackTracingEnabled	51	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	make	56	16	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	Logger	63	11	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value name not const qualified	name	56	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value trace not const qualified	trace	57	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	73	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	79	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	80	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	81	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value N not const qualified	N	82	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	83	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	84	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	85	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
    CursorVisitor.h					
      Static Identifier 'getASTUnit' reused	getASTUnit	174	11	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: getTU defined but not called.	getTU	175	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Variable	Visitor	75	18	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Member data in non-POD class VisitorJob is not private.	VisitorJob	24	6	MISRA08_11-0-1	11-0-1 Member data in non-POD class types shall be private
      #include statement preceded by code other than preprocesser directives or comments	CursorVisitor.h	257	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      Macro ABSTRACT_TYPELOC is defined within a block	ABSTRACT_TYPELOC	254	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro TYPELOC is defined within a block	TYPELOC	255	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Function like Macro defined in file CursorVisitor.h	ABSTRACT_TYPELOC	254	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CursorVisitor.h	TYPELOC	255	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Pre-processor used for something other than file inclusion or include guards	ABSTRACT_TYPELOC	254	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	TYPELOC	255	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CursorVisitor.h		254	39	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CursorVisitor.h		256	51	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      More than one # or ## operator used a single macro in file CursorVisitor.h	TYPELOC	255	0	MISRA08_16-3-1	16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition
      A # or ## operator used in a macro in file CursorVisitor.h	TYPELOC	255	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      Violation: File contains invalid dynamic memory statement.		170	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to K	k	38	30	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to parent	Parent	68	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to parent	Parent	121	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to parent	Parent	126	28	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Kind	kind	131	37	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "Parent" possibly hiding outer definition from line 68	Parent	121	14	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "StmtParent" possibly hiding outer definition from line 72	StmtParent	122	17	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Parent" possibly hiding outer definition from line 68	Parent	126	28	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "StmtParent" possibly hiding outer definition from line 72	StmtParent	126	49	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Parent" possibly hiding outer definition from line 68	Parent	128	8	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "StmtParent" possibly hiding outer definition from line 72	StmtParent	128	24	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "TU" possibly hiding outer definition from line 64	TU	143	34	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "Visitor" possibly hiding outer definition from line 75	Visitor	143	54	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "ClientData" possibly hiding outer definition from line 80	ClientData	144	29	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "VisitPreprocessorLast" possibly hiding outer definition from line 84	VisitPreprocessorLast	145	21	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "RegionOfInterest" possibly hiding outer definition from line 92	RegionOfInterest	147	28	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "VisitDeclsOnly" possibly hiding outer definition from line 96	VisitDeclsOnly	148	21	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "PostChildrenVisitor" possibly hiding outer definition from line 77	PostChildrenVisitor	149	38	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      The class, union or enum name VisitorJob, has been reused	VisitorJob	38	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      The class, union or enum name CursorVisitor, has been reused	CursorVisitor	143	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      The class, union or enum name SetParentRAII, has been reused	SetParentRAII	126	4	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      Comment appears to contain code in or near VisitPreprocessorLast	VisitPreprocessorLast	87		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      This header file will violate the One Definition Rule if included more than once because if defines VisitorJob.	VisitorJob	38	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getKind.	getKind	46	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getParent.	getParent	47	18	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines CursorVisitor.	CursorVisitor	143	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ~CursorVisitor.	~CursorVisitor	166	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getASTUnit.	getASTUnit	174	11	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getTU.	getTU	175	20	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines shouldVisitIncludedEntities.	shouldVisitIncludedEntities	185	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines SetParentRAII.	SetParentRAII	126	4	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ~SetParentRAII.	~SetParentRAII	135	4	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      A type, object or function used in multiple translation units declared more than once: ASTUnit.	ASTUnit	20	8	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      If statement not enclosed in curly braces { } in SetParentRAII.	SetParentRAII	132	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in SetParentRAII.	~SetParentRAII	138	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      For loop contains more than one loop counter	~CursorVisitor	169	35	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	~CursorVisitor	169	73	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      No exit point in function	VisitorJob	38	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	SetParentRAII	126	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CursorVisitor	143	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value NewParent not const qualified	NewParent	127	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	169	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Const memeber function getASTUnit returning non-const pointer or reference to class-data	getASTUnit	174	11	MISRA08_9-3-1	9-3-1 Const member functions shall not return non-const pointers or references to class-data
      Identifier is typographically ambiguous to Kind	kind	131	37	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXTU	cxtu	150	17	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to fileID	FileID	118	32	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to parent	Parent	68	11	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Kind	kind	131	37	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXCursor	cxcursor	22	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CXComment.cpp					
      Violation: clang_Cursor_getParsedComment defined but not called.	clang_Cursor_getParsedComment	28	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Comment_getKind defined but not called.	clang_Comment_getKind	41	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Comment_getNumChildren defined but not called.	clang_Comment_getNumChildren	89	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Comment_getChild defined but not called.	clang_Comment_getChild	97	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Comment_isWhitespace defined but not called.	clang_Comment_isWhitespace	105	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_InlineContentComment_hasTrailingNewline defined but not called.	clang_InlineContentComment_hasTrailingNewline	119	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TextComment_getText defined but not called.	clang_TextComment_getText	127	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_InlineCommandComment_getCommandName defined but not called.	clang_InlineCommandComment_getCommandName	135	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_InlineCommandComment_getRenderKind defined but not called.	clang_InlineCommandComment_getRenderKind	145	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_InlineCommandComment_getNumArgs defined but not called.	clang_InlineCommandComment_getNumArgs	166	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_InlineCommandComment_getArgText defined but not called.	clang_InlineCommandComment_getArgText	174	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_HTMLTagComment_getTagName defined but not called.	clang_HTMLTagComment_getTagName	183	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_HTMLStartTagComment_isSelfClosing defined but not called.	clang_HTMLStartTagComment_isSelfClosing	191	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_HTMLStartTag_getNumAttrs defined but not called.	clang_HTMLStartTag_getNumAttrs	199	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_HTMLStartTag_getAttrName defined but not called.	clang_HTMLStartTag_getAttrName	207	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_HTMLStartTag_getAttrValue defined but not called.	clang_HTMLStartTag_getAttrValue	215	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_BlockCommandComment_getCommandName defined but not called.	clang_BlockCommandComment_getCommandName	223	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_BlockCommandComment_getNumArgs defined but not called.	clang_BlockCommandComment_getNumArgs	232	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_BlockCommandComment_getArgText defined but not called.	clang_BlockCommandComment_getArgText	240	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_BlockCommandComment_getParagraph defined but not called.	clang_BlockCommandComment_getParagraph	249	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ParamCommandComment_getParamName defined but not called.	clang_ParamCommandComment_getParamName	257	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ParamCommandComment_isParamIndexValid defined but not called.	clang_ParamCommandComment_isParamIndexValid	265	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ParamCommandComment_getParamIndex defined but not called.	clang_ParamCommandComment_getParamIndex	273	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ParamCommandComment_isDirectionExplicit defined but not called.	clang_ParamCommandComment_isDirectionExplicit	281	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_ParamCommandComment_getDirection defined but not called.	clang_ParamCommandComment_getDirection	289	33	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TParamCommandComment_getParamName defined but not called.	clang_TParamCommandComment_getParamName	308	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TParamCommandComment_isParamPositionValid defined but not called.	clang_TParamCommandComment_isParamPositionValid	316	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TParamCommandComment_getDepth defined but not called.	clang_TParamCommandComment_getDepth	324	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_TParamCommandComment_getIndex defined but not called.	clang_TParamCommandComment_getIndex	332	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_VerbatimBlockLineComment_getText defined but not called.	clang_VerbatimBlockLineComment_getText	340	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_VerbatimLineComment_getText defined but not called.	clang_VerbatimLineComment_getText	349	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_HTMLTagComment_getAsString defined but not called.	clang_HTMLTagComment_getAsString	361	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_FullComment_getAsHTML defined but not called.	clang_FullComment_getAsHTML	376	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_FullComment_getAsXML defined but not called.	clang_FullComment_getAsXML	391	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: File contains invalid dynamic memory statement.		368	23	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		383	23	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		398	23	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to cxcomment	CXComment	28	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      An object or function, clang_Cursor_getParsedComment, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getParsedComment	28	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Comment_getKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Comment_getKind	41	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Comment_getNumChildren, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Comment_getNumChildren	89	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Comment_getChild, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Comment_getChild	97	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Comment_isWhitespace, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Comment_isWhitespace	105	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_InlineContentComment_hasTrailingNewline, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_InlineContentComment_hasTrailingNewline	119	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TextComment_getText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TextComment_getText	127	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_InlineCommandComment_getCommandName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_InlineCommandComment_getCommandName	135	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_InlineCommandComment_getRenderKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_InlineCommandComment_getRenderKind	145	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_InlineCommandComment_getNumArgs, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_InlineCommandComment_getNumArgs	166	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_InlineCommandComment_getArgText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_InlineCommandComment_getArgText	174	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_HTMLTagComment_getTagName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_HTMLTagComment_getTagName	183	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_HTMLStartTagComment_isSelfClosing, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_HTMLStartTagComment_isSelfClosing	191	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_HTMLStartTag_getNumAttrs, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_HTMLStartTag_getNumAttrs	199	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_HTMLStartTag_getAttrName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_HTMLStartTag_getAttrName	207	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_HTMLStartTag_getAttrValue, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_HTMLStartTag_getAttrValue	215	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_BlockCommandComment_getCommandName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_BlockCommandComment_getCommandName	223	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_BlockCommandComment_getNumArgs, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_BlockCommandComment_getNumArgs	232	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_BlockCommandComment_getArgText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_BlockCommandComment_getArgText	240	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_BlockCommandComment_getParagraph, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_BlockCommandComment_getParagraph	249	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ParamCommandComment_getParamName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ParamCommandComment_getParamName	257	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ParamCommandComment_isParamIndexValid, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ParamCommandComment_isParamIndexValid	265	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ParamCommandComment_getParamIndex, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ParamCommandComment_getParamIndex	273	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ParamCommandComment_isDirectionExplicit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ParamCommandComment_isDirectionExplicit	281	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_ParamCommandComment_getDirection, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_ParamCommandComment_getDirection	289	33	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TParamCommandComment_getParamName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TParamCommandComment_getParamName	308	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TParamCommandComment_isParamPositionValid, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TParamCommandComment_isParamPositionValid	316	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TParamCommandComment_getDepth, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TParamCommandComment_getDepth	324	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_TParamCommandComment_getIndex, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_TParamCommandComment_getIndex	332	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_VerbatimBlockLineComment_getText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_VerbatimBlockLineComment_getText	340	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_VerbatimLineComment_getText, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_VerbatimLineComment_getText	349	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_HTMLTagComment_getAsString, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_HTMLTagComment_getAsString	361	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_FullComment_getAsHTML, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_FullComment_getAsHTML	376	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_FullComment_getAsXML, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_FullComment_getAsXML	391	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_Cursor_getParsedComment	32	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_Comment_getKind	44	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_Comment_getNumChildren	92	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_Comment_getChild	100	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_Comment_isWhitespace	108	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_Comment_isWhitespace	111	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_Comment_isWhitespace	114	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_InlineContentComment_hasTrailingNewline	122	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_TextComment_getText	130	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_InlineCommandComment_getCommandName	138	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_InlineCommandComment_getRenderKind	148	50	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_InlineCommandComment_getNumArgs	169	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_InlineCommandComment_getArgText	178	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_HTMLTagComment_getTagName	186	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_HTMLStartTagComment_isSelfClosing	194	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_HTMLStartTag_getNumAttrs	202	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_HTMLStartTag_getAttrName	210	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_HTMLStartTag_getAttrValue	218	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_BlockCommandComment_getCommandName	226	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_BlockCommandComment_getNumArgs	235	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_BlockCommandComment_getArgText	244	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_BlockCommandComment_getParagraph	252	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_ParamCommandComment_getParamName	260	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_ParamCommandComment_isParamIndexValid	268	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_ParamCommandComment_getParamIndex	276	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_ParamCommandComment_isDirectionExplicit	284	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_ParamCommandComment_getDirection	293	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_TParamCommandComment_getParamName	311	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_TParamCommandComment_isParamPositionValid	319	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_TParamCommandComment_getDepth	327	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_TParamCommandComment_getIndex	335	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_VerbatimBlockLineComment_getText	344	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_VerbatimLineComment_getText	352	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_HTMLTagComment_getAsString	364	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_HTMLTagComment_getAsString	368	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_FullComment_getAsHTML	379	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_FullComment_getAsHTML	383	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_FullComment_getAsXML	394	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXComment.cpp.	clang_FullComment_getAsXML	398	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	47	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	50	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	53	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	56	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	59	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	62	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	65	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	68	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	71	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	74	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	77	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	80	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Comment_getKind	83	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_InlineCommandComment_getRenderKind	151	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_InlineCommandComment_getRenderKind	154	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_InlineCommandComment_getRenderKind	157	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_InlineCommandComment_getRenderKind	160	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_ParamCommandComment_getDirection	296	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_ParamCommandComment_getDirection	299	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_ParamCommandComment_getDirection	302	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	clang_Comment_getKind	85	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_InlineCommandComment_getRenderKind	162	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_ParamCommandComment_getDirection	304	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Multiple exit points from function	clang_Cursor_getParsedComment	28	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Comment_getKind	41	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Comment_getNumChildren	89	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Comment_getChild	97	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Comment_isWhitespace	105	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_InlineContentComment_hasTrailingNewline	119	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_TextComment_getText	127	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_InlineCommandComment_getCommandName	135	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_InlineCommandComment_getRenderKind	145	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_InlineCommandComment_getNumArgs	166	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_InlineCommandComment_getArgText	174	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_HTMLTagComment_getTagName	183	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_HTMLStartTagComment_isSelfClosing	191	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_HTMLStartTag_getNumAttrs	199	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_HTMLStartTag_getAttrName	207	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_HTMLStartTag_getAttrValue	215	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_BlockCommandComment_getCommandName	223	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_BlockCommandComment_getNumArgs	232	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_BlockCommandComment_getArgText	240	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_BlockCommandComment_getParagraph	249	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ParamCommandComment_getParamName	257	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ParamCommandComment_isParamIndexValid	265	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ParamCommandComment_getParamIndex	273	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ParamCommandComment_isDirectionExplicit	281	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_ParamCommandComment_getDirection	289	33	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_TParamCommandComment_getParamName	308	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_TParamCommandComment_isParamPositionValid	316	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_TParamCommandComment_getDepth	324	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_TParamCommandComment_getIndex	332	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_VerbatimBlockLineComment_getText	340	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_VerbatimLineComment_getText	349	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_HTMLTagComment_getAsString	361	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_FullComment_getAsHTML	376	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_FullComment_getAsXML	391	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value C not const qualified	C	28	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	41	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	89	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	97	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	105	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	119	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	127	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	135	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	145	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	166	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	174	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	183	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	191	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	199	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	207	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	215	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	223	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	232	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	240	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	249	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	257	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	265	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	273	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	281	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	290	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	308	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	316	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	324	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	332	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Depth not const qualified	Depth	332	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	340	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	349	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	361	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	366	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	376	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	381	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	391	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	396	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration clang_Cursor_getParsedComment.	clang_Cursor_getParsedComment	28	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Comment_getKind.	clang_Comment_getKind	41	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Comment_getNumChildren.	clang_Comment_getNumChildren	89	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Comment_getChild.	clang_Comment_getChild	97	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Comment_isWhitespace.	clang_Comment_isWhitespace	105	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_InlineContentComment_hasTrailingNewline.	clang_InlineContentComment_hasTrailingNewline	119	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TextComment_getText.	clang_TextComment_getText	127	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_InlineCommandComment_getCommandName.	clang_InlineCommandComment_getCommandName	135	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_InlineCommandComment_getRenderKind.	clang_InlineCommandComment_getRenderKind	145	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_InlineCommandComment_getNumArgs.	clang_InlineCommandComment_getNumArgs	166	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_InlineCommandComment_getArgText.	clang_InlineCommandComment_getArgText	174	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_HTMLTagComment_getTagName.	clang_HTMLTagComment_getTagName	183	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_HTMLStartTagComment_isSelfClosing.	clang_HTMLStartTagComment_isSelfClosing	191	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_HTMLStartTag_getNumAttrs.	clang_HTMLStartTag_getNumAttrs	199	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_HTMLStartTag_getAttrName.	clang_HTMLStartTag_getAttrName	207	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_HTMLStartTag_getAttrValue.	clang_HTMLStartTag_getAttrValue	215	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_BlockCommandComment_getCommandName.	clang_BlockCommandComment_getCommandName	223	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_BlockCommandComment_getNumArgs.	clang_BlockCommandComment_getNumArgs	232	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_BlockCommandComment_getArgText.	clang_BlockCommandComment_getArgText	240	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_BlockCommandComment_getParagraph.	clang_BlockCommandComment_getParagraph	249	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ParamCommandComment_getParamName.	clang_ParamCommandComment_getParamName	257	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ParamCommandComment_isParamIndexValid.	clang_ParamCommandComment_isParamIndexValid	265	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ParamCommandComment_getParamIndex.	clang_ParamCommandComment_getParamIndex	273	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ParamCommandComment_isDirectionExplicit.	clang_ParamCommandComment_isDirectionExplicit	281	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_ParamCommandComment_getDirection.	clang_ParamCommandComment_getDirection	289	33	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TParamCommandComment_getParamName.	clang_TParamCommandComment_getParamName	308	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TParamCommandComment_isParamPositionValid.	clang_TParamCommandComment_isParamPositionValid	316	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TParamCommandComment_getDepth.	clang_TParamCommandComment_getDepth	324	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_TParamCommandComment_getIndex.	clang_TParamCommandComment_getIndex	332	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_VerbatimBlockLineComment_getText.	clang_VerbatimBlockLineComment_getText	340	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_VerbatimLineComment_getText.	clang_VerbatimLineComment_getText	349	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_HTMLTagComment_getAsString.	clang_HTMLTagComment_getAsString	361	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_FullComment_getAsHTML.	clang_FullComment_getAsHTML	376	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_FullComment_getAsXML.	clang_FullComment_getAsXML	391	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXComment.cpp.	CXComment.cpp	24	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXComment.cpp.	CXComment.cpp	25	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXComment.cpp.	CXComment.cpp	26	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_Cursor_getParsedComment.	clang_Cursor_getParsedComment	29	25	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Function identifier dyn_cast used incorrectly	dyn_cast	110	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	113	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Identifier is typographically ambiguous to cxcomment	CXComment	28	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CXComment.h					
      If statement not enclosed in curly braces { } in cxcomment.	getASTNodeAs	46	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Multiple exit points from function	getASTNodeAs	43	23	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value TU not const qualified	TU	31	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	38	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	43	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	51	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXC not const qualified	CXC	55	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
    CXCompilationDatabase.cpp					
      Violation: clang_CompilationDatabase_fromDirectory defined but not called.	clang_CompilationDatabase_fromDirectory	11	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompilationDatabase_dispose defined but not called.	clang_CompilationDatabase_dispose	32	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompilationDatabase_getCompileCommands defined but not called.	clang_CompilationDatabase_getCompileCommands	46	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompilationDatabase_getAllCompileCommands defined but not called.	clang_CompilationDatabase_getAllCompileCommands	59	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommands_dispose defined but not called.	clang_CompileCommands_dispose	70	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommands_getSize defined but not called.	clang_CompileCommands_getSize	76	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommands_getCommand defined but not called.	clang_CompileCommands_getCommand	88	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommand_getDirectory defined but not called.	clang_CompileCommand_getDirectory	103	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommand_getFilename defined but not called.	clang_CompileCommand_getFilename	113	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommand_getNumArgs defined but not called.	clang_CompileCommand_getNumArgs	123	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommand_getArg defined but not called.	clang_CompileCommand_getArg	132	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommand_getNumMappedSources defined but not called.	clang_CompileCommand_getNumMappedSources	146	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommand_getMappedSourcePath defined but not called.	clang_CompileCommand_getMappedSourcePath	154	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CompileCommand_getMappedSourceContent defined but not called.	clang_CompileCommand_getMappedSourceContent	162	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter CCmd in Non Virtual Functions	CCmd	146	58	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter CCmd in Non Virtual Functions	CCmd	154	58	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter I in Non Virtual Functions	I	154	73	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter CCmd in Non Virtual Functions	CCmd	162	61	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter I in Non Virtual Functions	I	162	76	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Constructor with Single Argument is not explicit	AllocatedCXCompileCommands	41	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Violation: File contains invalid dynamic memory statement.		34	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		52	13	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		63	13	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		72	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to Cmd	cmd	108	18	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cmd	cmd	118	18	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      <cstdio> included in file CXCompilationDatabase.cpp	cstdio	4	0	MISRA08_27-0-1	27-0-1 The stream input/output library <cstdio> shall not be used
      An object or function, clang_CompilationDatabase_fromDirectory, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompilationDatabase_fromDirectory	11	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompilationDatabase_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompilationDatabase_dispose	32	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompilationDatabase_getCompileCommands, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompilationDatabase_getCompileCommands	46	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompilationDatabase_getAllCompileCommands, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompilationDatabase_getAllCompileCommands	59	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommands_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommands_dispose	70	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommands_getSize, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommands_getSize	76	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommands_getCommand, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommands_getCommand	88	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommand_getDirectory, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommand_getDirectory	103	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommand_getFilename, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommand_getFilename	113	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommand_getNumArgs, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommand_getNumArgs	123	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommand_getArg, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommand_getArg	132	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommand_getNumMappedSources, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommand_getNumMappedSources	146	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommand_getMappedSourcePath, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommand_getMappedSourcePath	154	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CompileCommand_getMappedSourceContent, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CompileCommand_getMappedSourceContent	162	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "char" used in "const char *".	BuildDir	11	52	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	CompleteFileName	47	57	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompilationDatabase_fromDirectory	26	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompilationDatabase_getCompileCommands	52	60	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompilationDatabase_getAllCompileCommands	63	60	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommands_getSize	79	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommands_getCommand	91	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommands_getCommand	97	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommand_getDirectory	106	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommand_getFilename	116	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommand_getNumArgs	126	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommand_getArg	135	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCompilationDatabase.cpp.	clang_CompileCommand_getArg	140	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      No exit point in function	AllocatedCXCompileCommands	41	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompilationDatabase_getCompileCommands	46	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompilationDatabase_getAllCompileCommands	59	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompileCommands_getSize	76	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompileCommands_getCommand	88	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompileCommand_getDirectory	103	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompileCommand_getFilename	113	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompileCommand_getNumArgs	123	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CompileCommand_getArg	132	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value ErrorCode not const qualified	ErrorCode	12	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CDb not const qualified	CDb	32	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CDb not const qualified	CDb	46	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value db not const qualified	db	49	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	50	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CDb not const qualified	CDb	59	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value db not const qualified	db	60	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	61	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cmds not const qualified	Cmds	70	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cmds not const qualified	Cmds	76	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ACC not const qualified	ACC	81	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cmds not const qualified	Cmds	88	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	88	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ACC not const qualified	ACC	93	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	103	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	113	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	123	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	132	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	146	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	154	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	154	73	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CCmd not const qualified	CCmd	162	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	162	76	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration clang_CompilationDatabase_fromDirectory.	clang_CompilationDatabase_fromDirectory	11	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompilationDatabase_dispose.	clang_CompilationDatabase_dispose	32	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration AllocatedCXCompileCommands.	AllocatedCXCompileCommands	37	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompilationDatabase_getCompileCommands.	clang_CompilationDatabase_getCompileCommands	46	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompilationDatabase_getAllCompileCommands.	clang_CompilationDatabase_getAllCompileCommands	59	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommands_dispose.	clang_CompileCommands_dispose	70	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommands_getSize.	clang_CompileCommands_getSize	76	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommands_getCommand.	clang_CompileCommands_getCommand	88	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommand_getDirectory.	clang_CompileCommand_getDirectory	103	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommand_getFilename.	clang_CompileCommand_getFilename	113	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommand_getNumArgs.	clang_CompileCommand_getNumArgs	123	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommand_getArg.	clang_CompileCommand_getArg	132	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommand_getNumMappedSources.	clang_CompileCommand_getNumMappedSources	146	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommand_getMappedSourcePath.	clang_CompileCommand_getMappedSourcePath	154	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CompileCommand_getMappedSourceContent.	clang_CompileCommand_getMappedSourceContent	162	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXCompilationDatabase.cpp.	CXCompilationDatabase.cpp	6	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXCompilationDatabase.cpp.	CXCompilationDatabase.cpp	7	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Identifier is typographically ambiguous to Size	size	128	58	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Size	size	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CXCursor.cpp					
      Static Identifier 'getASTContext' reused	getASTContext	0	0	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: Function "clang::cxcursor::MakeCXCursor" (which has external linkage) defined multiple times.	MakeCXCursor	90	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxcursor::MakeCXCursor" (which has external linkage) defined multiple times.	MakeCXCursor	97	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxcursor::MakeCXCursor" (which has external linkage) defined multiple times.	MakeCXCursor	126	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxcursor::MakeMacroExpansionCursor" (which has external linkage) defined multiple times.	MakeMacroExpansionCursor	896	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxcursor::MakeMacroExpansionCursor" (which has external linkage) defined multiple times.	MakeMacroExpansionCursor	902	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxcursor::MakeCursorOverloadedDeclRef" (which has external linkage) defined multiple times.	MakeCursorOverloadedDeclRef	954	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxcursor::MakeCursorOverloadedDeclRef" (which has external linkage) defined multiple times.	MakeCursorOverloadedDeclRef	966	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxcursor::MakeCursorOverloadedDeclRef" (which has external linkage) defined multiple times.	MakeCursorOverloadedDeclRef	979	19	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: clang_Cursor_isNull defined but not called.	clang_Cursor_isNull	1151	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getTranslationUnit defined but not called.	clang_Cursor_getTranslationUnit	1155	18	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getNumArguments defined but not called.	clang_Cursor_getNumArguments	1159	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getArgument defined but not called.	clang_Cursor_getArgument	1181	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getNumTemplateArguments defined but not called.	clang_Cursor_getNumTemplateArguments	1216	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getTemplateArgumentKind defined but not called.	clang_Cursor_getTemplateArgumentKind	1279	28	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getTemplateArgumentType defined but not called.	clang_Cursor_getTemplateArgumentType	1303	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getTemplateArgumentValue defined but not called.	clang_Cursor_getTemplateArgumentValue	1317	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getTemplateArgumentUnsignedValue defined but not called.	clang_Cursor_getTemplateArgumentUnsignedValue	1333	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_createCXCursorSet defined but not called.	clang_createCXCursorSet	1383	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeCXCursorSet defined but not called.	clang_disposeCXCursorSet	1387	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXCursorSet_contains defined but not called.	clang_CXCursorSet_contains	1391	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_CXCursorSet_insert defined but not called.	clang_CXCursorSet_insert	1398	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorCompletionString defined but not called.	clang_getCursorCompletionString	1413	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getOverriddenCursors defined but not called.	clang_getOverriddenCursors	1469	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeOverriddenCursors defined but not called.	clang_disposeOverriddenCursors	1526	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isDynamicCall defined but not called.	clang_Cursor_isDynamicCall	1546	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getReceiverType defined but not called.	clang_Cursor_getReceiverType	1585	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MakeCXCursor defined but not called.	MakeCXCursor	97	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MakeCXCursor defined but not called.	MakeCXCursor	126	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MakeMacroExpansionCursor defined but not called.	MakeMacroExpansionCursor	902	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MakeCursorOverloadedDeclRef defined but not called.	MakeCursorOverloadedDeclRef	966	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MakeCursorOverloadedDeclRef defined but not called.	MakeCursorOverloadedDeclRef	979	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: operator== defined but not called.	operator==	1135	15	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getEmptyKey defined but not called.	getEmptyKey	1365	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getTombstoneKey defined but not called.	getTombstoneKey	1368	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: isEqual defined but not called.	isEqual	1375	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter TU in Non Virtual Functions	TU	34	73	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter B in Non Virtual Functions	B	856	70	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	857	64	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Range in Non Virtual Functions	Range	867	64	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	868	70	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MI in Non Virtual Functions	MI	885	74	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	886	63	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MI in Non Virtual Functions	MI	896	60	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	897	62	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MI in Non Virtual Functions	MI	902	67	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	904	62	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter ID in Non Virtual Functions	ID	927	68	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter TU in Non Virtual Functions	TU	928	66	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Variable	RawLoc	728	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	744	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	763	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	778	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	794	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	812	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	828	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	844	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	942	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	Storage	957	27	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	958	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	970	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	Storage	971	27	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	RawLoc	983	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	Storage	984	27	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Non-volitile POD variable RawLoc has only one use.	RawLoc	728	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	744	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	763	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	778	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	794	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	812	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	828	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	844	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	942	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	958	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	970	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Non-volitile POD variable RawLoc has only one use.	RawLoc	983	8	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      Discarded Return Values	clang_disposeCXCursorSet	1388	9	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Template, template member function or template member not instantiated: DenseMapInfo	DenseMapInfo	1363	18	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: getEmptyKey	getEmptyKey	1365	25	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: getTombstoneKey	getTombstoneKey	1368	25	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: isEqual	isEqual	1375	21	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Violation: File contains invalid dynamic memory statement.		1384	25	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		1388	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		1455	8	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		1462	9	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		1466	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		1495	10	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to Cursor	cursor	1036	45	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1054	52	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1071	68	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1094	45	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1151	33	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1155	59	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1371	54	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to X	x	1375	45	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Y	y	1375	64	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1391	62	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1398	60	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1413	60	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	1469	41	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Decl	decl	1416	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	1181	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      An object or function, clang_Cursor_isNull, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isNull	1151	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getTranslationUnit	1155	18	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getNumArguments, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getNumArguments	1159	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getArgument, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getArgument	1181	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getNumTemplateArguments, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getNumTemplateArguments	1216	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getTemplateArgumentKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getTemplateArgumentKind	1279	28	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getTemplateArgumentType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getTemplateArgumentType	1303	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getTemplateArgumentValue, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getTemplateArgumentValue	1317	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getTemplateArgumentUnsignedValue, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getTemplateArgumentUnsignedValue	1333	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_createCXCursorSet, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_createCXCursorSet	1383	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeCXCursorSet, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeCXCursorSet	1387	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXCursorSet_contains, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXCursorSet_contains	1391	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_CXCursorSet_insert, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_CXCursorSet_insert	1398	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorCompletionString, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorCompletionString	1413	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getOverriddenCursors, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getOverriddenCursors	1469	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeOverriddenCursors, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeOverriddenCursors	1526	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isDynamicCall, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isDynamicCall	1546	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getReceiverType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getReceiverType	1585	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "int" used.	clang_Cursor_isNull	1151	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Cursor_getNumArguments	1159	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Cursor_getNumTemplateArguments	1216	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Cursor_getTemplateArgument	1253	11	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_Cursor_getTemplateArgumentValue	1317	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long long".	clang_Cursor_getTemplateArgumentUnsignedValue	1333	19	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Cursor_isDynamicCall	1546	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	SelectorIdIndex	106	8	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	SelectorIdIndex	559	8	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	SelIdx	1071	51	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getNumArguments	1163	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getNumArguments	1165	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getArgument	1187	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getArgument	1191	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_CXCursorSet_contains	1394	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_CXCursorSet_insert	1402	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_CXCursorSet_insert	1406	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_getOverriddenCursors	1473	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_getOverriddenCursors	1475	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_getOverriddenCursors	1480	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_getOverriddenCursors	1483	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_disposeOverriddenCursors	1528	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_isDynamicCall	1549	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_isDynamicCall	1551	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_isDynamicCall	1555	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_isDynamicCall	1559	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_isDynamicCall	1570	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_isDynamicCall	1572	54	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_isDynamicCall	1579	61	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getReceiverType	1589	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getReceiverType	1592	58	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getReceiverType	1601	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXCursor.cpp.	clang_Cursor_getReceiverType	1603	54	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	MakeCXCursor	115	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	MakeCXCursor	296	60	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	MakeCXCursor	568	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	MakeCursorObjCClassRef	761	52	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getCursorStmt	1012	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getCursorASTUnit	1028	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getOverriddenCursors	1041	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getSelectorIdentifierIndexAndLoc	1059	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getSelectorIdentifierIndexAndLoc	1065	79	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getSelectorIdentifierCursor	1078	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getSelectorIdentifierCursor	1080	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getSelectorIdentifierCursor	1086	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getSelectorIdentifierCursor	1088	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getTypeRefCursor	1096	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getTypeRefCursor	1099	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getTypeRefCursor	1112	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getTypeRefCursor	1126	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getTypeRefCursor	1128	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxcursor.	getTypeRefCursor	1130	56	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MacroExpansionCursor.	getName	912	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MacroExpansionCursor.	getDefinition	918	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in MacroExpansionCursor.	getSourceRange	923	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Else If with no following Else	clang_Cursor_getArgument	1193	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	clang_getCursorCompletionString	1443	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	clang_Cursor_isDynamicCall	1574	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	clang_Cursor_getReceiverType	1605	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	getSelectorIdentifierIndexAndLoc	1068	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	getSelectorIdentifierCursor	1091	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	getTypeRefCursor	1111	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	44	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	45	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	46	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	47	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	48	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	49	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	50	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	51	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	52	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	53	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	54	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	55	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	56	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	57	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	58	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	59	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	60	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	61	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	62	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	63	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	64	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	65	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	66	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	67	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	68	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	69	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	70	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	71	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	72	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	73	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	74	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	75	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	76	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	77	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	78	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	79	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	80	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	81	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	82	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	83	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetCursorKind	84	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1287	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1288	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1289	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1291	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1292	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1293	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1294	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1296	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Cursor_getTemplateArgumentKind	1297	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	MakeCXCursor	295	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	MakeCXCursor	300	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	MakeCXCursor	352	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	MakeCXCursor	570	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: Case detected after default	GetCursorKind	44	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	45	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	46	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	47	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	48	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	49	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	50	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	51	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	52	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	53	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	54	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	55	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	56	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	57	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	58	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	59	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	60	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	61	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	62	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	63	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	64	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	65	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	66	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	67	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	68	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	69	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	70	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	71	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	72	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	73	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	74	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	75	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	76	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	77	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	78	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	79	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	80	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	81	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	82	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	83	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	GetCursorKind	84	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_Cursor_getTemplateArgumentKind	1298	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	MakeCXCursor	718	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      For loop contains more than one loop counter	getOverriddenCursors	1048	30	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	~OverridenCursorsPool	1453	67	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	getOverriddenCursors	1048	64	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	~OverridenCursorsPool	1454	44	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Multiple exit points from function	GetCursorKind	40	20	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	MakeCXCursor	97	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	MakeCXCursor	126	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	MakeCursorObjCClassRef	756	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getName	910	54	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getDefinition	916	32	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getSourceRange	921	44	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCursorStmt	1008	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCursorASTUnit	1025	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	getOverriddenCursors	1036	15	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getSelectorIdentifierIndexAndLoc	1054	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getTypeRefCursor	1094	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getNumArguments	1159	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getArgument	1181	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getNumTemplateArguments	1216	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getTemplateArgument	1253	11	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getTemplateArgumentKind	1279	28	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getTemplateArgumentType	1303	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getTemplateArgumentValue	1317	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getTemplateArgumentUnsignedValue	1333	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXCursorSet_contains	1391	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_CXCursorSet_insert	1398	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorCompletionString	1413	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getOverriddenCursors	1469	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	clang_disposeOverriddenCursors	1526	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isDynamicCall	1546	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getReceiverType	1585	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value K not const qualified	K	34	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	34	73	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	36	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	91	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	93	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	97	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RegionOfInterest not const qualified	RegionOfInterest	98	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FirstInDeclGroup not const qualified	FirstInDeclGroup	99	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	102	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	112	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	117	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	122	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	127	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RegionOfInterest not const qualified	RegionOfInterest	128	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	565	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	570	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	720	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Super not const qualified	Super	724	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	725	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	726	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	728	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	729	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	734	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	741	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	742	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	744	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	745	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	750	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	757	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	758	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	763	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	764	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	769	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	775	74	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	776	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	778	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	779	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	784	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	791	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	792	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	794	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	795	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	800	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	807	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	808	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	812	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	813	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	818	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	824	76	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	825	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	828	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	829	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	834	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	840	78	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	841	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	844	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	845	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	850	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	857	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	858	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	862	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	867	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	868	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	869	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	877	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	879	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	881	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	886	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	887	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	891	73	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MI not const qualified	MI	896	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	897	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	898	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MI not const qualified	MI	902	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	903	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	904	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	906	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ID not const qualified	ID	927	68	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	928	66	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	929	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	933	73	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Label not const qualified	Label	938	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	938	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	939	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	942	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	943	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	948	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	955	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Storage not const qualified	Storage	957	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	958	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	959	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	967	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	968	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	970	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Storage not const qualified	Storage	971	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	972	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Name not const qualified	Name	979	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	980	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	981	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RawLoc not const qualified	RawLoc	983	8	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Storage not const qualified	Storage	984	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	985	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	993	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1000	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1004	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1008	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1017	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1021	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1025	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	1026	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	1032	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1036	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value overridden not const qualified	overridden	1037	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	1048	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1054	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SelIdx not const qualified	SelIdx	1071	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1071	68	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1094	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	1114	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TL not const qualified	TL	1116	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ElabTL not const qualified	ElabTL	1121	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	1135	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Y not const qualified	Y	1135	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1142	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1151	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1155	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1159	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1216	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1254	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	1254	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TA not const qualified	TA	1254	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1279	74	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	1280	74	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1303	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	1303	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1317	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	1317	69	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1333	74	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value I not const qualified	I	1334	74	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value setImpl not const qualified	setImpl	1356	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value set not const qualified	set	1359	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value set not const qualified	set	1387	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value set not const qualified	set	1391	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1391	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value setImpl not const qualified	setImpl	1392	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value set not const qualified	set	1398	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1398	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value setImpl not const qualified	setImpl	1404	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value flag not const qualified	flag	1408	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1413	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value kind not const qualified	kind	1414	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unit not const qualified	unit	1418	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	1419	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value String not const qualified	String	1420	28	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unit not const qualified	unit	1432	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	1433	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value String not const qualified	String	1436	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	1454	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value pool not const qualified	pool	1465	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	1469	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	1477	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value pool not const qualified	pool	1485	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value overridden not const qualified	overridden	1526	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Vec not const qualified	Vec	1533	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	1536	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value pool not const qualified	pool	1540	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1546	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RecE not const qualified	RecE	1556	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PropRefE not const qualified	PropRefE	1564	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1585	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	1586	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PropRefE not const qualified	PropRefE	1594	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value receiverTy not const qualified	receiverTy	1607	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	Super	724	66	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	MI	896	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	MI	902	67	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	ID	927	68	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Label	938	49	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	overridden	1037	63	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	setImpl	1356	60	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	pool	1465	51	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration GetCursorKind.	GetCursorKind	40	20	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isNull.	clang_Cursor_isNull	1151	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getTranslationUnit.	clang_Cursor_getTranslationUnit	1155	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getNumArguments.	clang_Cursor_getNumArguments	1159	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getArgument.	clang_Cursor_getArgument	1181	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getNumTemplateArguments.	clang_Cursor_getNumTemplateArguments	1216	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXGetTemplateArgumentStatus.	CXGetTemplateArgumentStatus	1236	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getTemplateArgument.	clang_Cursor_getTemplateArgument	1253	11	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getTemplateArgumentKind.	clang_Cursor_getTemplateArgumentKind	1279	28	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getTemplateArgumentType.	clang_Cursor_getTemplateArgumentType	1303	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getTemplateArgumentValue.	clang_Cursor_getTemplateArgumentValue	1317	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getTemplateArgumentUnsignedValue.	clang_Cursor_getTemplateArgumentUnsignedValue	1333	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXCursorSet_Impl.	CXCursorSet_Impl	1354	43	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration packCXCursorSet.	packCXCursorSet	1356	26	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration unpackCXCursorSet.	unpackCXCursorSet	1359	32	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_createCXCursorSet.	clang_createCXCursorSet	1383	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeCXCursorSet.	clang_disposeCXCursorSet	1387	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXCursorSet_contains.	clang_CXCursorSet_contains	1391	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_CXCursorSet_insert.	clang_CXCursorSet_insert	1398	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorCompletionString.	clang_getCursorCompletionString	1413	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration OverridenCursorsPool.	OverridenCursorsPool	1447	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getOverriddenCursors.	clang_getOverriddenCursors	1469	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeOverriddenCursors.	clang_disposeOverriddenCursors	1526	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isDynamicCall.	clang_Cursor_isDynamicCall	1546	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getReceiverType.	clang_Cursor_getReceiverType	1585	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXCursor.cpp.	CXCursor.cpp	31	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXCursor.cpp.	CXCursor.cpp	32	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Violation: function "llvm::DenseMapInfo::getHashValue" is directly recursive, which is unsafe.	getHashValue	1373	8	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1162	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1164	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1170	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1173	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1184	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1188	40	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1197	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1204	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1259	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1417	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1553	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1556	21	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1564	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1569	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1570	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1571	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1572	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1576	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1591	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1594	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1600	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1601	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1602	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1603	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1606	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	295	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	301	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	353	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	508	45	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	564	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1005	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1039	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1058	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1064	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1076	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1084	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1104	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1107	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Identifier is typographically ambiguous to callExpr	CallExpr	1170	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CXCursor.h					
      Declaration or Definition of MakeCXCursor is not compatible with another declaration or definition in file CXCursor.cpp on line 90	MakeCXCursor	50	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeCXCursorInvalid is not compatible with another declaration or definition in file CXCursor.cpp on line 34	MakeCXCursorInvalid	58	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of getCursor is not compatible with another declaration or definition in file CIndex.cpp on line 5900	getCursor	48	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeCXCursor is not compatible with another declaration or definition in file CXCursor.cpp on line 97	MakeCXCursor	52	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeCXCursor is not compatible with another declaration or definition in file CXCursor.cpp on line 126	MakeCXCursor	55	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeMacroDefinitionCursor is not compatible with another declaration or definition in file CXCursor.cpp on line 885	MakeMacroDefinitionCursor	147	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeMacroExpansionCursor is not compatible with another declaration or definition in file CXCursor.cpp on line 896	MakeMacroExpansionCursor	155	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeMacroExpansionCursor is not compatible with another declaration or definition in file CXCursor.cpp on line 902	MakeMacroExpansionCursor	159	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeInclusionDirectiveCursor is not compatible with another declaration or definition in file CXCursor.cpp on line 927	MakeInclusionDirectiveCursor	202	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeCursorOverloadedDeclRef is not compatible with another declaration or definition in file CXCursor.cpp on line 966	MakeCursorOverloadedDeclRef	222	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of MakeCursorOverloadedDeclRef is not compatible with another declaration or definition in file CXCursor.cpp on line 979	MakeCursorOverloadedDeclRef	226	9	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Declaration or Definition of getSelectorIdentifierIndexAndLoc is not compatible with another declaration or definition in file CXCursor.cpp on line 1054	getSelectorIdentifierIndexAndLoc	261	31	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Violation: operator!= defined but not called.	operator!=	287	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MacroExpansionCursor defined but not called.	MacroExpansionCursor	187	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Discarded Return Values	getAsMacroDefinition	174	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	getAsMacroExpansion	178	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	getPseudoLoc	182	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Constructor with Single Argument is not explicit	MacroExpansionCursor	187	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Identifier "C" possibly hiding outer definition from line 170	C	187	32	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      The class, union or enum name MacroExpansionCursor, has been reused	MacroExpansionCursor	187	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      This header file will violate the One Definition Rule if included more than once because if defines isPseudo.	isPseudo	172	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getAsMacroDefinition.	getAsMacroDefinition	173	31	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getAsMacroExpansion.	getAsMacroExpansion	177	24	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getPseudoLoc.	getPseudoLoc	181	17	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines MacroExpansionCursor.	MacroExpansionCursor	187	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      A type, object or function used in multiple translation units declared more than once: ASTUnit.	ASTUnit	24	6	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      A type, object or function used in multiple translation units declared more than once: MacroDefinitionRecord.	MacroDefinitionRecord	32	6	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      A type, object or function used in multiple translation units declared more than once: IdentifierInfo.	IdentifierInfo	44	6	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      Violation: basic numerical type "int" used.	getSelectorIdentifierIndex	262	18	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in cxcursor.	getTypeRefedCallExprCursor	274	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      No exit point in function	MacroExpansionCursor	187	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value C not const qualified	C	197	68	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	262	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	265	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cursor not const qualified	cursor	271	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	287	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Y not const qualified	Y	287	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Identifier is typographically ambiguous to attr	Attr	25	6	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CXIndexDataConsumer.cpp					
      Declaration or Definition of getEntityKindFromSymbolKind is not compatible with another declaration or definition in file CXIndexDataConsumer.cpp on line 1152	getEntityKindFromSymbolKind	1261	23	MISRA08_3-2-1	3-2-1 All declarations of an object or function shall have compatible types
      Violation: Public Function "clang::cxindex::IBOutletCollectionInfo::IBOutletCollectionInfo" (which has external linkage) defined multiple times.	IBOutletCollectionInfo	265	24	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::CXIndexDataConsumer::handleReference" (which has external linkage) defined multiple times.	handleReference	891	26	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::CXIndexDataConsumer::handleReference" (which has external linkage) defined multiple times.	handleReference	905	26	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "getEntityKindFromSymbolProperties" appears to have internal linkage within CXIndexDataConsumer.cpp, so static keyword should be used.	getEntityKindFromSymbolProperties	1312	0	MISRA08_3-3-2	3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier.
      Violation: getEntityKindFromSymbolKind defined but not called.	getEntityKindFromSymbolKind	1261	23	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getEntityKindFromSymbolProperties defined but not called.	getEntityKindFromSymbolProperties	1312	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getEntityLangFromSymbolLang defined but not called.	getEntityLangFromSymbolLang	1322	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFunctionDecl defined but not called.	VisitFunctionDecl	34	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitVarDecl defined but not called.	VisitVarDecl	39	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFieldDecl defined but not called.	VisitFieldDecl	44	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitMSPropertyDecl defined but not called.	VisitMSPropertyDecl	49	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitEnumConstantDecl defined but not called.	VisitEnumConstantDecl	53	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypedefNameDecl defined but not called.	VisitTypedefNameDecl	58	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTagDecl defined but not called.	VisitTagDecl	63	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCInterfaceDecl defined but not called.	VisitObjCInterfaceDecl	68	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCProtocolDecl defined but not called.	VisitObjCProtocolDecl	73	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCImplementationDecl defined but not called.	VisitObjCImplementationDecl	78	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCCategoryDecl defined but not called.	VisitObjCCategoryDecl	83	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCCategoryImplDecl defined but not called.	VisitObjCCategoryImplDecl	88	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCMethodDecl defined but not called.	VisitObjCMethodDecl	93	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCPropertyDecl defined but not called.	VisitObjCPropertyDecl	101	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitObjCPropertyImplDecl defined but not called.	VisitObjCPropertyImplDecl	106	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitNamespaceDecl defined but not called.	VisitNamespaceDecl	111	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUsingDecl defined but not called.	VisitUsingDecl	116	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitUsingDirectiveDecl defined but not called.	VisitUsingDirectiveDecl	120	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitClassTemplateDecl defined but not called.	VisitClassTemplateDecl	124	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitClassTemplateSpecializationDecl defined but not called.	VisitClassTemplateSpecializationDecl	129	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitFunctionTemplateDecl defined but not called.	VisitFunctionTemplateDecl	135	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitTypeAliasTemplateDecl defined but not called.	VisitTypeAliasTemplateDecl	140	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: VisitImportDecl defined but not called.	VisitImportDecl	145	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: handleDeclOccurence defined but not called.	handleDeclOccurence	157	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: handleModuleOccurence defined but not called.	handleModuleOccurence	223	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: finish defined but not called.	finish	232	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: setPreprocessor defined but not called.	setPreprocessor	416	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: handleDiagnosticSet defined but not called.	handleDiagnosticSet	535	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: handleMSProperty defined but not called.	handleMSProperty	636	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: handleReference defined but not called.	handleReference	891	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: toCStr defined but not called.	toCStr	396	26	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: IBOutletCollectionInfo defined but not called.	IBOutletCollectionInfo	265	24	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: AttrListInfo defined but not called.	AttrListInfo	279	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: create defined but not called.	create	332	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter D in Non Virtual Functions	D	49	49	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter D in Non Virtual Functions	D	116	39	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter D in Non Virtual Functions	D	120	57	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Relations in Non Virtual Functions	Relations	158	65	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Mod in Non Virtual Functions	Mod	224	62	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Loc in Non Virtual Functions	Loc	226	63	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter isImport in Non Virtual Functions	isImport	463	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter isAngled in Non Virtual Functions	isAngled	463	57	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter isModuleImport in Non Virtual Functions	isModuleImport	464	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Cursor in Non Virtual Functions	Cursor	906	47	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter E in Non Virtual Functions	E	909	50	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Kind in Non Virtual Functions	Kind	910	57	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Role in Non Virtual Functions	Role	911	51	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter SA in Non Virtual Functions	SA	1159	50	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter D in Non Virtual Functions	D	338	77	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Variable	SA	468	15	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	SymInfo	1168	13	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	II	1182	22	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Discarded Return Values	VisitFunctionDecl	35	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitVarDecl	40	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitFieldDecl	45	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitEnumConstantDecl	54	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitTypedefNameDecl	59	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitTagDecl	64	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCInterfaceDecl	69	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCProtocolDecl	74	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCImplementationDecl	79	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCCategoryDecl	84	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCCategoryImplDecl	89	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCMethodDecl	95	19	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCMethodDecl	97	19	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCPropertyDecl	102	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitObjCPropertyImplDecl	107	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitNamespaceDecl	112	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitClassTemplateDecl	125	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitClassTemplateSpecializationDecl	131	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitFunctionTemplateDecl	136	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	VisitTypeAliasTemplateDecl	141	17	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	handleDeclOccurence	205	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	ObjCProtocolListInfo	254	13	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	handleDecl	562	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	handleObjCInterface	692	6	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	handleObjCCategory	760	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	handleObjCCategoryImpl	792	4	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	handleCXXRecordDecl	1015	10	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Violation: File contains invalid dynamic memory statement.		335	9	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to DataConsumer	dataConsumer	30	43	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	257	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to E	e	257	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	260	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to E	e	260	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Kind	kind	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to AttrInfo	attrInfo	269	13	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClassLoc	classLoc	271	41	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	304	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to E	e	304	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	327	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to E	e	327	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	364	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to E	e	364	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Base	base	366	19	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	369	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to E	e	369	23	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to BaseInfo	baseInfo	1010	34	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to allocate	Allocate	405	32	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	1123	71	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to EntityInfo	entityInfo	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SemanticContainer	semanticContainer	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to DeclAsContainer	declAsContainer	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to DeclInfo	declInfo	604	29	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	683	12	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Getter	getter	853	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Setter	setter	859	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to container	Container	939	16	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to container	Container	947	31	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to I	i	1009	20	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to E	e	1009	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to protocol	Protocol	1288	19	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "SA" possibly hiding outer definition from line 280	SA	333	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	340	49	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	468	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	552	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	679	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	735	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	749	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	781	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	843	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	931	15	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	999	17	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "SA" possibly hiding outer definition from line 280	SA	1159	50	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      An object or function, getSymbolRole, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	getSymbolRole	151	13	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "char" used in "const char *".	toCStr	396	26	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	copyCStr	404	26	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "char *".	buf	405	8	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Improper '++' declaration.		243	62	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		258	13	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		261	9	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		328	11	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		370	11	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Loop or switch statement not enclosed in curly braces { } in ObjCProtocolListInfo.	ObjCProtocolListInfo	258	44	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in ObjCProtocolListInfo.	ObjCProtocolListInfo	261	34	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in AttrListInfo.	AttrListInfo	328	32	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in CXXBasesListInfo.	CXXBasesListInfo	370	36	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolKind	1275	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolKind	1281	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolKind	1286	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolKind	1290	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolKind	1295	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolProperties	1314	52	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolProperties	1316	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.cpp.	getEntityKindFromSymbolProperties	1318	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingDeclVisitor.	VisitObjCMethodDecl	95	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingDeclVisitor.	VisitObjCMethodDecl	97	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDeclOccurence	165	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDeclOccurence	198	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDeclOccurence	200	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDeclOccurence	214	65	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleModuleOccurence	228	72	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	isFunctionLocalDecl	424	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	shouldAbort	446	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	ppIncludedFile	466	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	importedModule	480	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	importedModule	484	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	importedModule	492	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	importedModule	492	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	importedPCH	507	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	startedTranslationUnit	523	60	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	indexDiagnostics	529	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDiagnosticSet	537	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDecl	548	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDecl	550	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDecl	556	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDecl	559	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDecl	562	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleDecl	573	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleFunction	620	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleTagDecl	650	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleObjCInterface	667	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleObjCInterface	692	50	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleObjCProtocol	722	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleObjCCategory	760	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleObjCCategoryImpl	792	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleObjCMethod	822	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	898	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	913	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	916	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	918	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	920	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	922	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	924	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	928	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	handleReference	935	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	isNotFromSourceFile	955	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	addContainerInMap	965	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	addContainerInMap	970	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	addContainerInMap	976	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	addContainerInMap	978	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getClientEntity	983	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getClientEntity	986	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	setClientEntity	992	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	markEntityOccurrenceInFile	1032	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	markEntityOccurrenceInFile	1040	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	markEntityOccurrenceInFile	1044	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getEntityDecl	1064	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getEntityDecl	1067	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getEntityContainer	1077	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getClientContainerForDC	1092	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getClientContainerForDC	1096	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getIndexFile	1103	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getIndexFile	1107	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getIndexLoc	1115	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	translateLoc	1127	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	translateLoc	1137	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	translateLoc	1141	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	translateLoc	1143	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	translateLoc	1145	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	translateLoc	1147	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	translateLoc	1149	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getEntityInfo	1161	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getEntityInfo	1180	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1217	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1219	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1221	51	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1223	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1225	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1227	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1229	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	getRefCursor	1231	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	shouldIgnoreIfImplicit	1238	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	shouldIgnoreIfImplicit	1240	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	shouldIgnoreIfImplicit	1242	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	shouldIgnoreIfImplicit	1244	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXIndexDataConsumer.	shouldIgnoreIfImplicit	1246	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ObjCProtocolListInfo.	ObjCProtocolListInfo	254	48	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ScratchAlloc.	toCStr	398	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ScratchAlloc.	toCStr	400	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IBOutletCollectionInfo.	IBOutletCollectionInfo	276	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AttrListInfo.	AttrListInfo	283	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	CXXBasesListInfo	357	58	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	CXXBasesListInfo	366	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	getBaseLoc	378	47	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	getBaseLoc	380	14	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	getBaseLoc	383	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	getBaseLoc	386	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	getBaseLoc	388	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXXBasesListInfo.	getBaseLoc	391	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Else If with no following Else	getEntityDecl	1070	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	getEntityContainer	1086	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	CXXBasesListInfo	356	4	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1263	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1270	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1271	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1272	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1274	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1277	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1278	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1280	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1283	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1285	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1289	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1292	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1294	7	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1297	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1298	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1299	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1300	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1301	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1302	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1303	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1304	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1305	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityKindFromSymbolKind	1306	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityLangFromSymbolLang	1324	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityLangFromSymbolLang	1325	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityLangFromSymbolLang	1326	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getEntityLangFromSymbolLang	1327	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	isFunctionLocalDecl	428	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	isFunctionLocalDecl	431	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	isFunctionLocalDecl	435	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	getEntityKindFromSymbolKind	1307	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	getEntityLangFromSymbolLang	1328	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	isFunctionLocalDecl	438	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	AttrListInfo	292	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	AttrListInfo	295	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: Case detected after default	AttrListInfo	298	7	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      For loop contains more than one loop counter	handleCXXRecordDecl	1009	25	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	ObjCProtocolListInfo	243	29	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	ObjCProtocolListInfo	243	62	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	ObjCProtocolListInfo	257	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	ObjCProtocolListInfo	260	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	AttrListInfo	304	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	AttrListInfo	327	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	CXXBasesListInfo	364	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	CXXBasesListInfo	369	21	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	handleCXXRecordDecl	1009	66	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	ObjCProtocolListInfo	243	68	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	ObjCProtocolListInfo	257	56	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	ObjCProtocolListInfo	260	56	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	AttrListInfo	304	58	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	AttrListInfo	327	52	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	CXXBasesListInfo	364	56	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Inappropriate condition test in for loop	CXXBasesListInfo	369	56	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      No exit point in function	IndexingDeclVisitor	30	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleDeclOccurence	157	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ObjCProtocolListInfo	237	43	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IBOutletCollectionInfo	265	24	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	AttrListInfo	279	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CXXBasesListInfo	338	39	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getBaseLoc	373	54	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	toCStr	396	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isFunctionLocalDecl	420	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	shouldAbort	444	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	ppIncludedFile	460	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	importedModule	478	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	importedPCH	505	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	indexDiagnostics	527	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	handleDiagnosticSet	535	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleDecl	542	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleTagDecl	648	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleObjCInterface	663	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleObjCProtocol	719	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleReference	891	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleReference	905	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isNotFromSourceFile	953	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	addContainerInMap	962	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getClientEntity	981	39	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	setClientEntity	990	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	handleCXXRecordDecl	996	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	markEntityOccurrenceInFile	1029	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getEntityDecl	1051	38	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getEntityContainer	1074	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getClientContainerForDC	1090	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getIndexFile	1101	37	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getIndexLoc	1112	30	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	translateLoc	1122	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getEntityKindFromSymbolKind	1261	23	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getEntityKindFromSymbolProperties	1312	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getEntityLangFromSymbolLang	1322	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getEntityInfo	1157	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getRefCursor	1215	30	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	shouldIgnoreIfImplicit	1236	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isTemplateImplicitInstantiation	1250	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value Role not const qualified	Role	151	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Roles not const qualified	Roles	158	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Relations not const qualified	Relations	158	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	159	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXRole not const qualified	CXRole	188	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Roles not const qualified	Roles	225	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	226	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IdxCtx not const qualified	IdxCtx	239	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SA not const qualified	SA	240	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	244	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ProtInfo not const qualified	ProtInfo	248	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value e not const qualified	e	257	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value e not const qualified	e	260	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	286	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	287	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value e not const qualified	e	304	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InterfaceLocStart not const qualified	InterfaceLocStart	310	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ty not const qualified	Ty	316	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value e not const qualified	e	327	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value attrs not const qualified	attrs	334	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IdxCtx not const qualified	IdxCtx	339	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SA not const qualified	SA	340	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	344	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	345	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BaseInfo not const qualified	BaseInfo	358	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value e not const qualified	e	364	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value e not const qualified	e	369	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	375	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	396	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	404	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PP not const qualified	PP	416	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value idxFile not const qualified	idxFile	452	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value hashLoc not const qualified	hashLoc	460	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value filename not const qualified	filename	461	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isImport not const qualified	isImport	463	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isAngled not const qualified	isAngled	463	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isModuleImport not const qualified	isModuleImport	464	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SA not const qualified	SA	468	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value idxFile not const qualified	idxFile	474	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Mod not const qualified	Mod	482	10	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SrcMod not const qualified	SrcMod	490	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value astFile not const qualified	astFile	501	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value astFile not const qualified	astFile	516	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DiagSet not const qualified	DiagSet	531	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXDiagSet not const qualified	CXDiagSet	535	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	543	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	543	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	602	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	602	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isRedeclaration not const qualified	isRedeclaration	670	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ContDInfo not const qualified	ContDInfo	671	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SuperLoc not const qualified	SuperLoc	686	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EmptyProtoList not const qualified	EmptyProtoList	695	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isRedeclaration not const qualified	isRedeclaration	725	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ContDInfo not const qualified	ContDInfo	726	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EmptyProtoList not const qualified	EmptyProtoList	736	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ClassLoc not const qualified	ClassLoc	754	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CategoryLoc not const qualified	CategoryLoc	755	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ClassLoc not const qualified	ClassLoc	787	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CategoryLoc not const qualified	CategoryLoc	788	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	810	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	835	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	891	77	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Kind not const qualified	Kind	895	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Role not const qualified	Role	896	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	900	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	905	77	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Cursor not const qualified	Cursor	906	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Kind not const qualified	Kind	910	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Role not const qualified	Role	911	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ParentEntity not const qualified	ParentEntity	932	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Container not const qualified	Container	939	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	953	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	956	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileLoc not const qualified	FileLoc	957	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	958	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value container not const qualified	container	963	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client not const qualified	client	990	75	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value e not const qualified	e	1009	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	1014	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	1030	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	1034	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value LocInfo not const qualified	LocInfo	1037	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	1038	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RefOccur not const qualified	RefOccur	1045	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value res not const qualified	res	1047	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	1112	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	1122	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value indexFile not const qualified	indexFile	1123	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	1123	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value line not const qualified	line	1124	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value column not const qualified	column	1124	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value offset not const qualified	offset	1125	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SM not const qualified	SM	1129	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value LocInfo not const qualified	LocInfo	1132	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	1133	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileOffset not const qualified	FileOffset	1134	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	1261	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Lang not const qualified	Lang	1261	80	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	1312	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value L not const qualified	L	1322	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EntityInfo not const qualified	EntityInfo	1158	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SA not const qualified	SA	1159	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SymInfo not const qualified	SymInfo	1168	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value II not const qualified	II	1182	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StrBuf not const qualified	StrBuf	1189	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value OS not const qualified	OS	1191	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value StrBuf not const qualified	StrBuf	1198	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ignore not const qualified	Ignore	1199	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	1215	78	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	IdxCtx	239	57	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SA	240	50	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	IdxCtx	332	57	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	IdxCtx	339	56	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SA	340	49	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	EntityInfo	1158	48	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	SA	1159	50	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration IndexingDeclVisitor.	IndexingDeclVisitor	24	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getSymbolRole.	getSymbolRole	151	13	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getEntityKindFromSymbolKind.	getEntityKindFromSymbolKind	1152	23	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getEntityKindFromSymbolProperties.	getEntityKindFromSymbolProperties	1154	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getEntityLangFromSymbolLang.	getEntityLangFromSymbolLang	1155	27	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXIndexDataConsumer.cpp.	CXIndexDataConsumer.cpp	18	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXIndexDataConsumer.cpp.	CXIndexDataConsumer.cpp	19	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXIndexDataConsumer.cpp.	CXIndexDataConsumer.cpp	20	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXIndexDataConsumer.cpp.	CXIndexDataConsumer.cpp	21	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Violation: function "clang::cxindex::CXIndexDataConsumer::getEntityDecl" is directly recursive, which is unsafe.	getEntityDecl	1057	11	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Init-declarator-list contains more than one init-declarator: RefEntity.	RefEntity	932	13	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Violation: in function definition for "getEntityKindFromSymbolKind", parameter identifiers do not match: (SymbolLanguage L) vs (SymbolLanguage Lang)	getEntityKindFromSymbolKind	1152	23	MISRA08_8-4-2	8-4-2 Use the same identifier in definition and declaration of functions.
      Violation: in function definition for "getEntityKindFromSymbolKind", parameter identifiers do not match: (SymbolLanguage L) vs (SymbolLanguage Lang)	getEntityKindFromSymbolKind	1261	23	MISRA08_8-4-2	8-4-2 Use the same identifier in definition and declaration of functions.
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	175	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	197	27	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	206	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	214	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	426	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	649	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	831	25	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	900	40	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1053	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1056	23	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1060	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1062	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1065	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1075	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1079	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1082	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1185	13	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1185	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1185	53	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1210	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1216	27	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1218	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1220	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1222	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1224	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1226	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1228	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1230	27	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1237	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1239	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1241	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1243	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier isa used incorrectly	isa	1245	6	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1252	13	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1255	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	309	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Member function VisitMSPropertyDecl can be made static, but is not static	VisitMSPropertyDecl	49	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitUsingDecl can be made static, but is not static	VisitUsingDecl	116	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function VisitUsingDirectiveDecl can be made static, but is not static	VisitUsingDirectiveDecl	120	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function setClientEntity can be made const, but is not const	setClientEntity	990	26	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Identifier is typographically ambiguous to i	I	243	9	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Empty	empty	397	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Cursor	cursor	683	12	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to parent	Parent	206	56	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Data	data	399	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CXIndexDataConsumer.h					
      Static Identifier 'getASTContext' reused	getASTContext	340	14	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: Explicit Public Function "clang::cxindex::ScratchAlloc::ScratchAlloc" (which has external linkage) defined multiple times.	ScratchAlloc	512	21	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::ScratchAlloc::ScratchAlloc" (which has external linkage) defined multiple times.	ScratchAlloc	515	21	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::DeclInfo::DeclInfo" (which has external linkage) defined multiple times.	DeclInfo	86	2	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::DeclInfo::DeclInfo" (which has external linkage) defined multiple times.	DeclInfo	96	2	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::IBOutletCollectionInfo::IBOutletCollectionInfo" (which has external linkage) defined multiple times.	IBOutletCollectionInfo	226	2	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::ObjCContainerDeclInfo::ObjCContainerDeclInfo" (which has external linkage) defined multiple times.	ObjCContainerDeclInfo	112	2	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "clang::cxindex::ObjCContainerDeclInfo::ObjCContainerDeclInfo" (which has external linkage) defined multiple times.	ObjCContainerDeclInfo	119	2	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Identifier is typographically ambiguous to attrs	Attrs	242	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ctx	Ctx	276	14	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to containerInfo	ContainerInfo	60	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Violation: ScratchAlloc defined but not called.	ScratchAlloc	515	21	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: DeclInfo defined but not called.	DeclInfo	96	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: ObjCContainerDeclInfo defined but not called.	ObjCContainerDeclInfo	119	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	128	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	153	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	167	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	182	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	195	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	206	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	234	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getAttrs defined but not called.	getAttrs	255	30	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getNumAttrs defined but not called.	getNumAttrs	260	11	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: Retain defined but not called.	Retain	265	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: Release defined but not called.	Release	266	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: shouldIndexImplicitTemplateInsts defined but not called.	shouldIndexImplicitTemplateInsts	354	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Variable	AttrList	51	35	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Constructor with Single Argument is not explicit	ObjCInterfaceDeclInfo	147	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Constructor with Single Argument is not explicit	ObjCProtocolDeclInfo	161	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Identifier is typographically ambiguous to IdxCtx	idxCtx	512	55	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SemanticContainer	semanticContainer	93	22	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to DeclAsContainer	declAsContainer	93	4	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Kind	kind	0	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ClientData	clientData	334	35	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXTU	cxTU	335	59	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to IndexOptions	indexOptions	335	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "A" possibly hiding outer definition from line 212	A	214	69	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      The class, union or enum name ScratchAlloc, has been reused	ScratchAlloc	36	11	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      The class, union or enum name ScratchAlloc, has been reused	ScratchAlloc	37	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      The class, union or enum name CXIndexDataConsumer, has been reused	CXIndexDataConsumer	334	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      This header file will violate the One Definition Rule if included more than once because if defines EntityInfo.	EntityInfo	53	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines DeclInfo.	DeclInfo	86	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines DeclInfo.	DeclInfo	96	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ObjCContainerDeclInfo.	ObjCContainerDeclInfo	112	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ObjCContainerDeclInfo.	ObjCContainerDeclInfo	119	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	128	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines init.	init	133	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ObjCInterfaceDeclInfo.	ObjCInterfaceDeclInfo	147	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	153	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ObjCProtocolDeclInfo.	ObjCProtocolDeclInfo	161	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	167	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ObjCCategoryDeclInfo.	ObjCCategoryDeclInfo	176	11	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	182	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines ObjCPropertyDeclInfo.	ObjCPropertyDeclInfo	190	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	195	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines CXXClassDeclInfo.	CXXClassDeclInfo	203	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	206	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines AttrInfo.	AttrInfo	214	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines IBOutletCollectionInfo.	IBOutletCollectionInfo	226	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	234	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getAttrs.	getAttrs	255	30	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getNumAttrs.	getNumAttrs	260	11	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines Retain.	Retain	265	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines Release.	Release	266	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines CXIndexDataConsumer.	CXIndexDataConsumer	334	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getASTContext.	getASTContext	340	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getCXTU.	getCXTU	341	20	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines shouldSuppressRefs.	shouldSuppressRefs	346	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines shouldIndexFunctionLocalSymbols.	shouldIndexFunctionLocalSymbols	350	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines shouldIndexImplicitTemplateInsts.	shouldIndexImplicitTemplateInsts	354	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines hasDiagnosticCallback.	hasDiagnosticCallback	362	7	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getCursor.	getCursor	503	11	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getListInfo.	getListInfo	303	33	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getBases.	getBases	319	37	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getNumBases.	getNumBases	322	13	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      A type, object or function used in multiple translation units declared more than once: FileEntry.	FileEntry	20	8	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      Violation: basic numerical type "char" used in "const char *".	toCStr	41	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	copyCStr	42	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Improper '--' declaration.		268	18	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		513	10	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '++' declaration.		516	10	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Improper '--' declaration.		520	10	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      If statement not enclosed in curly braces { } in ScratchAlloc.	~ScratchAlloc	522	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ObjCContainerDeclInfo.	init	135	59	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ObjCContainerDeclInfo.	init	137	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in ObjCContainerDeclInfo.	init	139	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in AttrListInfo.	getAttrs	257	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      No exit point in function	ScratchAlloc	512	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ScratchAlloc	515	21	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	EntityInfo	53	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	DeclInfo	86	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	DeclInfo	96	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ObjCContainerDeclInfo	112	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ObjCContainerDeclInfo	119	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ObjCInterfaceDeclInfo	147	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ObjCProtocolDeclInfo	161	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ObjCCategoryDeclInfo	176	11	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	ObjCPropertyDeclInfo	190	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CXXClassDeclInfo	203	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	AttrInfo	214	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IBOutletCollectionInfo	226	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getAttrs	255	30	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	CXIndexDataConsumer	334	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value isRedeclaration not const qualified	isRedeclaration	86	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isDefinition not const qualified	isDefinition	86	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isContainer not const qualified	isContainer	86	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isRedeclaration not const qualified	isRedeclaration	97	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isDefinition not const qualified	isDefinition	97	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isContainer not const qualified	isContainer	97	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isImplementation not const qualified	isImplementation	114	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isImplementation not const qualified	isImplementation	122	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isForwardRef not const qualified	isForwardRef	133	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isImplementation not const qualified	isImplementation	133	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Kind not const qualified	Kind	214	25	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	214	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	214	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Info not const qualified	Info	304	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Const memeber function getASTContext returning non-const pointer or reference to class-data	getASTContext	340	14	MISRA08_9-3-1	9-3-1 Const member functions shall not return non-const pointers or references to class-data
      Member function EntityInfo can be made const, but is not const	EntityInfo	53	2	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function Retain can be made static, but is not static	Retain	265	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
    CXLoadedDiagnostic.cpp					
      Violation: clang_loadDiagnostics defined but not called.	clang_loadDiagnostics	389	16	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: CXLoadedDiagnosticSetImpl defined but not called.	CXLoadedDiagnosticSetImpl	37	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Variable	Categories	41	10	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	WarningFlags	42	10	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	FileNames	43	10	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	FakeFiles	46	14	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	Files	47	46	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Discarded Return Values	load	259	6	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Discarded Return Values	load	262	6	MISRA08_0-1-7	0-1-7 The value returned by a function having a non-void return type that is not an overloaded operator shall always be used
      Missing Virtual Keyword	~CXLoadedDiagnosticSetImpl	38	2	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Member data in non-POD class CXLoadedDiagnosticSetImpl is not private.	CXLoadedDiagnosticSetImpl	35	6	MISRA08_11-0-1	11-0-1 Member data in non-POD class types shall be private
      Macro CASE is defined within a block	CASE	76	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro CASE is undefined within a block	CASE	82	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      #undef used	CASE	82	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      Function like Macro defined in file CXLoadedDiagnostic.cpp	CASE	76	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Pre-processor used for something other than file inclusion or include guards	CASE	76	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		82	11	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXLoadedDiagnostic.cpp		76	66	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      A # or ## operator used in a macro in file CXLoadedDiagnostic.cpp	CASE	76	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      Identifier is typographically ambiguous to Error	error	188	25	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Error	error	390	61	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Message	message	259	42	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to offset	Offset	284	27	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to size	Size	338	70	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to severity	Severity	376	13	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to category	Category	377	13	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Comment appears to contain code in or near offset	offset	157		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      An object or function, clang_loadDiagnostics, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_loadDiagnostics	389	16	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "char" used in "const char *".	copyString	50	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "char *".	mem	51	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "unsigned int *".	line	150	54	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "unsigned int *".	column	151	54	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used in "unsigned int *".	offset	152	54	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	file	249	45	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	file	389	50	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CXLoadedDiagnostic.	getDiagnosticOption	111	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXLoadedDiagnostic.	getDiagnosticOption	115	71	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXLoadedDiagnostic.	getFixIt	144	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXLoadedDiagnostic.	decodeLocation	173	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXLoadedDiagnostic.	decodeLocation	175	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXLoadedDiagnostic.	decodeLocation	177	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXLoadedDiagnostic.	decodeLocation	179	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	reportBad	195	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	reportBad	197	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	DiagLoader	240	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	DiagLoader	242	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	readLocation	276	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	readLocation	280	73	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	readRange	298	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	readRange	300	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitEndOfDiagnostic	316	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitEndOfDiagnostic	318	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitCategoryRecord	325	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitDiagFlagRecord	333	68	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitFilenameRecord	343	64	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitSourceRangeRecord	355	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitFixitRecord	366	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitFixitRecord	369	61	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in DiagLoader.	visitDiagnosticRecord	381	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	77	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	78	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	79	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	80	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	81	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	84	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	getSeverity	85	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Redundant switch statement.	llvm_unreachable	75	2	MISRA08_6-4-8	6-4-8 Every switch statement shall have at least one case clause
      Exit point not at end of function	getSeverity	69	41	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getDiagnosticOption	109	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	DiagLoader	237	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	load	249	28	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	readLocation	272	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	readRange	289	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitCategoryRecord	322	28	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitDiagFlagRecord	330	28	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitFilenameRecord	338	28	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitSourceRangeRecord	351	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitFixitRecord	361	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitDiagnosticRecord	375	28	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value Blob not const qualified	Blob	50	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	95	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Disable not const qualified	Disable	109	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ReplacementRange not const qualified	ReplacementRange	141	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value location not const qualified	location	148	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	149	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value line not const qualified	line	150	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value column not const qualified	column	151	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value offset not const qualified	offset	152	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value code not const qualified	code	193	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value err not const qualified	err	193	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value err not const qualified	err	201	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileID not const qualified	FileID	274	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SR not const qualified	SR	291	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value startLoc not const qualified	startLoc	302	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value endLoc not const qualified	endLoc	303	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	314	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ID not const qualified	ID	322	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Name not const qualified	Name	322	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ID not const qualified	ID	330	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Name not const qualified	Name	330	71	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ID not const qualified	ID	338	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Size not const qualified	Size	338	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Timestamp not const qualified	Timestamp	339	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Name not const qualified	Name	340	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CodeToInsert not const qualified	CodeToInsert	363	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Severity not const qualified	Severity	376	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Category not const qualified	Category	377	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Flag not const qualified	Flag	377	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Message not const qualified	Message	377	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value error not const qualified	error	390	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value errorString not const qualified	errorString	391	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	error	390	61	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	errorString	391	48	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration Strings.	Strings	32	47	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXLoadedDiagnosticSetImpl.	CXLoadedDiagnosticSetImpl	35	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration makeLocation.	makeLocation	90	24	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration DiagLoader.	DiagLoader	187	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_loadDiagnostics.	clang_loadDiagnostics	389	16	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXLoadedDiagnostic.cpp.	CXLoadedDiagnostic.cpp	26	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Init-declarator-list contains more than one init-declarator: Start.	Start	292	32	MISRA08_8-0-1	8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively
      Function identifier make_unique used incorrectly	make_unique	250	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier make_unique used incorrectly	make_unique	309	31	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Data member Alloc not defined in constructor	CXLoadedDiagnosticSetImpl	37	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member Categories not defined in constructor	CXLoadedDiagnosticSetImpl	37	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member WarningFlags not defined in constructor	CXLoadedDiagnosticSetImpl	37	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member FileNames not defined in constructor	CXLoadedDiagnosticSetImpl	37	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member FO not defined in constructor	CXLoadedDiagnosticSetImpl	37	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member Files not defined in constructor	CXLoadedDiagnosticSetImpl	37	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member TopDiags not defined in constructor	DiagLoader	237	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member CurrentDiags not defined in constructor	DiagLoader	237	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Identifier is typographically ambiguous to allocate	Allocate	51	22	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    CXLoadedDiagnostic.h					
      Violation: CXLoadedDiagnostic defined but not called.	CXLoadedDiagnostic	25	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: classof defined but not called.	classof	61	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Missing Virtual Keyword	~CXLoadedDiagnostic	28	2	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getSeverity	31	23	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getLocation	34	19	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getSpelling	37	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getDiagnosticOption	40	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getCategory	43	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getCategoryText	46	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getNumRanges	49	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getRange	52	16	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getNumFixIts	55	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Missing Virtual Keyword	getFixIt	58	11	MISRA08_10-3-2	10-3-2 Each overriding virtual function shall be declared with the virtual keyword.
      Member data in non-POD class CXLoadedDiagnostic is not private.	CXLoadedDiagnostic	23	6	MISRA08_11-0-1	11-0-1 Member data in non-POD class types shall be private
      The class, union or enum name CXLoadedDiagnostic, has been reused	CXLoadedDiagnostic	25	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      This header file will violate the One Definition Rule if included more than once because if defines CXLoadedDiagnostic.	CXLoadedDiagnostic	25	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines classof.	classof	61	14	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines Location.	Location	78	4	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      Violation: basic numerical type "char" used in "const char *".	Spelling	85	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      No exit point in function	CXLoadedDiagnostic	25	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
    CXSourceLocation.cpp					
      Violation: clang_equalLocations defined but not called.	clang_equalLocations	45	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getRange defined but not called.	clang_getRange	56	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Range_isNull defined but not called.	clang_Range_isNull	81	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getRangeStart defined but not called.	clang_getRangeStart	86	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getRangeEnd defined but not called.	clang_getRangeEnd	98	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getLocation defined but not called.	clang_getLocation	114	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getLocationForOffset defined but not called.	clang_getLocationForOffset	149	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: createNullLocation defined but not called.	createNullLocation	187	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Location_isInSystemHeader defined but not called.	clang_Location_isInSystemHeader	199	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Location_isFromMainFile defined but not called.	clang_Location_isFromMainFile	210	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getPresumedLocation defined but not called.	clang_getPresumedLocation	262	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getInstantiationLocation defined but not called.	clang_getInstantiationLocation	293	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getSpellingLocation defined but not called.	clang_getSpellingLocation	302	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getFileLocation defined but not called.	clang_getFileLocation	339	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Identifier is typographically ambiguous to file	File	130	19	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      An object or function, clang_getNullLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNullLocation	40	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_equalLocations, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_equalLocations	45	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getNullRange, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNullRange	51	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getRange, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getRange	56	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_equalRanges, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_equalRanges	74	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Range_isNull, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Range_isNull	81	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getRangeStart, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getRangeStart	86	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getRangeEnd, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getRangeEnd	98	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getLocation	114	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getLocationForOffset, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getLocationForOffset	149	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Location_isInSystemHeader, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Location_isInSystemHeader	199	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Location_isFromMainFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Location_isFromMainFile	210	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getExpansionLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getExpansionLocation	221	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getPresumedLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getPresumedLocation	262	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getInstantiationLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getInstantiationLocation	293	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getSpellingLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getSpellingLocation	302	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFileLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFileLocation	339	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "int" used.	clang_Range_isNull	81	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Location_isInSystemHeader	199	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Location_isFromMainFile	210	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getRange	59	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getRange	66	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getLocation	123	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getLocation	125	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getLocation	135	71	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getLocation	144	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getLocationForOffset	157	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getLocationForOffset	165	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	178	19	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	180	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	182	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	184	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	190	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	192	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	194	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	createNullLocation	196	15	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_Location_isInSystemHeader	203	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_Location_isFromMainFile	214	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getExpansionLocation	253	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getExpansionLocation	255	51	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getExpansionLocation	257	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getExpansionLocation	259	54	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getPresumedLocation	288	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getPresumedLocation	289	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getPresumedLocation	290	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getSpellingLocation	316	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getSpellingLocation	327	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getSpellingLocation	330	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getSpellingLocation	332	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getSpellingLocation	334	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getSpellingLocation	336	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getFileLocation	353	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getFileLocation	363	57	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getFileLocation	366	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getFileLocation	368	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getFileLocation	370	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXSourceLocation.cpp.	clang_getFileLocation	372	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Multiple exit points from function	clang_getRange	56	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getRangeStart	86	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getRangeEnd	98	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getLocation	114	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getLocationForOffset	149	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Location_isInSystemHeader	199	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Location_isFromMainFile	210	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getExpansionLocation	221	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getPresumedLocation	262	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getSpellingLocation	302	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFileLocation	339	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value Result not const qualified	Result	41	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value loc1 not const qualified	loc1	45	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value loc2 not const qualified	loc2	45	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	52	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	60	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	68	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range1 not const qualified	range1	74	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range2 not const qualified	range2	74	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range not const qualified	range	81	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range not const qualified	range	86	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	89	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	93	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value range not const qualified	range	98	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	101	21	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	105	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	114	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	115	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value line not const qualified	line	116	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value column not const qualified	column	117	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	119	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	127	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXLoc not const qualified	CXLoc	139	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	149	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	150	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value offset not const qualified	offset	151	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	153	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	175	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value line not const qualified	line	175	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value column not const qualified	column	176	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value offset not const qualified	offset	176	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value filename not const qualified	filename	187	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value line not const qualified	line	187	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value column not const qualified	column	188	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value offset not const qualified	offset	188	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value location not const qualified	location	199	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value location not const qualified	location	210	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	231	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ExpansionLoc not const qualified	ExpansionLoc	240	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value fileID not const qualified	fileID	244	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	273	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value location not const qualified	location	293	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value file not const qualified	file	294	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value line not const qualified	line	295	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value column not const qualified	column	296	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value offset not const qualified	offset	297	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	313	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SpellLoc not const qualified	SpellLoc	321	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	323	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileOffset not const qualified	FileOffset	324	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	350	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileLoc not const qualified	FileLoc	357	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	359	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileOffset not const qualified	FileOffset	360	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	file	294	44	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	line	295	46	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	column	296	46	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	offset	297	46	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration isASTUnitSourceLocation.	isASTUnitSourceLocation	30	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNullLocation.	clang_getNullLocation	40	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_equalLocations.	clang_equalLocations	45	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNullRange.	clang_getNullRange	51	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getRange.	clang_getRange	56	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_equalRanges.	clang_equalRanges	74	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Range_isNull.	clang_Range_isNull	81	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getRangeStart.	clang_getRangeStart	86	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getRangeEnd.	clang_getRangeEnd	98	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getLocation.	clang_getLocation	114	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getLocationForOffset.	clang_getLocationForOffset	149	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration createNullLocation.	createNullLocation	175	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration createNullLocation.	createNullLocation	187	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Location_isInSystemHeader.	clang_Location_isInSystemHeader	199	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Location_isFromMainFile.	clang_Location_isFromMainFile	210	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getExpansionLocation.	clang_getExpansionLocation	221	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getPresumedLocation.	clang_getPresumedLocation	262	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getInstantiationLocation.	clang_getInstantiationLocation	293	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getSpellingLocation.	clang_getSpellingLocation	302	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFileLocation.	clang_getFileLocation	339	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXSourceLocation.cpp.	CXSourceLocation.cpp	23	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXSourceLocation.cpp.	CXSourceLocation.cpp	24	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
    CXSourceLocation.h					
      Violation: translateSourceLocation defined but not called.	translateSourceLocation	40	31	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: translateSourceRange defined but not called.	translateSourceRange	58	28	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: translateSourceLocation defined but not called.	translateSourceLocation	65	29	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter SM in Non Virtual Functions	SM	29	45	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter LangOpts in Non Virtual Functions	LangOpts	29	68	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      If statement not enclosed in curly braces { } in cxloc.	translateSourceLocation	32	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Unmodified value Loc not const qualified	Loc	30	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Result not const qualified	Result	34	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	41	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	59	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value L not const qualified	L	65	70	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value R not const qualified	R	69	63	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	Context	40	67	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Context	58	61	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
    CXStoredDiagnostic.cpp					
      Violation: basic numerical type "int" used in "unsigned int".	Range	86	56	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      If statement not enclosed in curly braces { } in CXStoredDiagnostic.	getLocation	42	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXStoredDiagnostic.	getDiagnosticOption	57	69	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXStoredDiagnostic.	getDiagnosticOption	63	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXStoredDiagnostic.	getNumRanges	81	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXStoredDiagnostic.	getNumFixIts	95	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	28	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	29	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	30	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	33	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getSeverity	34	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	getSeverity	35	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Multiple exit points from function	getSeverity	26	41	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getLocation	40	37	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getDiagnosticOption	52	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getNumRanges	79	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getNumFixIts	93	29	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value ID not const qualified	ID	53	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	86	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FixIt not const qualified	FixIt	99	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ReplacementRange not const qualified	ReplacementRange	100	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Using-directive found in file: CXStoredDiagnostic.cpp.	CXStoredDiagnostic.cpp	23	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: CXStoredDiagnostic.cpp.	CXStoredDiagnostic.cpp	24	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
    CXString.cpp					
      Violation: Function "clang::cxstring::createDup" (which has external linkage) defined multiple times.	createDup	67	9	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxstring::createDup" (which has external linkage) defined multiple times.	createDup	96	9	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxstring::createRef" (which has external linkage) defined multiple times.	createRef	57	9	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Function "clang::cxstring::createRef" (which has external linkage) defined multiple times.	createRef	80	9	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: clang_getCString defined but not called.	clang_getCString	163	12	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_disposeStringSet defined but not called.	clang_disposeStringSet	185	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: createRef defined but not called.	createRef	80	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: createDup defined but not called.	createDup	96	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: createCXString defined but not called.	createCXString	106	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: isManagedByPool defined but not called.	isManagedByPool	152	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getCXStringBuf defined but not called.	getCXStringBuf	134	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: File contains invalid dynamic memory statement.	free	176	8	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		114	21	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		116	17	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		130	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		136	11	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		188	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		189	2	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to Str	str	152	30	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to string	String	57	31	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to string	String	67	31	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to string	String	80	29	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to string	String	96	29	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to buf	Buf	138	15	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Set	set	185	41	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      An object or function, clang_getCString, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCString	163	12	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeString, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeString	170	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_disposeStringSet, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_disposeStringSet	185	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "char" used in "const char *".	clang_getCString	163	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	String	57	31	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	String	67	31	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "char *".	Spelling	98	8	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Loop or switch statement not enclosed in curly braces { } in CXString.cpp.	clang_disposeStringSet	187	41	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      Loop or switch statement not enclosed in curly braces { } in cxstring.	createSet	118	45	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in CXString.cpp.	clang_disposeString	176	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxstring.	createRef	59	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxstring.	createDup	69	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxstring.	createDup	72	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxstring.	createRef	88	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXStringPool.	getCXStringBuf	136	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Switch Incorrect: No default case	clang_disposeString	182	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      For loop contains more than one loop counter	clang_disposeStringSet	186	22	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	createSet	117	22	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      For loop contains more than one loop counter	~CXStringPool	128	60	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	~CXStringPool	129	18	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Multiple exit points from function	createRef	57	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	createDup	67	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	createRef	80	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getCXStringBuf	134	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCString	163	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value String not const qualified	String	96	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value buf not const qualified	buf	106	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SE not const qualified	SE	117	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value E not const qualified	E	128	62	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	134	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Buf not const qualified	Buf	138	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	144	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value str not const qualified	str	152	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value string not const qualified	string	163	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value string not const qualified	string	170	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value set not const qualified	set	185	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SE not const qualified	SE	186	24	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	set	185	41	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration CXStringFlag.	CXStringFlag	24	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCString.	clang_getCString	163	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeString.	clang_disposeString	170	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_disposeStringSet.	clang_disposeStringSet	185	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXString.cpp.	CXString.cpp	21	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Multiple declarations for an identifier straddle using-declaration: CXString.cpp.	clang	21	16	MISRA08_7-3-5	7-3-5 Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier
    CXString.h					
      Violation: Global Object "clang::cxstring::createRef" (which has external linkage) defined multiple times.	createRef	65	9	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Identifier is typographically ambiguous to data	Data	86	19	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Unused Variable	createRef	65	9	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Constructor with Single Argument is not explicit	CXStringBuf	89	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Identifier is typographically ambiguous to string	String	65	31	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "TU" possibly hiding outer definition from line 87	TU	89	32	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      This header file will violate the One Definition Rule if included more than once because if defines createRef.	createRef	65	9	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines CXStringBuf.	CXStringBuf	89	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      Unmodified value createRef not const qualified	createRef	65	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
    CXTranslationUnit.h					
      Violation: getTU defined but not called.	getTU	77	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: takeTU defined but not called.	takeTU	79	25	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Variable	CIdx	29	19	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	TheASTUnit	30	18	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	StringPool	31	33	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	Diagnostics	32	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	OverridenCursorsPool	33	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	CommentToXML	34	39	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Constructor with Single Argument is not explicit	CXTUOwner	74	2	MISRA08_12-1-3	12-1-3 All constructors that are callable with a single argument of fundamental type shall be declared explicit
      Macro LOG_BAD_TU is defined within a block	LOG_BAD_TU	63	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Function like Macro defined in file CXTranslationUnit.h	LOG_BAD_TU	63	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro arguments not enclosed in parentheses in file CXTranslationUnit.h	LOG_BAD_TU	63	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Pre-processor used for something other than file inclusion or include guards	LOG_BAD_TU	63	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXTranslationUnit.h		68	18	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Identifier is typographically ambiguous to TU	tu	74	35	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      The class, union or enum name CXTUOwner, has been reused	CXTUOwner	74	2	MISRA08_2-10-4	2-10-4 A class, union or enum name (including qualification, if any) shall be a unique identifier
      This header file will violate the One Definition Rule if included more than once because if defines CXTUOwner.	CXTUOwner	74	2	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines getTU.	getTU	77	25	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      This header file will violate the One Definition Rule if included more than once because if defines takeTU.	takeTU	79	25	MISRA08_3-1-1	3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule
      A type, object or function used in multiple translation units declared more than once: ASTUnit.	ASTUnit	21	8	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      If statement not enclosed in curly braces { } in cxtu.	getASTUnit	51	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Multiple exit points from function	getASTUnit	49	23	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value TU not const qualified	TU	49	52	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	59	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value retTU not const qualified	retTU	80	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration CXTranslationUnitImpl.	CXTranslationUnitImpl	28	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXTargetInfoImpl.	CXTargetInfoImpl	39	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Const memeber function getTU returning non-const pointer or reference to class-data	getTU	77	25	MISRA08_9-3-1	9-3-1 Const member functions shall not return non-const pointers or references to class-data
    CXType.cpp					
      Unreachable Code	clang_getFunctionTypeCallingConv	666	6	MISRA08_0-1-1	0-1-1 A project shall not contain unreachable code
      Violation: clang_getTypeSpelling defined but not called.	clang_getTypeSpelling	289	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTypedefDeclUnderlyingType defined but not called.	clang_getTypedefDeclUnderlyingType	304	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getEnumDeclIntegerType defined but not called.	clang_getEnumDeclIntegerType	322	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getEnumConstantDeclValue defined but not called.	clang_getEnumConstantDeclValue	340	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getEnumConstantDeclUnsignedValue defined but not called.	clang_getEnumConstantDeclUnsignedValue	356	19	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getFieldDeclBitWidth defined but not called.	clang_getFieldDeclBitWidth	372	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCanonicalType defined but not called.	clang_getCanonicalType	387	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isConstQualifiedType defined but not called.	clang_isConstQualifiedType	402	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isVolatileQualifiedType defined but not called.	clang_isVolatileQualifiedType	407	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isRestrictQualifiedType defined but not called.	clang_isRestrictQualifiedType	412	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getAddressSpace defined but not called.	clang_getAddressSpace	417	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTypedefName defined but not called.	clang_getTypedefName	430	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getPointeeType defined but not called.	clang_getPointeeType	441	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getTypeKindSpelling defined but not called.	clang_getTypeKindSpelling	541	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_equalTypes defined but not called.	clang_equalTypes	622	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isFunctionTypeVariadic defined but not called.	clang_isFunctionTypeVariadic	626	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getFunctionTypeCallingConv defined but not called.	clang_getFunctionTypeCallingConv	640	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getNumArgTypes defined but not called.	clang_getNumArgTypes	674	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getArgType defined but not called.	clang_getArgType	690	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorResultType defined but not called.	clang_getCursorResultType	717	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getCursorExceptionSpecificationType defined but not called.	clang_getCursorExceptionSpecificationType	768	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_isPODType defined but not called.	clang_isPODType	775	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getElementType defined but not called.	clang_getElementType	785	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getNumElements defined but not called.	clang_getNumElements	817	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getArrayElementType defined but not called.	clang_getArrayElementType	837	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getArraySize defined but not called.	clang_getArraySize	863	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getAlignOf defined but not called.	clang_Type_getAlignOf	880	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getClassType defined but not called.	clang_Type_getClassType	903	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getSizeOf defined but not called.	clang_Type_getSizeOf	914	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getOffsetOf defined but not called.	clang_Type_getOffsetOf	991	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getModifiedType defined but not called.	clang_Type_getModifiedType	1022	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_getOffsetOfField defined but not called.	clang_Cursor_getOffsetOfField	1033	10	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getCXXRefQualifier defined but not called.	clang_Type_getCXXRefQualifier	1052	24	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isBitField defined but not called.	clang_Cursor_isBitField	1070	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_getDeclObjCTypeEncoding defined but not called.	clang_getDeclObjCTypeEncoding	1079	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getNumTemplateArguments defined but not called.	clang_Type_getNumTemplateArguments	1114	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getTemplateArgumentAsType defined but not called.	clang_Type_getTemplateArgumentAsType	1126	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getObjCObjectBaseType defined but not called.	clang_Type_getObjCObjectBaseType	1139	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getNumObjCProtocolRefs defined but not called.	clang_Type_getNumObjCProtocolRefs	1151	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getObjCProtocolDecl defined but not called.	clang_Type_getObjCProtocolDecl	1163	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getNumObjCTypeArgs defined but not called.	clang_Type_getNumObjCTypeArgs	1179	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getObjCTypeArg defined but not called.	clang_Type_getObjCTypeArg	1191	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_visitFields defined but not called.	clang_Type_visitFields	1207	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Cursor_isAnonymous defined but not called.	clang_Cursor_isAnonymous	1235	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getNamedType defined but not called.	clang_Type_getNamedType	1248	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_isTransparentTagTypedef defined but not called.	clang_Type_isTransparentTagTypedef	1258	9	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_Type_getNullability defined but not called.	clang_Type_getNullability	1267	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter TA in Non Virtual Functions	TA	198	54	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter RD in Non Virtual Functions	RD	945	60	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Variable	TemplateDecl	182	16	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Non-volitile POD variable TemplateDecl has only one use.	TemplateDecl	182	16	MISRA08_0-1-4	0-1-4 A project shall not contain non-volatile POD variables having only one use
      #include statement preceded by code other than preprocesser directives or comments	CXType.cpp	70	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      #include statement preceded by code other than preprocesser directives or comments	CXType.cpp	73	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      #include statement preceded by code other than preprocesser directives or comments	CXType.cpp	609	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      #include statement preceded by code other than preprocesser directives or comments	CXType.cpp	612	0	MISRA08_16-0-1	16-0-1 #include directives in a file shall only be preceded by other preprocessor directives or comments
      Macro BTCASE is defined within a block	BTCASE	29	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro IMAGE_TYPE is defined within a block	IMAGE_TYPE	69	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro IMAGE_TYPE is undefined within a block	IMAGE_TYPE	71	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro EXT_OPAQUE_TYPE is defined within a block	EXT_OPAQUE_TYPE	72	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro BTCASE is undefined within a block	BTCASE	81	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro TKCASE is defined within a block	TKCASE	89	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro TKCASE is undefined within a block	TKCASE	120	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro TKIND is defined within a block	TKIND	543	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro IMAGE_TYPE is defined within a block	IMAGE_TYPE	608	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro IMAGE_TYPE is undefined within a block	IMAGE_TYPE	610	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro EXT_OPAQUE_TYPE is defined within a block	EXT_OPAQUE_TYPE	611	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro TKIND is undefined within a block	TKIND	618	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro TCALLINGCONV is defined within a block	TCALLINGCONV	646	8	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      Macro TCALLINGCONV is undefined within a block	TCALLINGCONV	668	7	MISRA08_16-0-2	16-0-2 Macros shall only be #define'd or #undef'd in the global namespace
      #undef used	IMAGE_TYPE	71	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      #undef used	BTCASE	81	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      #undef used	TKCASE	120	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      #undef used	IMAGE_TYPE	610	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      #undef used	TKIND	618	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      #undef used	TCALLINGCONV	668	7	MISRA08_16-0-3	16-0-3 #undef shall not be used
      Function like Macro defined in file CXType.cpp	BTCASE	29	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CXType.cpp	IMAGE_TYPE	69	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CXType.cpp	EXT_OPAQUE_TYPE	72	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CXType.cpp	TKCASE	89	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CXType.cpp	TKIND	543	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CXType.cpp	IMAGE_TYPE	608	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CXType.cpp	EXT_OPAQUE_TYPE	611	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file CXType.cpp	TCALLINGCONV	646	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Pre-processor used for something other than file inclusion or include guards	BTCASE	29	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	IMAGE_TYPE	69	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	EXT_OPAQUE_TYPE	72	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	TKCASE	89	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	TKIND	543	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	IMAGE_TYPE	608	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	EXT_OPAQUE_TYPE	611	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	TCALLINGCONV	646	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		71	17	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		81	13	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		120	13	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		610	17	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		618	12	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards		668	19	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		29	56	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		69	72	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		72	53	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		89	49	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		543	55	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		608	71	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		611	52	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file CXType.cpp		646	61	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      More than one # or ## operator used a single macro in file CXType.cpp	TKIND	543	0	MISRA08_16-3-1	16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition
      More than one # or ## operator used a single macro in file CXType.cpp	TCALLINGCONV	646	0	MISRA08_16-3-1	16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition
      A # or ## operator used in a macro in file CXType.cpp	BTCASE	29	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      A # or ## operator used in a macro in file CXType.cpp	TKCASE	89	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      A # or ## operator used in a macro in file CXType.cpp	TKIND	543	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      A # or ## operator used in a macro in file CXType.cpp	TCALLINGCONV	646	0	MISRA08_16-3-2	16-3-2 The # and ## operators should not be used
      Identifier is typographically ambiguous to i	I	946	19	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to s	S	991	56	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "TT" possibly hiding outer definition from line 1258	TT	1260	12	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Comment appears to contain code in or near CXTypeLayoutError_Undeduced	CXTypeLayoutError_Undeduced	899		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      Function try_again declared at block scope	try_again	448	0	MISRA08_3-1-2	3-1-2 Functions shall not be declared at block scope
      Function try_again declared at block scope	try_again	491	0	MISRA08_3-1-2	3-1-2 Functions shall not be declared at block scope
      An object or function, TemplateDecl, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	TemplateDecl	182	16	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorType	214	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTypeSpelling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTypeSpelling	289	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTypedefDeclUnderlyingType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTypedefDeclUnderlyingType	304	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getEnumDeclIntegerType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getEnumDeclIntegerType	322	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getEnumConstantDeclValue, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getEnumConstantDeclValue	340	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getEnumConstantDeclUnsignedValue, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getEnumConstantDeclUnsignedValue	356	19	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFieldDeclBitWidth, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFieldDeclBitWidth	372	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCanonicalType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCanonicalType	387	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isConstQualifiedType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isConstQualifiedType	402	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isVolatileQualifiedType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isVolatileQualifiedType	407	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isRestrictQualifiedType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isRestrictQualifiedType	412	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getAddressSpace, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getAddressSpace	417	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTypedefName, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTypedefName	430	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getPointeeType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getPointeeType	441	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTypeDeclaration, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTypeDeclaration	479	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getTypeKindSpelling, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getTypeKindSpelling	541	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_equalTypes, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_equalTypes	622	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isFunctionTypeVariadic, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isFunctionTypeVariadic	626	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getFunctionTypeCallingConv, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getFunctionTypeCallingConv	640	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getNumArgTypes, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNumArgTypes	674	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getArgType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getArgType	690	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getResultType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getResultType	706	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorResultType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorResultType	717	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getExceptionSpecificationType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getExceptionSpecificationType	757	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getCursorExceptionSpecificationType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getCursorExceptionSpecificationType	768	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_isPODType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_isPODType	775	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getElementType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getElementType	785	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getNumElements, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getNumElements	817	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getArrayElementType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getArrayElementType	837	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getArraySize, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getArraySize	863	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getAlignOf, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getAlignOf	880	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getClassType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getClassType	903	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getSizeOf, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getSizeOf	914	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getOffsetOf, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getOffsetOf	991	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getModifiedType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getModifiedType	1022	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_getOffsetOfField, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_getOffsetOfField	1033	10	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getCXXRefQualifier, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getCXXRefQualifier	1052	24	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isBitField, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isBitField	1070	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_getDeclObjCTypeEncoding, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_getDeclObjCTypeEncoding	1079	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getNumTemplateArguments, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getNumTemplateArguments	1114	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getTemplateArgumentAsType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getTemplateArgumentAsType	1126	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getObjCObjectBaseType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getObjCObjectBaseType	1139	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getNumObjCProtocolRefs, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getNumObjCProtocolRefs	1151	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getObjCProtocolDecl, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getObjCProtocolDecl	1163	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getNumObjCTypeArgs, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getNumObjCTypeArgs	1179	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getObjCTypeArg, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getObjCTypeArg	1191	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_visitFields, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_visitFields	1207	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Cursor_isAnonymous, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Cursor_isAnonymous	1235	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getNamedType, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getNamedType	1248	7	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_isTransparentTagTypedef, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_isTransparentTagTypedef	1258	9	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_Type_getNullability, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_Type_getNullability	1267	27	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "long" used in "long long".	clang_getEnumConstantDeclValue	340	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "unsigned long long".	clang_getEnumConstantDeclUnsignedValue	356	19	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_getFieldDeclBitWidth	372	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_getNumArgTypes	674	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_getExceptionSpecificationType	757	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_getCursorExceptionSpecificationType	768	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_getNumElements	817	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_getArraySize	863	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_Type_getAlignOf	880	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_Type_getSizeOf	914	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	visitRecordForValidation	945	17	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	validateFieldParentType	965	17	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_Type_getOffsetOf	991	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	clang_Cursor_getOffsetOfField	1033	10	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_Type_getNumTemplateArguments	1114	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	s	542	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	result	818	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	result	864	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	ret	955	18	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	Error	985	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	S	991	56	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	Error	994	12	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "long" used in "long long".	Error	1038	14	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Loop or switch statement not enclosed in curly braces { } in CXType.cpp.	GetTemplateArgumentArraySize	1110	33	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in CXType.cpp.	GetTypeKind	87	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	TemplateArgumentToQualType	193	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	FindTemplateArgumentTypeAt	203	78	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	FindTemplateArgumentTypeAt	208	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	219	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	230	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	233	56	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	235	61	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	237	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	239	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	241	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorType	243	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypeSpelling	292	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getFieldDeclBitWidth	380	56	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCanonicalType	389	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCanonicalType	395	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypedefName	436	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getPointeeType	446	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getPointeeType	470	22	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypeDeclaration	481	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypeDeclaration	487	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypeDeclaration	508	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypeDeclaration	510	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypeDeclaration	518	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getTypeDeclaration	536	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_isFunctionTypeVariadic	629	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_isFunctionTypeVariadic	632	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_isFunctionTypeVariadic	635	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getFunctionTypeCallingConv	643	32	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getNumArgTypes	677	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getArgType	693	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getArgType	698	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getResultType	709	43	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getResultType	712	52	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorResultType	721	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getExceptionSpecificationType	760	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getExceptionSpecificationType	763	76	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getCursorExceptionSpecificationType	770	70	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_isPODType	778	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getAlignOf	882	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getAlignOf	889	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getAlignOf	891	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getAlignOf	893	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getAlignOf	896	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getAlignOf	896	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	916	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	921	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	929	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	931	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	933	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	936	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	936	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getSizeOf	941	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	visitRecordForValidation	949	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	visitRecordForValidation	951	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	visitRecordForValidation	957	20	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	validateFieldParentType	967	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	validateFieldParentType	972	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	validateFieldParentType	975	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	validateFieldParentType	977	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	validateFieldParentType	981	39	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	validateFieldParentType	983	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	validateFieldParentType	987	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getOffsetOf	996	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getOffsetOf	998	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getOffsetOf	1013	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getOffsetOf	1015	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getOffsetOf	1017	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getModifiedType	1025	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getModifiedType	1028	56	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Cursor_getOffsetOfField	1040	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Cursor_getOffsetOfField	1045	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Cursor_getOffsetOfField	1047	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getCXXRefQualifier	1055	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getCXXRefQualifier	1058	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Cursor_isBitField	1072	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Cursor_isBitField	1075	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getDeclObjCTypeEncoding	1081	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getDeclObjCTypeEncoding	1090	63	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getDeclObjCTypeEncoding	1092	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getDeclObjCTypeEncoding	1096	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getDeclObjCTypeEncoding	1098	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_getDeclObjCTypeEncoding	1099	9	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	GetTemplateArgumentArraySize	1110	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNumTemplateArguments	1117	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNumTemplateArguments	1121	13	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getTemplateArgumentAsType	1129	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getTemplateArgumentAsType	1133	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCObjectBaseType	1142	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCObjectBaseType	1146	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNumObjCProtocolRefs	1154	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNumObjCProtocolRefs	1158	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCProtocolDecl	1166	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCProtocolDecl	1170	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCProtocolDecl	1174	62	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNumObjCTypeArgs	1182	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNumObjCTypeArgs	1186	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCTypeArg	1194	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCTypeArg	1198	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getObjCTypeArg	1202	44	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_visitFields	1212	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_visitFields	1216	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_visitFields	1219	16	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Cursor_isAnonymous	1237	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNamedType	1253	74	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_isTransparentTagTypedef	1262	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CXType.cpp.	clang_Type_getNullability	1270	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxtype.	MakeCXType	145	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxtype.	MakeCXType	147	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxtype.	MakeCXType	149	27	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in cxtype.	MakeCXType	158	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      Else If with no following Else	clang_Cursor_isAnonymous	1246	2	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Else If with no following Else	MakeCXType	150	4	MISRA08_6-4-2	6-4-2 All if ... else if constructs shall be terminated with an else clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	31	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	32	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	33	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	34	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	35	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	36	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	37	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	38	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	39	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	40	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	41	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	42	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	43	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	44	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	45	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	46	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	47	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	48	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	49	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	50	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	51	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	52	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	53	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	54	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	55	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	56	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	57	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	58	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	59	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	60	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	61	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	62	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	63	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	64	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	65	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	66	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	67	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	68	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	74	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	75	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	76	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	77	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetBuiltinTypeKind	78	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	91	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	93	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	94	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	95	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	96	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	97	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	98	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	99	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	100	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	101	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	102	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	103	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	104	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	105	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	106	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	107	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	108	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	109	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	110	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	111	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	112	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	113	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	114	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	115	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	116	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	GetTypeKind	117	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorType	250	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorType	256	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorType	261	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorType	266	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorType	269	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getCursorType	272	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getPointeeType	448	13	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTypeDeclaration	491	11	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getTypeDeclaration	491	9	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	648	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	649	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	650	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	651	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	652	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	653	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	654	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	655	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	656	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	657	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	658	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	659	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	660	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	661	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	662	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	663	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	664	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_getFunctionTypeCallingConv	665	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	733	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	735	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	737	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	739	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	741	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	743	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	747	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	749	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	getExternalExceptionSpecificationKind	751	2	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Type_getCXXRefQualifier	1060	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Type_getCXXRefQualifier	1062	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Type_getCXXRefQualifier	1064	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Type_visitFields	1226	4	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Type_getNullability	1275	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Type_getNullability	1277	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Unconditional throw or break statement does not terminate non-empty switch-clause.	clang_Type_getNullability	1279	6	MISRA08_6-4-5	6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause
      Switch Incorrect: No default case	clang_getTypeKindSpelling	617	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_getFunctionTypeCallingConv	667	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	getExternalExceptionSpecificationKind	753	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_Type_getCXXRefQualifier	1066	2	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_Type_visitFields	1230	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Switch Incorrect: No default case	clang_Type_getNullability	1281	4	MISRA08_6-4-6	6-4-6 The final clause of a switch statement shall be the default-clause
      Redundant switch statement.		544	2	MISRA08_6-4-8	6-4-8 Every switch statement shall have at least one case clause
      For loop contains more than one loop counter	clang_Type_visitFields	1221	55	MISRA08_6-5-1	6-5-1 A for loop shall contain a single loop-counter which shall not have floating type
      Inappropriate condition test in for loop	clang_Type_visitFields	1222	18	MISRA08_6-5-2	6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to <=, <, > or >=
      Goto statement used as a back jump	try_again	448	0	MISRA08_6-6-2	6-6-2 The goto statement shall jump to a label declared later in the same function body
      Goto statement used as a back jump	try_again	491	0	MISRA08_6-6-2	6-6-2 The goto statement shall jump to a label declared later in the same function body
      Multiple exit points from function	GetBuiltinTypeKind	28	18	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	GetTypeKind	84	18	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	MakeCXType	124	15	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	TemplateArgumentToQualType	191	26	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	FindTemplateArgumentTypeAt	198	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorType	214	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTypeSpelling	289	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTypedefDeclUnderlyingType	304	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getEnumDeclIntegerType	322	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getEnumConstantDeclValue	340	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getEnumConstantDeclUnsignedValue	356	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFieldDeclBitWidth	372	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCanonicalType	387	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getAddressSpace	417	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTypedefName	430	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getPointeeType	441	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getTypeDeclaration	479	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_isFunctionTypeVariadic	626	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getFunctionTypeCallingConv	640	14	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getNumArgTypes	674	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getArgType	690	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getResultType	706	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorResultType	717	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getExternalExceptionSpecificationKind	731	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getExceptionSpecificationType	757	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getCursorExceptionSpecificationType	768	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_isPODType	775	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getAlignOf	880	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getSizeOf	914	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	visitRecordForValidation	945	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	validateFieldParentType	965	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getOffsetOf	991	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getModifiedType	1022	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_getOffsetOfField	1033	10	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getCXXRefQualifier	1052	24	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isBitField	1070	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_getDeclObjCTypeEncoding	1079	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getNumTemplateArguments	1114	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getTemplateArgumentAsType	1126	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getObjCObjectBaseType	1139	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getNumObjCProtocolRefs	1151	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getObjCProtocolDecl	1163	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getNumObjCTypeArgs	1179	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getObjCTypeArg	1191	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_visitFields	1207	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Cursor_isAnonymous	1235	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getNamedType	1248	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_isTransparentTagTypedef	1258	9	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_Type_getNullability	1267	27	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value Optional not const qualified	Optional	175	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	84	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	124	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	124	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ATT not const qualified	ATT	129	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PTT not const qualified	PTT	137	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	141	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value UnqualT not const qualified	UnqualT	143	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	160	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	167	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	171	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TA not const qualified	TA	198	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	214	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	217	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Context not const qualified	Context	221	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	223	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	250	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	256	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	261	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	289	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	290	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	294	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Str not const qualified	Str	295	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PP not const qualified	PP	297	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	304	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	306	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	312	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	322	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	324	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	330	15	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	340	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	356	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	372	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	387	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	391	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	392	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	402	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	403	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	407	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	408	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	412	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	413	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	417	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	418	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	430	37	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	431	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	441	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	483	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	541	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value A not const qualified	A	622	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value B not const qualified	B	622	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	626	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	627	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	640	54	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	641	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	674	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	675	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	690	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value i not const qualified	i	690	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	691	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value numParams not const qualified	numParams	696	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	706	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	707	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	717	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EST not const qualified	EST	731	65	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	757	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	758	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	768	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value X not const qualified	X	775	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	776	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	780	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	785	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	787	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	817	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	819	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	837	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	839	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	863	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	865	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	880	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	883	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	903	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	905	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	914	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	917	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FQT not const qualified	FQT	947	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ret not const qualified	ret	955	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PC not const qualified	PC	965	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PT not const qualified	PT	965	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RT not const qualified	RT	979	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Error not const qualified	Error	985	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PT not const qualified	PT	991	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PC not const qualified	PC	993	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Error not const qualified	Error	994	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	1000	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value II not const qualified	II	1001	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FieldName not const qualified	FieldName	1002	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1022	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1023	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ATT not const qualified	ATT	1027	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1033	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PC not const qualified	PC	1036	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PT not const qualified	PT	1037	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Error not const qualified	Error	1038	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	1043	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1052	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value QT not const qualified	QT	1053	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1070	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1079	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	1084	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TA not const qualified	TA	1106	72	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1114	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1115	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TA not const qualified	TA	1119	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1126	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index not const qualified	index	1126	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1127	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TA not const qualified	TA	1131	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1139	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1140	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1151	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1152	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value i not const qualified	i	1163	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1164	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1179	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1180	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1191	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value i not const qualified	i	1191	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1192	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value visitor not const qualified	visitor	1208	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	1209	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PC not const qualified	PC	1210	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value C not const qualified	C	1235	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1248	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1249	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TT not const qualified	TT	1258	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1259	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TT not const qualified	TT	1260	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	1261	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CT not const qualified	CT	1267	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value T not const qualified	T	1268	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	1272	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value nullability not const qualified	nullability	1273	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Inappropriate global declaration GetBuiltinTypeKind.	GetBuiltinTypeKind	28	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetTypeKind.	GetTypeKind	84	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetQualType.	GetQualType	167	23	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetTU.	GetTU	171	32	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration Optional.	Optional	175	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration assert.	assert	177	2	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration TemplateDecl.	TemplateDecl	182	16	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration TemplateArgumentToQualType.	TemplateArgumentToQualType	191	26	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration FindTemplateArgumentTypeAt.	FindTemplateArgumentTypeAt	198	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorType.	clang_getCursorType	214	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTypeSpelling.	clang_getTypeSpelling	289	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTypedefDeclUnderlyingType.	clang_getTypedefDeclUnderlyingType	304	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getEnumDeclIntegerType.	clang_getEnumDeclIntegerType	322	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getEnumConstantDeclValue.	clang_getEnumConstantDeclValue	340	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getEnumConstantDeclUnsignedValue.	clang_getEnumConstantDeclUnsignedValue	356	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFieldDeclBitWidth.	clang_getFieldDeclBitWidth	372	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCanonicalType.	clang_getCanonicalType	387	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isConstQualifiedType.	clang_isConstQualifiedType	402	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isVolatileQualifiedType.	clang_isVolatileQualifiedType	407	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isRestrictQualifiedType.	clang_isRestrictQualifiedType	412	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getAddressSpace.	clang_getAddressSpace	417	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTypedefName.	clang_getTypedefName	430	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getPointeeType.	clang_getPointeeType	441	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTypeDeclaration.	clang_getTypeDeclaration	479	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getTypeKindSpelling.	clang_getTypeKindSpelling	541	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_equalTypes.	clang_equalTypes	622	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isFunctionTypeVariadic.	clang_isFunctionTypeVariadic	626	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getFunctionTypeCallingConv.	clang_getFunctionTypeCallingConv	640	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNumArgTypes.	clang_getNumArgTypes	674	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getArgType.	clang_getArgType	690	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getResultType.	clang_getResultType	706	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorResultType.	clang_getCursorResultType	717	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getExternalExceptionSpecificationKind.	getExternalExceptionSpecificationKind	731	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getExceptionSpecificationType.	clang_getExceptionSpecificationType	757	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getCursorExceptionSpecificationType.	clang_getCursorExceptionSpecificationType	768	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_isPODType.	clang_isPODType	775	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getElementType.	clang_getElementType	785	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getNumElements.	clang_getNumElements	817	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getArrayElementType.	clang_getArrayElementType	837	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getArraySize.	clang_getArraySize	863	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getAlignOf.	clang_Type_getAlignOf	880	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getClassType.	clang_Type_getClassType	903	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getSizeOf.	clang_Type_getSizeOf	914	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration visitRecordForValidation.	visitRecordForValidation	945	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration validateFieldParentType.	validateFieldParentType	965	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getOffsetOf.	clang_Type_getOffsetOf	991	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getModifiedType.	clang_Type_getModifiedType	1022	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_getOffsetOfField.	clang_Cursor_getOffsetOfField	1033	10	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getCXXRefQualifier.	clang_Type_getCXXRefQualifier	1052	24	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isBitField.	clang_Cursor_isBitField	1070	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_getDeclObjCTypeEncoding.	clang_getDeclObjCTypeEncoding	1079	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration GetTemplateArgumentArraySize.	GetTemplateArgumentArraySize	1106	16	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getNumTemplateArguments.	clang_Type_getNumTemplateArguments	1114	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getTemplateArgumentAsType.	clang_Type_getTemplateArgumentAsType	1126	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getObjCObjectBaseType.	clang_Type_getObjCObjectBaseType	1139	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getNumObjCProtocolRefs.	clang_Type_getNumObjCProtocolRefs	1151	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getObjCProtocolDecl.	clang_Type_getObjCProtocolDecl	1163	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getNumObjCTypeArgs.	clang_Type_getNumObjCTypeArgs	1179	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getObjCTypeArg.	clang_Type_getObjCTypeArg	1191	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_visitFields.	clang_Type_visitFields	1207	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Cursor_isAnonymous.	clang_Cursor_isAnonymous	1235	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getNamedType.	clang_Type_getNamedType	1248	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_isTransparentTagTypedef.	clang_Type_isTransparentTagTypedef	1258	9	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_Type_getNullability.	clang_Type_getNullability	1267	27	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: CXType.cpp.	CXType.cpp	26	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_getCursorType.	clang_getCursorType	215	18	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_getTypedefDeclUnderlyingType.	clang_getTypedefDeclUnderlyingType	305	18	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_getEnumDeclIntegerType.	clang_getEnumDeclIntegerType	323	18	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_getEnumConstantDeclValue.	clang_getEnumConstantDeclValue	341	18	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_getEnumConstantDeclUnsignedValue.	clang_getEnumConstantDeclUnsignedValue	357	18	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: clang_getFieldDeclBitWidth.	clang_getFieldDeclBitWidth	373	18	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Violation: function "visitRecordForValidation" is directly recursive, which is unsafe.	visitRecordForValidation	955	24	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Violation: function "clang::cxtype::MakeCXType" is directly recursive, which is unsafe.	MakeCXType	133	15	MISRA08_7-5-4	7-5-4 No direct or indirect recursion allowed.
      Function identifier dyn_cast used incorrectly	dyn_cast	232	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	234	38	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	236	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	238	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	240	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	242	42	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	329	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	346	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	362	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	378	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	451	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	454	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	458	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	461	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	464	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	468	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	494	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	497	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	500	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	504	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	510	10	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	516	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	522	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	528	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	720	35	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	793	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	796	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	799	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	802	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	805	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	808	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	825	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	828	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	845	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	848	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	851	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	854	11	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	871	15	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	894	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	909	18	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	934	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	969	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1004	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1014	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1016	37	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1044	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1046	39	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1073	24	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1087	34	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1089	43	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1091	36	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1095	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1097	30	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1144	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1156	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1168	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1184	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	1196	29	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1214	8	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1223	26	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1239	32	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1241	33	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier cast used incorrectly	cast	1253	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast_or_null used incorrectly	dyn_cast_or_null	1260	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
    CXType.h					
      Identifier is typographically ambiguous to cxtype	CXType	25	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      A type, object or function used in multiple translation units declared more than once: ASTUnit.	ASTUnit	21	6	MISRA08_3-2-3	3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file
      Identifier is typographically ambiguous to cxtype	CXType	25	0	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXType	cxtype	23	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CXType	cxtype	23	10	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    Index_Internal.h					
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Unused Variable	isa	33	8	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	flags	34	6	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	reserved	35	6	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Unused Variable	invoke	36	25	MISRA08_0-1-3	0-1-3 A project shall not contain unused variables
      Function like Macro defined in file Index_Internal.h	__has_feature	19	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file Index_Internal.h	INVOKE_BLOCK2	24	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro defined in file Index_Internal.h	INVOKE_BLOCK2	30	0	MISRA08_16-0-4	16-0-4 Function-like macros shall not be defined
      Function like Macro arguments not enclosed in parentheses in file Index_Internal.h	INVOKE_BLOCK2	24	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Function like Macro arguments not enclosed in parentheses in file Index_Internal.h	INVOKE_BLOCK2	30	0	MISRA08_16-0-6	16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##
      Pre-processor used for something other than file inclusion or include guards	__has_feature	19	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	INVOKE_BLOCK2	24	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than file inclusion or include guards	INVOKE_BLOCK2	30	0	MISRA08_16-2-1	16-2-1 The pre-processor shall only be used for file inclusion and include guards
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file Index_Internal.h		19	26	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Pre-processor used for something other than include guards, type qualifiers or storage class specifiers in file Index_Internal.h		30	73	MISRA08_16-2-2	16-2-2 C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers
      Reserved Identifier, Macro, or Function defined, redefined or undefined in file Index_Internal.h	__has_feature	19	0	MISRA08_17-0-1	17-0-1 Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined
      Name for a standard library macro or object is reused in file Index_Internal.h	__has_feature	19	0	MISRA08_17-0-2	17-0-2 The names of standard library macros and objects shall not be reused
      Violation: basic numerical type "int" used.	flags	34	6	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	reserved	35	6	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Inappropriate global declaration _CXCursorAndRangeVisitorBlock.	_CXCursorAndRangeVisitorBlock	32	15	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CXCursorAndRangeVisitorBlock.	CXCursorAndRangeVisitorBlock	38	3	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration RangeComparisonResult.	RangeComparisonResult	43	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxcursor	CXCursor	36	7	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
    Indexing.cpp					
      Static Identifier 'getASTContext' reused	getASTContext	0	0	MISRA08_2-10-5	2-10-5 The identifier name of a non-member object or function with static storage duration should not be reused
      Violation: Public Function "PPRegion::PPRegion" (which has external linkage) defined multiple times.	PPRegion	75	2	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: Public Function "PPRegion::PPRegion" (which has external linkage) defined multiple times.	PPRegion	76	2	MISRA08_3-2-4	3-2-4 Is An identifier with external linkage shall have exactly one definition.
      Violation: operator== defined but not called.	operator==	85	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_isEntityObjCContainerKind defined but not called.	clang_index_isEntityObjCContainerKind	694	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getObjCContainerDeclInfo defined but not called.	clang_index_getObjCContainerDeclInfo	699	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getObjCInterfaceDeclInfo defined but not called.	clang_index_getObjCInterfaceDeclInfo	712	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getObjCCategoryDeclInfo defined but not called.	clang_index_getObjCCategoryDeclInfo	725	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getObjCProtocolRefListInfo defined but not called.	clang_index_getObjCProtocolRefListInfo	738	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getObjCPropertyDeclInfo defined but not called.	clang_index_getObjCPropertyDeclInfo	759	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getIBOutletCollectionAttrInfo defined but not called.	clang_index_getIBOutletCollectionAttrInfo	771	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getCXXClassDeclInfo defined but not called.	clang_index_getCXXClassDeclInfo	784	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getClientContainer defined but not called.	clang_index_getClientContainer	796	0	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_setClientContainer defined but not called.	clang_index_setClientContainer	803	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_getClientEntity defined but not called.	clang_index_getClientEntity	811	18	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_index_setClientEntity defined but not called.	clang_index_setClientEntity	818	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_IndexAction_create defined but not called.	clang_IndexAction_create	826	14	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_IndexAction_dispose defined but not called.	clang_IndexAction_dispose	830	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_indexSourceFile defined but not called.	clang_indexSourceFile	835	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_indexTranslationUnit defined but not called.	clang_indexTranslationUnit	914	4	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_indexLoc_getFileLocation defined but not called.	clang_indexLoc_getFileLocation	942	5	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: clang_indexLoc_getCXSourceLocation defined but not called.	clang_indexLoc_getCXSourceLocation	963	17	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: PPRegion defined but not called.	PPRegion	76	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getEmptyKey defined but not called.	getEmptyKey	99	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getTombstoneKey defined but not called.	getTombstoneKey	102	27	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getHashValue defined but not called.	getHashValue	106	20	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: isEqual defined but not called.	isEqual	116	16	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: TUSkipBodyControl defined but not called.	TUSkipBodyControl	156	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: IndexPPCallbacks defined but not called.	IndexPPCallbacks	227	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: FileChanged defined but not called.	FileChanged	230	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: InclusionDirective defined but not called.	InclusionDirective	244	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MacroDefined defined but not called.	MacroDefined	257	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MacroUndefined defined but not called.	MacroUndefined	261	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: MacroExpands defined but not called.	MacroExpands	266	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: SourceRangeSkipped defined but not called.	SourceRangeSkipped	272	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: IndexingConsumer defined but not called.	IndexingConsumer	285	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: Initialize defined but not called.	Initialize	290	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: HandleTranslationUnit defined but not called.	HandleTranslationUnit	295	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: HandleTopLevelDecl defined but not called.	HandleTopLevelDecl	300	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: shouldSkipFunctionBody defined but not called.	shouldSkipFunctionBody	304	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: HandleDiagnostic defined but not called.	HandleDiagnostic	339	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: IndexingFrontendAction defined but not called.	IndexingFrontendAction	357	2	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: CreateASTConsumer defined but not called.	CreateASTConsumer	361	31	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: getTranslationUnitKind defined but not called.	getTranslationUnitKind	384	22	MISRA08_0-1-10	0-1-10 All defined functions called
      Violation: hasCodeCompletionSupport defined but not called.	hasCodeCompletionSupport	390	7	MISRA08_0-1-10	0-1-10 All defined functions called
      Unused Parameter unsaved_files in Non Virtual Functions	unsaved_files	421	28	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter idxAction in Non Virtual Functions	idxAction	639	18	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter idxAction in Non Virtual Functions	idxAction	857	18	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter client_data in Non Virtual Functions	client_data	857	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter index_callbacks in Non Virtual Functions	index_callbacks	858	22	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter index_callbacks_size in Non Virtual Functions	index_callbacks_size	858	48	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter index_options in Non Virtual Functions	index_options	859	13	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter idxAction in Non Virtual Functions	idxAction	914	45	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter client_data in Non Virtual Functions	client_data	915	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter index_callbacks in Non Virtual Functions	index_callbacks	916	49	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter index_callbacks_size in Non Virtual Functions	index_callbacks_size	917	40	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter index_options in Non Virtual Functions	index_options	918	40	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter FileType in Non Virtual Functions	FileType	231	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter PrevFID in Non Virtual Functions	PrevFID	231	61	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter FilenameRange in Non Virtual Functions	FilenameRange	246	42	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter SearchPath in Non Virtual Functions	SearchPath	247	36	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter RelativePath in Non Virtual Functions	RelativePath	247	58	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter FileType in Non Virtual Functions	FileType	249	53	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Id in Non Virtual Functions	Id	257	33	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MD in Non Virtual Functions	MD	257	59	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MacroNameTok in Non Virtual Functions	MacroNameTok	261	35	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MD in Non Virtual Functions	MD	262	45	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter UD in Non Virtual Functions	UD	263	44	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MacroNameTok in Non Virtual Functions	MacroNameTok	266	33	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter MD in Non Virtual Functions	MD	266	70	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Range in Non Virtual Functions	Range	267	32	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Args in Non Virtual Functions	Args	267	56	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Range in Non Virtual Functions	Range	272	38	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter EndifLoc in Non Virtual Functions	EndifLoc	272	60	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter Ctx in Non Virtual Functions	Ctx	295	41	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter DG in Non Virtual Functions	DG	300	39	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Parameter InFile in Non Virtual Functions	InFile	362	59	MISRA08_0-1-11	0-1-11 A There shall be no unused parameters (named or unnamed) in non-virtual functions
      Unused Type declaration DenseMapInfo	DenseMapInfo	98	9	MISRA08_0-1-5	0-1-5 A project shall not contain unused type declarations
      Constructor TUSkipBodyControl does not call all the constructor(s) for its base class(es)	TUSkipBodyControl	156	2	MISRA08_12-1-2	12-1-2 All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes
      Template, template member function or template member not instantiated: DenseMapInfo	DenseMapInfo	98	9	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: getEmptyKey	getEmptyKey	99	27	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: getTombstoneKey	getTombstoneKey	102	27	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: getHashValue	getHashValue	106	20	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Template, template member function or template member not instantiated: isEqual	isEqual	116	16	MISRA08_14-7-1	14-7-1 All class templates, function templates, class template member functions and class template static members shall be instantiated at least once
      Violation: File contains invalid dynamic memory statement.		376	20	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		411	31	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		450	18	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		454	46	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		464	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		498	43	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		531	6	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		827	9	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Violation: File contains invalid dynamic memory statement.		832	4	MISRA08_18-4-1	18-4-1 Dynamic heap memory allocation shall not be used.
      Identifier is typographically ambiguous to rhs	RHS	116	61	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ModTime	modTime	76	69	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Offset	offset	76	54	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SessionData	sessionData	156	41	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SKData	skData	358	46	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to SKCtrl	skCtrl	285	73	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to PPRec	ppRec	157	50	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to PP	pp	158	34	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to DataConsumer	dataConsumer	227	58	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to DataConsumer	dataConsumer	285	40	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to ID	Id	257	33	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to DataConsumer	dataConsumer	357	62	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxtu	CXTU	530	29	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to cxindex	CXIndex	407	2	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to CIdx	cIdx	410	36	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Info	info	796	57	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Info	info	803	62	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Info	info	811	69	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Info	info	818	56	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to File	file	944	44	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Offset	offset	947	46	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier "UniqueID" possibly hiding outer definition from line 75	UniqueID	76	35	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Identifier "PP" possibly hiding outer definition from line 222	PP	227	33	MISRA08_2-10-2	2-10-2 Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope
      Comment appears to contain code in or near cxindex	cxindex	55		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      Comment appears to contain code in or near Args	Args	271		MISRA08_2-7-3	2-7-3 Sections of code should not be "commented out" using C++ comments
      <cstdio> included in file Indexing.cpp	cstdio	33	0	MISRA08_27-0-1	27-0-1 The stream input/output library <cstdio> shall not be used
      An object or function, operator==, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	operator==	85	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_isEntityObjCContainerKind, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_isEntityObjCContainerKind	694	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getObjCContainerDeclInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getObjCContainerDeclInfo	699	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getObjCInterfaceDeclInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getObjCInterfaceDeclInfo	712	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getObjCCategoryDeclInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getObjCCategoryDeclInfo	725	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getObjCProtocolRefListInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getObjCProtocolRefListInfo	738	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getObjCPropertyDeclInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getObjCPropertyDeclInfo	759	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getIBOutletCollectionAttrInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getIBOutletCollectionAttrInfo	771	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getCXXClassDeclInfo, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getCXXClassDeclInfo	784	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getClientContainer, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getClientContainer	796	0	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_setClientContainer, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_setClientContainer	803	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_getClientEntity, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_getClientEntity	811	18	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_index_setClientEntity, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_index_setClientEntity	818	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_IndexAction_create, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_IndexAction_create	826	14	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_IndexAction_dispose, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_IndexAction_dispose	830	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_indexSourceFile, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_indexSourceFile	835	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_indexSourceFileFullArgv, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_indexSourceFileFullArgv	856	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_indexTranslationUnit, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_indexTranslationUnit	914	4	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_indexLoc_getFileLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_indexLoc_getFileLocation	942	5	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      An object or function, clang_indexLoc_getCXSourceLocation, has external linkage and is not declared in a header file. Declare in header file or move to unnamed namespace.	clang_indexLoc_getCXSourceLocation	963	17	MISRA08_3-3-1	3-3-1 Objects or functions with external linkage shall be declared in a header file
      Violation: basic numerical type "int" used.	clang_index_isEntityObjCContainerKind	694	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_indexSourceFile	835	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_indexSourceFileFullArgv	856	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	clang_indexTranslationUnit	914	4	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	419	40	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	420	23	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	420	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	840	38	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	841	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	842	30	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *".	source_filename	859	40	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "char" used in "const char *const *".	command_line_args	860	23	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	num_command_line_args	860	46	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	i	865	13	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Violation: basic numerical type "int" used.	i	888	13	MISRA08_3-9-2	3-9-2 Typedefs that indicate size and signedness should be used in place of the basic numerical types
      Boolean operator used incorrectly in CreatePreambleOnFirstParse.	CreatePreambleOnFirstParse	587	36	MISRA08_4-5-1	4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator
      Improper '++' declaration.		866	6	MISRA08_5-2-10	5-2-10 The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
      Loop or switch statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFileFullArgv	866	41	MISRA08_6-3-1	6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	getIndexingOptionsFromCXOptions	400	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	getIndexingOptionsFromCXOptions	402	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	424	21	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	444	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	450	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	479	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	485	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	495	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	518	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	527	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	542	55	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	581	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	597	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	600	31	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	603	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFile_Impl	606	28	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	indexPreprocessingRecord	618	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	indexPreprocessingRecord	629	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexTranslationUnit_Impl	653	33	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexTranslationUnit_Impl	665	26	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexTranslationUnit_Impl	670	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexTranslationUnit_Impl	675	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexTranslationUnit_Impl	677	4	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCContainerDeclInfo	701	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCContainerDeclInfo	706	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCInterfaceDeclInfo	714	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCInterfaceDeclInfo	719	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCCategoryDeclInfo	727	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCCategoryDeclInfo	732	36	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCProtocolRefListInfo	740	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCProtocolRefListInfo	746	49	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCProtocolRefListInfo	750	42	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCProtocolRefListInfo	753	45	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCPropertyDeclInfo	761	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getObjCPropertyDeclInfo	765	38	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getIBOutletCollectionAttrInfo	773	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getIBOutletCollectionAttrInfo	778	30	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getCXXClassDeclInfo	786	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getCXXClassDeclInfo	790	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getClientContainer	798	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_setClientContainer	806	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_getClientEntity	813	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_index_setClientEntity	821	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_IndexAction_dispose	832	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFileFullArgv	870	35	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFileFullArgv	890	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFileFullArgv	897	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexSourceFileFullArgv	908	41	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexLoc_getFileLocation	948	37	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexLoc_getFileLocation	949	29	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexLoc_getFileLocation	950	23	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexLoc_getFileLocation	951	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexLoc_getFileLocation	952	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexLoc_getFileLocation	956	10	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in Indexing.cpp.	clang_indexLoc_getCXSourceLocation	966	34	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in TUSkipBodyControl.	isParsed	166	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in TUSkipBodyControl.	isParsed	170	25	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in TUSkipBodyControl.	isParsed	175	40	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexPPCallbacks.	FileChanged	233	12	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingConsumer.	HandleTranslationUnit	297	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingConsumer.	shouldSkipFunctionBody	313	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingConsumer.	shouldSkipFunctionBody	315	17	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingConsumer.	shouldSkipFunctionBody	322	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingConsumer.	shouldSkipFunctionBody	325	18	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in CaptureDiagnosticConsumer.	HandleDiagnostic	342	53	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingFrontendAction.	getTranslationUnitKind	386	24	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      If statement not enclosed in curly braces { } in IndexingFrontendAction.	getTranslationUnitKind	388	6	MISRA08_6-4-1	6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
      No exit point in function	PPRegion	76	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	TUSkipBodyControl	156	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	isParsed	163	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getRegion	184	11	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IndexPPCallbacks	227	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	FileChanged	230	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IndexingConsumer	285	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	shouldSkipFunctionBody	304	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IndexingFrontendAction	357	2	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	getTranslationUnitKind	384	22	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IndexSessionData	410	11	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_indexSourceFile_Impl	416	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	indexPreprocessingRecord	615	12	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_indexTranslationUnit_Impl	638	19	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getObjCContainerDeclInfo	699	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getObjCInterfaceDeclInfo	712	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getObjCCategoryDeclInfo	725	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getObjCProtocolRefListInfo	738	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getObjCPropertyDeclInfo	759	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getIBOutletCollectionAttrInfo	771	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getCXXClassDeclInfo	784	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getClientContainer	796	0	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	clang_index_setClientContainer	803	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_index_getClientEntity	811	18	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	clang_index_setClientEntity	818	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_indexSourceFileFullArgv	856	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IndexSourceFileImpl	873	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_indexTranslationUnit	914	4	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      No exit point in function	IndexTranslationUnitImpl	925	7	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Exit point not at end of function	clang_indexLoc_getFileLocation	942	5	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Multiple exit points from function	clang_indexLoc_getCXSourceLocation	963	17	MISRA08_6-6-5	6-6-5 A function shall have a single point of exit at the end of the function
      Unmodified value Set not const qualified	Set	134	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Regions not const qualified	Regions	139	33	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	163	31	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	163	43	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value region not const qualified	region	164	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RegionFID not const qualified	RegionFID	196	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RegionOffset not const qualified	RegionOffset	197	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	230	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Reason not const qualified	Reason	230	56	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileType not const qualified	FileType	231	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PrevFID not const qualified	PrevFID	231	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MainFileLoc not const qualified	MainFileLoc	236	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value HashLoc not const qualified	HashLoc	244	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileName not const qualified	FileName	245	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IsAngled not const qualified	IsAngled	245	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FilenameRange not const qualified	FilenameRange	246	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SearchPath not const qualified	SearchPath	247	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value RelativePath not const qualified	RelativePath	247	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FileType not const qualified	FileType	249	53	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isImport not const qualified	isImport	250	9	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	267	32	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Range not const qualified	Range	272	38	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value EndifLoc not const qualified	EndifLoc	272	60	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Context not const qualified	Context	290	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Ctx not const qualified	Ctx	295	41	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DG not const qualified	DG	300	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value D not const qualified	D	304	36	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	311	19	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value FID not const qualified	FID	317	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Offset not const qualified	Offset	318	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value level not const qualified	level	339	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CI not const qualified	CI	361	67	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InFile not const qualified	InFile	362	59	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PP not const qualified	PP	371	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PPRec not const qualified	PPRec	376	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_options not const qualified	index_options	397	64	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value cxIdxAction not const qualified	cxIdxAction	417	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	417	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_index_callbacks not const qualified	client_index_callbacks	418	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks_size not const qualified	index_callbacks_size	418	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_options not const qualified	index_options	419	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	420	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	421	28	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU_options not const qualified	TU_options	422	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value requestedToGetTU not const qualified	requestedToGetTU	425	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ClientCBSize not const qualified	ClientCBSize	436	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IdxSession not const qualified	IdxSession	440	20	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CaptureDiagnostics not const qualified	CaptureDiagnostics	446	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Diags not const qualified	Diags	454	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value BufOwner not const qualified	BufOwner	498	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value MB not const qualified	MB	505	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	524	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXTU not const qualified	CXTU	530	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value SkipBodies not const qualified	SkipBodies	539	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DataConsumer not const qualified	DataConsumer	544	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value InterAction not const qualified	InterAction	547	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IndexAction not const qualified	IndexAction	549	34	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Persistent not const qualified	Persistent	558	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PrecompilePreambleAfterNParses not const qualified	PrecompilePreambleAfterNParses	586	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DiagTrap not const qualified	DiagTrap	588	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Success not const qualified	Success	589	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Unit not const qualified	Unit	615	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value IdxCtx not const qualified	IdxCtx	615	73	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PP not const qualified	PP	616	16	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value isModuleFile not const qualified	isModuleFile	622	7	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value PPE not const qualified	PPE	623	27	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ID not const qualified	ID	624	28	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value idxAction not const qualified	idxAction	639	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	639	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_index_callbacks not const qualified	client_index_callbacks	640	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks_size not const qualified	index_callbacks_size	640	55	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_options not const qualified	index_options	641	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	641	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	644	4	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CXXIdx not const qualified	CXXIdx	651	12	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value ClientCBSize not const qualified	ClientCBSize	657	11	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value K not const qualified	K	694	58	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client not const qualified	client	804	57	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client not const qualified	client	819	51	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CIdx not const qualified	CIdx	826	47	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value idxAction not const qualified	idxAction	830	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value idxAction not const qualified	idxAction	835	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	836	39	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks not const qualified	index_callbacks	837	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks_size not const qualified	index_callbacks_size	838	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_options not const qualified	index_options	839	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	842	30	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	843	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	844	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_TU not const qualified	out_TU	845	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU_options not const qualified	TU_options	846	35	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value idxAction not const qualified	idxAction	857	18	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	857	42	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks not const qualified	index_callbacks	858	22	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks_size not const qualified	index_callbacks_size	858	48	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_options not const qualified	index_options	859	13	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_command_line_args not const qualified	num_command_line_args	860	46	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value unsaved_files not const qualified	unsaved_files	861	26	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value num_unsaved_files not const qualified	num_unsaved_files	861	50	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value out_TU not const qualified	out_TU	862	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU_options not const qualified	TU_options	862	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	863	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	872	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	882	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value idxAction not const qualified	idxAction	914	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value client_data not const qualified	client_data	915	44	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks not const qualified	index_callbacks	916	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_callbacks_size not const qualified	index_callbacks_size	917	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value index_options not const qualified	index_options	918	40	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value TU not const qualified	TU	919	49	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Log not const qualified	Log	920	2	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value result not const qualified	result	924	14	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value CRC not const qualified	CRC	931	29	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value location not const qualified	location	942	45	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value Loc not const qualified	Loc	954	17	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value DataConsumer not const qualified	DataConsumer	958	23	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified value location not const qualified	location	963	61	MISRA08_7-1-1	7-1-1 A variable which is not modified shall be const qualified
      Unmodified pointer or reference parameter not declared as const	Context	290	30	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Ctx	295	41	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	D	304	36	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	CI	361	67	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	client_index_callbacks	418	22	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	Unit	615	46	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	IdxCtx	615	73	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	client_index_callbacks	640	22	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	index_callbacks	837	44	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	843	48	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	out_TU	845	45	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	index_callbacks	858	22	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	unsaved_files	861	26	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	out_TU	862	23	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Unmodified pointer or reference parameter not declared as const	index_callbacks	916	49	MISRA08_7-1-2	7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified
      Inappropriate global declaration PPRegion.	PPRegion	70	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration operator==.	operator==	85	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration PPRegionSetTy.	PPRegionSetTy	91	33	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration SessionSkipBodyData.	SessionSkipBodyData	124	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration TUSkipBodyControl.	TUSkipBodyControl	145	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration IndexPPCallbacks.	IndexPPCallbacks	221	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration IndexingConsumer.	IndexingConsumer	280	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration CaptureDiagnosticConsumer.	CaptureDiagnosticConsumer	335	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration IndexingFrontendAction.	IndexingFrontendAction	350	6	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration getIndexingOptionsFromCXOptions.	getIndexingOptionsFromCXOptions	397	23	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration IndexSessionData.	IndexSessionData	406	7	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_indexSourceFile_Impl.	clang_indexSourceFile_Impl	416	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration indexPreprocessingRecord.	indexPreprocessingRecord	615	12	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_indexTranslationUnit_Impl.	clang_indexTranslationUnit_Impl	638	19	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_isEntityObjCContainerKind.	clang_index_isEntityObjCContainerKind	694	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getObjCContainerDeclInfo.	clang_index_getObjCContainerDeclInfo	699	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getObjCInterfaceDeclInfo.	clang_index_getObjCInterfaceDeclInfo	712	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getObjCCategoryDeclInfo.	clang_index_getObjCCategoryDeclInfo	725	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getObjCProtocolRefListInfo.	clang_index_getObjCProtocolRefListInfo	738	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getObjCPropertyDeclInfo.	clang_index_getObjCPropertyDeclInfo	759	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getIBOutletCollectionAttrInfo.	clang_index_getIBOutletCollectionAttrInfo	771	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getCXXClassDeclInfo.	clang_index_getCXXClassDeclInfo	784	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getClientContainer.	clang_index_getClientContainer	796	0	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_setClientContainer.	clang_index_setClientContainer	803	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_getClientEntity.	clang_index_getClientEntity	811	18	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_index_setClientEntity.	clang_index_setClientEntity	818	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_IndexAction_create.	clang_IndexAction_create	826	14	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_IndexAction_dispose.	clang_IndexAction_dispose	830	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_indexSourceFile.	clang_indexSourceFile	835	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_indexSourceFileFullArgv.	clang_indexSourceFileFullArgv	856	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_indexTranslationUnit.	clang_indexTranslationUnit	914	4	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_indexLoc_getFileLocation.	clang_indexLoc_getFileLocation	942	5	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Inappropriate global declaration clang_indexLoc_getCXSourceLocation.	clang_indexLoc_getCXSourceLocation	963	17	MISRA08_7-3-1	7-3-1 The global namespace shall only contain main, namespace declarations and extern 'C' declarations
      Using-directive found in file: Indexing.cpp.	Indexing.cpp	36	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: Indexing.cpp.	Indexing.cpp	37	23	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: Indexing.cpp.	Indexing.cpp	38	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Using-directive found in file: Indexing.cpp.	Indexing.cpp	39	16	MISRA08_7-3-4	7-3-4 using-directives shall not be used
      Function identifier make_shared used incorrectly	make_shared	545	9	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier make_unique used incorrectly	make_unique	547	27	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	705	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	718	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	731	18	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	745	20	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	749	19	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	752	44	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	764	45	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	777	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier dyn_cast used incorrectly	dyn_cast	789	42	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier IndexSourceFileImpl used incorrectly	IndexSourceFileImpl	884	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier IndexTranslationUnitImpl used incorrectly	IndexTranslationUnitImpl	933	22	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier make_unique used incorrectly	make_unique	372	28	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier make_unique used incorrectly	make_unique	378	21	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Function identifier make_unique used incorrectly	make_unique	381	17	MISRA08_8-4-4	8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &
      Data member ParsedRegions not defined in constructor	SessionSkipBodyData	129	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member ParsedRegions not defined in constructor	TUSkipBodyControl	156	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member NewParsedRegions not defined in constructor	TUSkipBodyControl	156	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member LastIsParsed not defined in constructor	TUSkipBodyControl	156	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Data member SKCtrl not defined in constructor	IndexingFrontendAction	357	2	MISRA08_8-5-1	8-5-1 All variables shall have a defined value before they are used
      Member function MacroDefined can be made static, but is not static	MacroDefined	257	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function MacroUndefined can be made static, but is not static	MacroUndefined	261	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function MacroExpands can be made static, but is not static	MacroExpands	266	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Member function SourceRangeSkipped can be made static, but is not static	SourceRangeSkipped	272	7	MISRA08_9-3-3	9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const
      Identifier is typographically ambiguous to cxindex	CXIndex	407	2	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Tok	tok	250	35	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous
      Identifier is typographically ambiguous to Identifier	identifier	250	40	MISRA08_2-10-1	2-10-1 Different identifiers shall be typographically unambiguous

