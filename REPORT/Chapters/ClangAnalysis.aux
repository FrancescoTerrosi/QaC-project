\relax 
\providecommand\hyper@newdestlabel[2]{}
\mph@setcol{ii:8}{\mph@nr}
\citation{bibitem2}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Clang Analysis}{9}{chapter.2}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Introduction}{9}{section.2.1}}
\@writefile{brf}{\backcite{bibitem2}{{9}{2.1}{section.2.1}}}
\mph@setcol{ii:9}{\mph@nr}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Analysis Methodology}{10}{section.2.2}}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Understand}{10}{section.2.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Understand Project}{10}{subsection.2.3.1}}
\mph@setcol{ii:10}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The whole subdirectory tools/libclang is imported in the Understand project in order to run the analysis.\relax }}{11}{figure.2.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The MISRA standard is incorporated in Understand, as well as the Clang Static Analyzer. Generic checks are also offered by the tool as \textsl  {SciTools Recommended Checks} and \textsl  {AllChecks}, some of which are redundant.\relax }}{11}{figure.2.3}}
\mph@setcol{ii:11}{\mph@nr}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.2}Understand Output Format}{12}{subsection.2.3.2}}
\mph@setcol{ii:12}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Result Treemap view.\relax }}{13}{figure.2.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.3}Understand Results}{13}{subsection.2.3.3}}
\mph@setcol{ii:13}{\mph@nr}
\mph@setcol{ii:14}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Result Treemap where files are sorted by $NumberOfViolations/CountLineCode$ ratio. Darker boxes indicates more distinct violation types while wider boxes indicate higher ratio.\relax }}{15}{figure.2.5}}
\mph@setcol{ii:15}{\mph@nr}
\mph@setcol{ii:16}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Result Treemap where files are sorted by $NumberOfViolations$. As you can see the file CIndex.cpp covers almost half of the area.\relax }}{17}{figure.2.6}}
\mph@setcol{ii:17}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Despite the result in the previous figure, the $NumberOfViolations/LineOfCode$ ratio is quite homogeneous.\relax }}{18}{figure.2.7}}
\mph@setcol{ii:18}{\mph@nr}
\mph@setcol{ii:19}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces The CIndex.cpp file covers almost half of the total area also in this figure.\relax }}{20}{figure.2.8}}
\mph@setcol{ii:20}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Even if the proportion of the $max/min$ of the ratio is similar to the previous, the ratio distribution itself is quite sparse (it ranges between 1 and 5.5), as well as the first analysis.\relax }}{21}{figure.2.9}}
\mph@setcol{ii:21}{\mph@nr}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.4}Reports Summary}{22}{subsection.2.3.4}}
\mph@setcol{ii:22}{\mph@nr}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.5}Understand Performances}{23}{subsection.2.3.5}}
\mph@setcol{ii:23}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces Summary of the MISRA checks\relax }}{24}{figure.2.10}}
\mph@setcol{ii:24}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces Summary of the SciTools Recommended Checks\relax }}{25}{figure.2.11}}
\mph@setcol{ii:25}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces Summary of the AllChecks checks\relax }}{26}{figure.2.12}}
\mph@setcol{ii:26}{\mph@nr}
\citation{bibitem3}
\@writefile{toc}{\contentsline {section}{\numberline {2.4}Cppcheck Analysis}{27}{section.2.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.1}Cppcheck Results}{27}{subsection.2.4.1}}
\mph@setcol{ii:27}{\mph@nr}
\citation{bibitem4}
\citation{bibitem5}
\citation{bibitem6}
\@writefile{brf}{\backcite{bibitem3}{{28}{2.4.1}{subsection.2.4.1}}}
\@writefile{brf}{\backcite{bibitem4}{{28}{2.4.1}{subsection.2.4.1}}}
\@writefile{brf}{\backcite{bibitem5}{{28}{2.4.1}{subsection.2.4.1}}}
\@writefile{brf}{\backcite{bibitem6}{{28}{2.4.1}{subsection.2.4.1}}}
\mph@setcol{ii:28}{\mph@nr}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.2}Cppcheck Performance \& Comparison with Understand}{29}{subsection.2.4.2}}
\mph@setcol{ii:29}{\mph@nr}
\mph@setcol{ii:30}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces Summary of the Cppcheck checks\relax }}{31}{figure.2.13}}
\mph@setcol{ii:31}{\mph@nr}
\citation{bibitem7}
\citation{bibitem8}
\@writefile{toc}{\contentsline {section}{\numberline {2.5}Flawfinder Analysis}{32}{section.2.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.1}Flawfinder Results}{32}{subsection.2.5.1}}
\mph@setcol{ii:32}{\mph@nr}
\citation{bibitem9}
\citation{bibitem10}
\@writefile{brf}{\backcite{bibitem7}{{33}{2.5.1}{subsection.2.5.1}}}
\@writefile{brf}{\backcite{bibitem8}{{33}{2.5.1}{subsection.2.5.1}}}
\@writefile{brf}{\backcite{bibitem9}{{33}{2.5.1}{subsection.2.5.1}}}
\@writefile{brf}{\backcite{bibitem10}{{33}{2.5.1}{subsection.2.5.1}}}
\mph@setcol{ii:33}{\mph@nr}
\mph@setcol{ii:34}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces Summary of the Flawfinder checks\relax }}{35}{figure.2.14}}
\mph@setcol{ii:35}{\mph@nr}
\@writefile{toc}{\contentsline {section}{\numberline {2.6}SonarQube \& CERT Rosecheckers}{36}{section.2.6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.6.1}SonarQube}{36}{subsection.2.6.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces The build-scanner and the build-linux-wrapper have to be downloaded to perform the analysis locally\relax }}{36}{figure.2.15}}
\mph@setcol{ii:36}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {16}{\ignorespaces The first command is used to compile the project.\newline  The second set of commands is used by SonarQube scanner to scan the project.\newline  As already mentioned, given the huge size of LLVM-Clang, this was unfeasible\relax }}{37}{figure.2.16}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.6.2}CERT Rosechecker}{37}{subsection.2.6.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {17}{\ignorespaces Screenshot of the Rosechecker Virtual Machine\relax }}{37}{figure.2.17}}
\mph@setcol{ii:37}{\mph@nr}
\@writefile{lof}{\contentsline {figure}{\numberline {18}{\ignorespaces Screenshot of the missing include fatal error\relax }}{38}{figure.2.18}}
\mph@setcol{ii:38}{\mph@nr}
\mph@setcol{ii:39}{\mph@nr}
\@setckpt{Chapters/ClangAnalysis}{
\setcounter{page}{40}
\setcounter{equation}{0}
\setcounter{enumi}{0}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{2}
\setcounter{section}{6}
\setcounter{subsection}{2}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{18}
\setcounter{table}{0}
\setcounter{lstnumber}{1}
\setcounter{ContinuedFloat}{0}
\setcounter{KVtest}{0}
\setcounter{subfigure}{0}
\setcounter{subfigure@save}{0}
\setcounter{lofdepth}{1}
\setcounter{subtable}{0}
\setcounter{subtable@save}{0}
\setcounter{lotdepth}{1}
\setcounter{@pps}{0}
\setcounter{@ppsavesec}{0}
\setcounter{@ppsaveapp}{0}
\setcounter{parentequation}{0}
\setcounter{dummy}{0}
\setcounter{Item}{0}
\setcounter{bookmark@seq@number}{22}
\setcounter{lstlisting}{0}
\setcounter{section@level}{0}
}
