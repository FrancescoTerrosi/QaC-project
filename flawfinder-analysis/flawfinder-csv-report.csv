File,Line,Column,Level,Category,Name,Warning,Suggestion,Note,CWEs,Context,Fingerprint
*** No input files
File,Line,Column,Level,Category,Name,Warning,Suggestion,Note,CWEs,Context,Fingerprint
./CIndexCodeCompletion.cpp,821,22,4,misc,getlogin,"It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807)",Use getpwuid(geteuid()) and extract the desired information instead,,CWE-807,  const char *name = getlogin();,fdd2109b67b97618f5a539788a8c30c0f1f7e57ce120f28b294b53c417db0760
./CIndexer.cpp,115,3,4,buffer,strcpy,Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120),"Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused)",,CWE-120,"  strcpy(w32path, path);",258ce1bd9b375968b4bf748d6848aa850192a51a70dd92461e0e082d37f16363
./ARCMigrate.cpp,40,20,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  bool Logging = ::getenv(""LIBCLANG_LOGGING"");",e86e68830de086cfd4fadf8bac18055cb59249585b8fa6aae0ef5f7985b7ad71
./ARCMigrate.cpp,83,20,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  bool Logging = ::getenv(""LIBCLANG_LOGGING"");",e86e68830de086cfd4fadf8bac18055cb59249585b8fa6aae0ef5f7985b7ad71
./CIndex.cpp,3254,8,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  if (!getenv(""LIBCLANG_DISABLE_CRASH_RECOVERY""))",9e442517c422b94dedbffa775d7a1adc8fae28ff6cdcbce9690f5b227dfa5e0a
./CIndex.cpp,3275,7,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  if (getenv(""LIBCLANG_BGPRIO_INDEX""))",2fb3a6934ef0bdc6b278e2f159b0b171270fea97753d0213e60b5ce1b7336d29
./CIndex.cpp,3278,7,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  if (getenv(""LIBCLANG_BGPRIO_EDIT""))",ee48c1c4a530984e5b16979a378af650b299f6377bd80eea3ea19f8b62a0f283
./CIndex.cpp,3606,14,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  } else if (getenv(""LIBCLANG_RESOURCE_USAGE"")) {",d6b0126b1890433652f00884af0697124eb357c753009c7935a84de203a301b8
./CIndex.cpp,3992,9,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","    if (getenv(""LIBCLANG_RESOURCE_USAGE""))",91e1ce99aa71de88302a2e8741a22ca122bb856ebc186f97d5610699248be245
./CIndex.cpp,4011,14,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  } else if (getenv(""LIBCLANG_RESOURCE_USAGE"")) {",d6b0126b1890433652f00884af0697124eb357c753009c7935a84de203a301b8
./CIndex.cpp,4118,14,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  } else if (getenv(""LIBCLANG_RESOURCE_USAGE""))",685f1b116d699d8e13bf806510226a8080bcd825d4cb8ea4df88c00316da6132
./CIndex.cpp,8707,16,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  if (Size && !getenv(""LIBCLANG_NOTHREADS""))",91ee51ceeb2d92c906e543a6a5294e9aa5a35719d44cac6dd54c27aa21e6b54b
./CIndex.cpp,8723,7,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  if (getenv(""LIBCLANG_BGPRIO_DISABLE""))",5f17517bb408797bf3f54e323b22bc0053a582b6b1902317e094b5f02e2ee041
./CIndexCodeCompletion.cpp,368,7,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  if (getenv(""LIBCLANG_OBJTRACKING""))",3b87d9e8accc2cacbf03c9881c5703b0312f981c87f644f7264fd77dede0fb21
./CIndexCodeCompletion.cpp,380,7,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  if (getenv(""LIBCLANG_OBJTRACKING""))",3b87d9e8accc2cacbf03c9881c5703b0312f981c87f644f7264fd77dede0fb21
./CIndexCodeCompletion.cpp,706,24,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  bool EnableLogging = getenv(""LIBCLANG_CODE_COMPLETION_LOGGING"") != nullptr;",9ae7c0c8bcc0eb4c39d79dee8a1df0d6be77d6f6516c0883ec5c6de4bbb8f547
./CIndexCodeCompletion.cpp,881,14,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  } else if (getenv(""LIBCLANG_RESOURCE_USAGE""))",685f1b116d699d8e13bf806510226a8080bcd825d4cb8ea4df88c00316da6132
./CLog.h,47,39,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","    static const char *sCachedVar = ::getenv(""LIBCLANG_LOGGING"");",b59ecaa9dad7c2195bd406aaa769703b81e6eaf760ffe602bb1e0774c8eb8244
./Indexing.cpp,906,14,3,buffer,getenv,"Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)",Check environment variables carefully before using them,,"CWE-807, CWE-20","  } else if (getenv(""LIBCLANG_RESOURCE_USAGE"")) {",d6b0126b1890433652f00884af0697124eb357c753009c7935a84de203a301b8
./BuildSystem.cpp,83,3,2,buffer,memcpy,Does not check for buffer overflows when copying to destination (CWE-120),Make sure destination can always hold the source data,,CWE-120,"  memcpy(*out_buffer_ptr, Data.data(), Data.size());",6f3d65282fdef370e5aeff313fc45e805579192e21493a504e5dcef6bf0b1185
./BuildSystem.cpp,145,3,2,buffer,memcpy,Does not check for buffer overflows when copying to destination (CWE-120),Make sure destination can always hold the source data,,CWE-120,"  memcpy(*out_buffer_ptr, Data.data(), Data.size());",6f3d65282fdef370e5aeff313fc45e805579192e21493a504e5dcef6bf0b1185
./CIndexCodeCompletion.cpp,685,12,2,buffer,memcpy,Does not check for buffer overflows when copying to destination (CWE-120),Make sure destination can always hold the source data,,CWE-120,"      std::memcpy(AllocatedResults.Results, StoredResults.data(), ",8f774988915b1c5e1e1e2b8b2311fd1d29ceb2bb75d8c76544aebdecbe738a32
./CIndexer.cpp,108,3,2,buffer,char,"Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120)","Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length",,CWE-119!/CWE-120,  char path[MAX_PATH];,2fd017374f75ef8499ac9e46d031c578d1455059eb83662e8204b6d1cbef8887
./CIndexer.cpp,114,3,2,buffer,char,"Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120)","Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length",,CWE-119!/CWE-120,  char w32path[MAX_PATH];,1026a4645a4a115bed93868ffa40cdd535deb11948ed91dc3a9c89c78ab9007c
./CXLoadedDiagnostic.cpp,52,5,2,buffer,memcpy,Does not check for buffer overflows when copying to destination (CWE-120),Make sure destination can always hold the source data,,CWE-120,"    memcpy(mem, Blob.data(), Blob.size());",6cff1d203840cedebddfe242250ed45648457735b281465a97e83f8d3332654d
./Indexing.cpp,438,3,2,buffer,memcpy,Does not check for buffer overflows when copying to destination (CWE-120),Make sure destination can always hold the source data,,CWE-120,"  memcpy(&CB, client_index_callbacks, ClientCBSize);",bc7f635de5740dc596b99873d9ced416d711ef99026a169d121d2164fd3ab0f7
./Indexing.cpp,659,3,2,buffer,memcpy,Does not check for buffer overflows when copying to destination (CWE-120),Make sure destination can always hold the source data,,CWE-120,"  memcpy(&CB, client_index_callbacks, ClientCBSize);",bc7f635de5740dc596b99873d9ced416d711ef99026a169d121d2164fd3ab0f7
./CIndex.cpp,3825,7,1,buffer,strncpy,Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120),,,CWE-120,"      strncpy((char *)result->EvalData.stringVal, strRef.c_str(),",e2e8071e570a758f62b6ede172afd7e68c7e6c6baad0ae18eecebc6d31820dea
./CIndex.cpp,3846,5,1,buffer,strncpy,Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120),,,CWE-120,"    strncpy((char *)result->EvalData.stringVal, strRef.c_str(), strRef.size());",177e3e3799e64a153d332181ee1ea1691d6b3d2d13d74233780ce1224c0d239e
./CIndex.cpp,3865,9,1,buffer,strncpy,Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120),,,CWE-120,"        strncpy((char *)result->EvalData.stringVal, strLiteral.c_str(),",d92d32c81b077b45d78a6eab5f91763ee2fced1414446a72577dafb1d33ac679
./CIndex.cpp,3890,9,1,buffer,strncpy,Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120),,,CWE-120,"        strncpy((char *)result->EvalData.stringVal, strLiteral.c_str(),",d92d32c81b077b45d78a6eab5f91763ee2fced1414446a72577dafb1d33ac679
./CIndex.cpp,3903,7,1,buffer,strncpy,Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120),,,CWE-120,"      strncpy(result->EvalData.stringVal, strName.c_str(), strName.size());",321943b0e7fec4d9d1752396353117f3f93efc38d362a1b7c30f2f934234711d
